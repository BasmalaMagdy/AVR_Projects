
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000319a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000319a  0000322e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800076  00800076  00003244  2**0
                  ALLOC
  3 .stab         00003510  00000000  00000000  00003244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000156d  00000000  00000000  00006754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b854  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c40f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__vector_3>
      10:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__vector_8>
      24:	0c 94 27 14 	jmp	0x284e	; 0x284e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                                 MAIN FUNCTION                              *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 init_flag =0;      /*variable used to know if the first code is done before or not*/
     b5a:	19 82       	std	Y+1, r1	; 0x01

	DDRC |= 0X0C;
     b5c:	a4 e3       	ldi	r26, 0x34	; 52
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e4 e3       	ldi	r30, 0x34	; 52
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8c 60       	ori	r24, 0x0C	; 12
     b68:	8c 93       	st	X, r24
	PORTC &= 0XF3;
     b6a:	a5 e3       	ldi	r26, 0x35	; 53
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	83 7f       	andi	r24, 0xF3	; 243
     b76:	8c 93       	st	X, r24

	DDRD |= 0X04;
     b78:	a1 e3       	ldi	r26, 0x31	; 49
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e1 e3       	ldi	r30, 0x31	; 49
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
    PORTD &= 0XF3;
     b86:	a2 e3       	ldi	r26, 0x32	; 50
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e2 e3       	ldi	r30, 0x32	; 50
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	83 7f       	andi	r24, 0xF3	; 243
     b92:	8c 93       	st	X, r24

	LCD_init();    /* initialize LCD */
     b94:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_init>
	 * We pass the input to the structure of I2C
	 * 1. Prescalar: Fcpu
	 * 2. bit_rate_regester(TWBR): 2 (according to the function Fscl=(Fcpu)/((16)+(2*TWBR*pow(4,TWPS)))
	 * 5. Slave address: 0
	 */
	TWI_ConfigType TWI_Config = {F_CPU_CLOCK,0x02,0x00,0};
     b98:	1a 82       	std	Y+2, r1	; 0x02
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	8b 83       	std	Y+3, r24	; 0x03
     b9e:	1c 82       	std	Y+4, r1	; 0x04
     ba0:	1d 82       	std	Y+5, r1	; 0x05
	EEPROM_init(& TWI_Config);
     ba2:	ce 01       	movw	r24, r28
     ba4:	02 96       	adiw	r24, 0x02	; 2
     ba6:	0e 94 89 06 	call	0xd12	; 0xd12 <EEPROM_init>
	 * 2. Timer_mode: Overflow mode
	 * 3. Prescalar: clk/1024
	 * 4. Initial value: 0
	 * 5. Compare value: 0  (overflow mode)
	 */
	Timer_ConfigType Timer_Config = {TIMER0,OVERFLOW,F_CPUt_1024,0,0};
     baa:	ce 01       	movw	r24, r28
     bac:	06 96       	adiw	r24, 0x06	; 6
     bae:	9d 8b       	std	Y+21, r25	; 0x15
     bb0:	8c 8b       	std	Y+20, r24	; 0x14
     bb2:	ef e6       	ldi	r30, 0x6F	; 111
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ff 8b       	std	Y+23, r31	; 0x17
     bb8:	ee 8b       	std	Y+22, r30	; 0x16
     bba:	f7 e0       	ldi	r31, 0x07	; 7
     bbc:	f8 8f       	std	Y+24, r31	; 0x18
     bbe:	ee 89       	ldd	r30, Y+22	; 0x16
     bc0:	ff 89       	ldd	r31, Y+23	; 0x17
     bc2:	00 80       	ld	r0, Z
     bc4:	8e 89       	ldd	r24, Y+22	; 0x16
     bc6:	9f 89       	ldd	r25, Y+23	; 0x17
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9f 8b       	std	Y+23, r25	; 0x17
     bcc:	8e 8b       	std	Y+22, r24	; 0x16
     bce:	ec 89       	ldd	r30, Y+20	; 0x14
     bd0:	fd 89       	ldd	r31, Y+21	; 0x15
     bd2:	00 82       	st	Z, r0
     bd4:	8c 89       	ldd	r24, Y+20	; 0x14
     bd6:	9d 89       	ldd	r25, Y+21	; 0x15
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	9d 8b       	std	Y+21, r25	; 0x15
     bdc:	8c 8b       	std	Y+20, r24	; 0x14
     bde:	98 8d       	ldd	r25, Y+24	; 0x18
     be0:	91 50       	subi	r25, 0x01	; 1
     be2:	98 8f       	std	Y+24, r25	; 0x18
     be4:	e8 8d       	ldd	r30, Y+24	; 0x18
     be6:	ee 23       	and	r30, r30
     be8:	51 f7       	brne	.-44     	; 0xbbe <main+0x78>
	 * 1. Parity: Disabled (no parity)
	 * 2. Stop_Bit: BIT_1 (1 stop bit)
	 * 3. CharSize: BIT_8 (8-bits data)
	 * 4. Baudrate: 9600
	 */
	UART_ConfigType UART_Config = {DISABLED,BIT_1,BIT_8,9600};
     bea:	ce 01       	movw	r24, r28
     bec:	0d 96       	adiw	r24, 0x0d	; 13
     bee:	9a 8f       	std	Y+26, r25	; 0x1a
     bf0:	89 8f       	std	Y+25, r24	; 0x19
     bf2:	e8 e6       	ldi	r30, 0x68	; 104
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	fc 8f       	std	Y+28, r31	; 0x1c
     bf8:	eb 8f       	std	Y+27, r30	; 0x1b
     bfa:	f7 e0       	ldi	r31, 0x07	; 7
     bfc:	fd 8f       	std	Y+29, r31	; 0x1d
     bfe:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c00:	fc 8d       	ldd	r31, Y+28	; 0x1c
     c02:	00 80       	ld	r0, Z
     c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	9c 8f       	std	Y+28, r25	; 0x1c
     c0c:	8b 8f       	std	Y+27, r24	; 0x1b
     c0e:	e9 8d       	ldd	r30, Y+25	; 0x19
     c10:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c12:	00 82       	st	Z, r0
     c14:	89 8d       	ldd	r24, Y+25	; 0x19
     c16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	9a 8f       	std	Y+26, r25	; 0x1a
     c1c:	89 8f       	std	Y+25, r24	; 0x19
     c1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c20:	91 50       	subi	r25, 0x01	; 1
     c22:	9d 8f       	std	Y+29, r25	; 0x1d
     c24:	ed 8d       	ldd	r30, Y+29	; 0x1d
     c26:	ee 23       	and	r30, r30
     c28:	51 f7       	brne	.-44     	; 0xbfe <main+0xb8>

	UART_init( & UART_Config);     /* initialize UART */
     c2a:	ce 01       	movw	r24, r28
     c2c:	0d 96       	adiw	r24, 0x0d	; 13
     c2e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <UART_init>

	Timer_init(& Timer_Config);   /* initialize TIMER */
     c32:	ce 01       	movw	r24, r28
     c34:	06 96       	adiw	r24, 0x06	; 6
     c36:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Timer_init>

	Timer0_Ovf_setCallBack(Calc_time);
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	94 e1       	ldi	r25, 0x14	; 20
     c3e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Timer0_Ovf_setCallBack>


	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     c42:	af e5       	ldi	r26, 0x5F	; 95
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ef e5       	ldi	r30, 0x5F	; 95
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 68       	ori	r24, 0x80	; 128
     c4e:	8c 93       	st	X, r24
	while(UART_recieveByte()!= M1_READY);  /*MC1 sends to MC2 that it is ready to start*/
     c50:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	e1 f7       	brne	.-8      	; 0xc50 <main+0x10a>

	EEPROM_readByte(0x0420, &init_flag);
     c58:	80 e2       	ldi	r24, 0x20	; 32
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	9e 01       	movw	r18, r28
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	b9 01       	movw	r22, r18
     c64:	0e 94 da 06 	call	0xdb4	; 0xdb4 <EEPROM_readByte>

	UART_sendByte(init_flag);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
	while(1)
	{
		if (init_flag != INIT_FLAG)
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	8a 30       	cpi	r24, 0x0A	; 10
     c72:	39 f0       	breq	.+14     	; 0xc82 <main+0x13c>
		{
			recievePassword();
     c74:	0e 94 c8 11 	call	0x2390	; 0x2390 <recievePassword>
			init_flag = INIT_FLAG;
     c78:	8a e0       	ldi	r24, 0x0A	; 10
     c7a:	89 83       	std	Y+1, r24	; 0x01
			changePass();
     c7c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <changePass>
     c80:	f6 cf       	rjmp	.-20     	; 0xc6e <main+0x128>
		}
		else
		{
			changePass();
     c82:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <changePass>
     c86:	f3 cf       	rjmp	.-26     	; 0xc6e <main+0x128>

00000c88 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     c90:	e7 e2       	ldi	r30, 0x27	; 39
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	83 e8       	ldi	r24, 0x83	; 131
     c9c:	80 83       	st	Z, r24
}
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	87 70       	andi	r24, 0x07	; 7
     cb4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     cb6:	a7 e2       	ldi	r26, 0x27	; 39
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e2       	ldi	r30, 0x27	; 39
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 7e       	andi	r24, 0xE0	; 224
     cc2:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	90 81       	ld	r25, Z
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	89 2b       	or	r24, r25
     cd2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     cd4:	a6 e2       	ldi	r26, 0x26	; 38
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 64       	ori	r24, 0x40	; 64
     ce0:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	80 71       	andi	r24, 0x10	; 16
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	b9 f3       	breq	.-18     	; 0xce2 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	8c 93       	st	X, r24
	return ADC; /* return the data register */
     d02:	e4 e2       	ldi	r30, 0x24	; 36
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(const TWI_ConfigType * Config_Ptr)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <EEPROM_init+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(Config_Ptr);
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	0e 94 3a 07 	call	0xe74	; 0xe74 <TWI_init>
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <EEPROM_writeByte+0x6>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <EEPROM_writeByte+0x8>
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d44:	0e 94 63 07 	call	0xec6	; 0xec6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     d48:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	11 f0       	breq	.+4      	; 0xd54 <EEPROM_writeByte+0x22>
        return ERROR;
     d50:	1c 82       	std	Y+4, r1	; 0x04
     d52:	28 c0       	rjmp	.+80     	; 0xda4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	80 70       	andi	r24, 0x00	; 0
     d5a:	97 70       	andi	r25, 0x07	; 7
     d5c:	88 0f       	add	r24, r24
     d5e:	89 2f       	mov	r24, r25
     d60:	88 1f       	adc	r24, r24
     d62:	99 0b       	sbc	r25, r25
     d64:	91 95       	neg	r25
     d66:	80 6a       	ori	r24, 0xA0	; 160
     d68:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d6c:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     d70:	88 31       	cpi	r24, 0x18	; 24
     d72:	11 f0       	breq	.+4      	; 0xd78 <EEPROM_writeByte+0x46>
        return ERROR; 
     d74:	1c 82       	std	Y+4, r1	; 0x04
     d76:	16 c0       	rjmp	.+44     	; 0xda4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d7e:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     d82:	88 32       	cpi	r24, 0x28	; 40
     d84:	11 f0       	breq	.+4      	; 0xd8a <EEPROM_writeByte+0x58>
        return ERROR;
     d86:	1c 82       	std	Y+4, r1	; 0x04
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d90:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     d94:	88 32       	cpi	r24, 0x28	; 40
     d96:	11 f0       	breq	.+4      	; 0xd9c <EEPROM_writeByte+0x6a>
        return ERROR;
     d98:	1c 82       	std	Y+4, r1	; 0x04
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     d9c:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_stop>
	
    return SUCCESS;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 83       	std	Y+4, r24	; 0x04
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <EEPROM_readByte+0x6>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <EEPROM_readByte+0x8>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	7c 83       	std	Y+4, r23	; 0x04
     dc8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     dca:	0e 94 63 07 	call	0xec6	; 0xec6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     dce:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     dd2:	88 30       	cpi	r24, 0x08	; 8
     dd4:	11 f0       	breq	.+4      	; 0xdda <EEPROM_readByte+0x26>
        return ERROR;
     dd6:	1d 82       	std	Y+5, r1	; 0x05
     dd8:	44 c0       	rjmp	.+136    	; 0xe62 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	80 70       	andi	r24, 0x00	; 0
     de0:	97 70       	andi	r25, 0x07	; 7
     de2:	88 0f       	add	r24, r24
     de4:	89 2f       	mov	r24, r25
     de6:	88 1f       	adc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	91 95       	neg	r25
     dec:	80 6a       	ori	r24, 0xA0	; 160
     dee:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     df2:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     df6:	88 31       	cpi	r24, 0x18	; 24
     df8:	11 f0       	breq	.+4      	; 0xdfe <EEPROM_readByte+0x4a>
        return ERROR;
     dfa:	1d 82       	std	Y+5, r1	; 0x05
     dfc:	32 c0       	rjmp	.+100    	; 0xe62 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     e04:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     e08:	88 32       	cpi	r24, 0x28	; 40
     e0a:	11 f0       	breq	.+4      	; 0xe10 <EEPROM_readByte+0x5c>
        return ERROR;
     e0c:	1d 82       	std	Y+5, r1	; 0x05
     e0e:	29 c0       	rjmp	.+82     	; 0xe62 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e10:	0e 94 63 07 	call	0xec6	; 0xec6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     e14:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     e18:	80 31       	cpi	r24, 0x10	; 16
     e1a:	11 f0       	breq	.+4      	; 0xe20 <EEPROM_readByte+0x6c>
        return ERROR;
     e1c:	1d 82       	std	Y+5, r1	; 0x05
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	80 70       	andi	r24, 0x00	; 0
     e26:	97 70       	andi	r25, 0x07	; 7
     e28:	88 0f       	add	r24, r24
     e2a:	89 2f       	mov	r24, r25
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	91 95       	neg	r25
     e32:	81 6a       	ori	r24, 0xA1	; 161
     e34:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     e38:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     e3c:	80 34       	cpi	r24, 0x40	; 64
     e3e:	11 f0       	breq	.+4      	; 0xe44 <EEPROM_readByte+0x90>
        return ERROR;
     e40:	1d 82       	std	Y+5, r1	; 0x05
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     e44:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_readWithNACK>
     e48:	eb 81       	ldd	r30, Y+3	; 0x03
     e4a:	fc 81       	ldd	r31, Y+4	; 0x04
     e4c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     e4e:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_getStatus>
     e52:	88 35       	cpi	r24, 0x58	; 88
     e54:	11 f0       	breq	.+4      	; 0xe5a <EEPROM_readByte+0xa6>
        return ERROR;
     e56:	1d 82       	std	Y+5, r1	; 0x05
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     e5a:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_stop>
    return SUCCESS;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <TWI_init+0x6>
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    //TWBR = 0x02;
	TWBR = Config_Ptr -> s_bit_rate_reg;
     e84:	a0 e2       	ldi	r26, 0x20	; 32
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	8c 93       	st	X, r24
	//TWSR = 0x00;
	TWSR = Config_Ptr -> prescaler;
     e90:	a1 e2       	ldi	r26, 0x21	; 33
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 81       	ld	r24, Z
     e9a:	8c 93       	st	X, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (TWAR & 0x00) | (Config_Ptr -> s_slave); // my address = 0x00 :)
     e9c:	e2 e2       	ldi	r30, 0x22	; 34
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	a2 e2       	ldi	r26, 0x22	; 34
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	8c 93       	st	X, r24
	
    TWCR = Config_Ptr -> s_interrupt; /* enable TWI */
     eae:	a6 e5       	ldi	r26, 0x56	; 86
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	8c 93       	st	X, r24
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <TWI_start>:

void TWI_start(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     ece:	e6 e5       	ldi	r30, 0x56	; 86
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	84 ea       	ldi	r24, 0xA4	; 164
     ed4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ed6:	e6 e5       	ldi	r30, 0x56	; 86
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	88 23       	and	r24, r24
     ede:	dc f7       	brge	.-10     	; 0xed6 <TWI_start+0x10>
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <TWI_stop>:

void TWI_stop(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     eee:	e6 e5       	ldi	r30, 0x56	; 86
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	84 e9       	ldi	r24, 0x94	; 148
     ef4:	80 83       	st	Z, r24
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <TWI_write>:

void TWI_write(uint8 data)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     f08:	e3 e2       	ldi	r30, 0x23	; 35
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     f10:	e6 e5       	ldi	r30, 0x56	; 86
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	84 e8       	ldi	r24, 0x84	; 132
     f16:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	dc f7       	brge	.-10     	; 0xf18 <TWI_write+0x1c>
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     f32:	e6 e5       	ldi	r30, 0x56	; 86
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	84 ec       	ldi	r24, 0xC4	; 196
     f38:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f3a:	e6 e5       	ldi	r30, 0x56	; 86
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	dc f7       	brge	.-10     	; 0xf3a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     f44:	e3 e2       	ldi	r30, 0x23	; 35
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     f58:	e6 e5       	ldi	r30, 0x56	; 86
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	84 e8       	ldi	r24, 0x84	; 132
     f5e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f60:	e6 e5       	ldi	r30, 0x56	; 86
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	88 23       	and	r24, r24
     f68:	dc f7       	brge	.-10     	; 0xf60 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     f6a:	e3 e2       	ldi	r30, 0x23	; 35
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     f80:	e1 e2       	ldi	r30, 0x21	; 33
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 7f       	andi	r24, 0xF8	; 248
     f88:	89 83       	std	Y+1, r24	; 0x01
    return status;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <KeyPad_getPressedKey+0x6>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     f9e:	1a 82       	std	Y+2, r1	; 0x02
     fa0:	4c c0       	rjmp	.+152    	; 0x103a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     fa2:	e4 e3       	ldi	r30, 0x34	; 52
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	80 e1       	ldi	r24, 0x10	; 16
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <KeyPad_getPressedKey+0x22>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <KeyPad_getPressedKey+0x1e>
     fba:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     fbc:	e5 e3       	ldi	r30, 0x35	; 53
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <KeyPad_getPressedKey+0x3e>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <KeyPad_getPressedKey+0x3a>
     fd6:	80 95       	com	r24
     fd8:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	28 c0       	rjmp	.+80     	; 0x102e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     fde:	e3 e3       	ldi	r30, 0x33	; 51
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a9 01       	movw	r20, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <KeyPad_getPressedKey+0x62>
     ff2:	55 95       	asr	r21
     ff4:	47 95       	ror	r20
     ff6:	8a 95       	dec	r24
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <KeyPad_getPressedKey+0x5e>
     ffa:	ca 01       	movw	r24, r20
     ffc:	81 70       	andi	r24, 0x01	; 1
     ffe:	90 70       	andi	r25, 0x00	; 0
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	91 f4       	brne	.+36     	; 0x1028 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	98 2f       	mov	r25, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	89 0f       	add	r24, r25
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	0e 94 22 08 	call	0x1044	; 0x1044 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	a8 f2       	brcs	.-86     	; 0xfde <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	08 f4       	brcc	.+2      	; 0x1042 <KeyPad_getPressedKey+0xae>
    1040:	b0 cf       	rjmp	.-160    	; 0xfa2 <KeyPad_getPressedKey+0xe>
    1042:	ad cf       	rjmp	.-166    	; 0xf9e <KeyPad_getPressedKey+0xa>

00001044 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <KeyPad_4x4_adjustKeyNumber+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <KeyPad_4x4_adjustKeyNumber+0x8>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3c 83       	std	Y+4, r19	; 0x04
    105a:	2b 83       	std	Y+3, r18	; 0x03
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <KeyPad_4x4_adjustKeyNumber+0x24>
    1066:	70 c0       	rjmp	.+224    	; 0x1148 <KeyPad_4x4_adjustKeyNumber+0x104>
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	29 30       	cpi	r18, 0x09	; 9
    106e:	31 05       	cpc	r19, r1
    1070:	5c f5       	brge	.+86     	; 0x10c8 <KeyPad_4x4_adjustKeyNumber+0x84>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <KeyPad_4x4_adjustKeyNumber+0x3a>
    107c:	59 c0       	rjmp	.+178    	; 0x1130 <KeyPad_4x4_adjustKeyNumber+0xec>
    107e:	2b 81       	ldd	r18, Y+3	; 0x03
    1080:	3c 81       	ldd	r19, Y+4	; 0x04
    1082:	25 30       	cpi	r18, 0x05	; 5
    1084:	31 05       	cpc	r19, r1
    1086:	9c f4       	brge	.+38     	; 0x10ae <KeyPad_4x4_adjustKeyNumber+0x6a>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <KeyPad_4x4_adjustKeyNumber+0x50>
    1092:	48 c0       	rjmp	.+144    	; 0x1124 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1094:	2b 81       	ldd	r18, Y+3	; 0x03
    1096:	3c 81       	ldd	r19, Y+4	; 0x04
    1098:	23 30       	cpi	r18, 0x03	; 3
    109a:	31 05       	cpc	r19, r1
    109c:	0c f0       	brlt	.+2      	; 0x10a0 <KeyPad_4x4_adjustKeyNumber+0x5c>
    109e:	45 c0       	rjmp	.+138    	; 0x112a <KeyPad_4x4_adjustKeyNumber+0xe6>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <KeyPad_4x4_adjustKeyNumber+0x68>
    10aa:	39 c0       	rjmp	.+114    	; 0x111e <KeyPad_4x4_adjustKeyNumber+0xda>
    10ac:	67 c0       	rjmp	.+206    	; 0x117c <KeyPad_4x4_adjustKeyNumber+0x138>
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	26 30       	cpi	r18, 0x06	; 6
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <KeyPad_4x4_adjustKeyNumber+0x76>
    10b8:	41 c0       	rjmp	.+130    	; 0x113c <KeyPad_4x4_adjustKeyNumber+0xf8>
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	87 30       	cpi	r24, 0x07	; 7
    10c0:	91 05       	cpc	r25, r1
    10c2:	0c f0       	brlt	.+2      	; 0x10c6 <KeyPad_4x4_adjustKeyNumber+0x82>
    10c4:	3e c0       	rjmp	.+124    	; 0x1142 <KeyPad_4x4_adjustKeyNumber+0xfe>
    10c6:	37 c0       	rjmp	.+110    	; 0x1136 <KeyPad_4x4_adjustKeyNumber+0xf2>
    10c8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ca:	3c 81       	ldd	r19, Y+4	; 0x04
    10cc:	2c 30       	cpi	r18, 0x0C	; 12
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <KeyPad_4x4_adjustKeyNumber+0x90>
    10d2:	46 c0       	rjmp	.+140    	; 0x1160 <KeyPad_4x4_adjustKeyNumber+0x11c>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	8d 30       	cpi	r24, 0x0D	; 13
    10da:	91 05       	cpc	r25, r1
    10dc:	5c f4       	brge	.+22     	; 0x10f4 <KeyPad_4x4_adjustKeyNumber+0xb0>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	2a 30       	cpi	r18, 0x0A	; 10
    10e4:	31 05       	cpc	r19, r1
    10e6:	b1 f1       	breq	.+108    	; 0x1154 <KeyPad_4x4_adjustKeyNumber+0x110>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	8b 30       	cpi	r24, 0x0B	; 11
    10ee:	91 05       	cpc	r25, r1
    10f0:	a4 f5       	brge	.+104    	; 0x115a <KeyPad_4x4_adjustKeyNumber+0x116>
    10f2:	2d c0       	rjmp	.+90     	; 0x114e <KeyPad_4x4_adjustKeyNumber+0x10a>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	2e 30       	cpi	r18, 0x0E	; 14
    10fa:	31 05       	cpc	r19, r1
    10fc:	b9 f1       	breq	.+110    	; 0x116c <KeyPad_4x4_adjustKeyNumber+0x128>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	8e 30       	cpi	r24, 0x0E	; 14
    1104:	91 05       	cpc	r25, r1
    1106:	7c f1       	brlt	.+94     	; 0x1166 <KeyPad_4x4_adjustKeyNumber+0x122>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	2f 30       	cpi	r18, 0x0F	; 15
    110e:	31 05       	cpc	r19, r1
    1110:	79 f1       	breq	.+94     	; 0x1170 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	91 05       	cpc	r25, r1
    111a:	69 f1       	breq	.+90     	; 0x1176 <KeyPad_4x4_adjustKeyNumber+0x132>
    111c:	2f c0       	rjmp	.+94     	; 0x117c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	2e c0       	rjmp	.+92     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1124:	28 e0       	ldi	r18, 0x08	; 8
    1126:	2a 83       	std	Y+2, r18	; 0x02
    1128:	2b c0       	rjmp	.+86     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    112a:	39 e0       	ldi	r19, 0x09	; 9
    112c:	3a 83       	std	Y+2, r19	; 0x02
    112e:	28 c0       	rjmp	.+80     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1130:	85 e2       	ldi	r24, 0x25	; 37
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	25 c0       	rjmp	.+74     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	22 c0       	rjmp	.+68     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    113c:	25 e0       	ldi	r18, 0x05	; 5
    113e:	2a 83       	std	Y+2, r18	; 0x02
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1142:	36 e0       	ldi	r19, 0x06	; 6
    1144:	3a 83       	std	Y+2, r19	; 0x02
    1146:	1c c0       	rjmp	.+56     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1148:	8a e2       	ldi	r24, 0x2A	; 42
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	19 c0       	rjmp	.+50     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	16 c0       	rjmp	.+44     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1154:	22 e0       	ldi	r18, 0x02	; 2
    1156:	2a 83       	std	Y+2, r18	; 0x02
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    115a:	33 e0       	ldi	r19, 0x03	; 3
    115c:	3a 83       	std	Y+2, r19	; 0x02
    115e:	10 c0       	rjmp	.+32     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1160:	8d e2       	ldi	r24, 0x2D	; 45
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1166:	9d e0       	ldi	r25, 0x0D	; 13
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	0a c0       	rjmp	.+20     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    116c:	1a 82       	std	Y+2, r1	; 0x02
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1170:	2d e3       	ldi	r18, 0x3D	; 61
    1172:	2a 83       	std	Y+2, r18	; 0x02
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1176:	3b e2       	ldi	r19, 0x2B	; 43
    1178:	3a 83       	std	Y+2, r19	; 0x02
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1198:	a7 e3       	ldi	r26, 0x37	; 55
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 60       	ori	r24, 0x0E	; 14
    11a4:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    11a6:	aa e3       	ldi	r26, 0x3A	; 58
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e3       	ldi	r30, 0x3A	; 58
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 60       	ori	r24, 0x0F	; 15
    11b2:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    11ba:	88 e2       	ldi	r24, 0x28	; 40
    11bc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    11c0:	8c e0       	ldi	r24, 0x0C	; 12
    11c2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	c3 56       	subi	r28, 0x63	; 99
    11e0:	d0 40       	sbci	r29, 0x00	; 0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	fe 01       	movw	r30, r28
    11ee:	ed 59       	subi	r30, 0x9D	; 157
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    11f4:	a8 e3       	ldi	r26, 0x38	; 56
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e3       	ldi	r30, 0x38	; 56
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8d 7f       	andi	r24, 0xFD	; 253
    1200:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1202:	a8 e3       	ldi	r26, 0x38	; 56
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e8 e3       	ldi	r30, 0x38	; 56
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8b 7f       	andi	r24, 0xFB	; 251
    120e:	8c 93       	st	X, r24
    1210:	fe 01       	movw	r30, r28
    1212:	e1 5a       	subi	r30, 0xA1	; 161
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 e8       	ldi	r26, 0x80	; 128
    121c:	bf e3       	ldi	r27, 0x3F	; 63
    121e:	80 83       	st	Z, r24
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	a2 83       	std	Z+2, r26	; 0x02
    1224:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1226:	8e 01       	movw	r16, r28
    1228:	05 5a       	subi	r16, 0xA5	; 165
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	fe 01       	movw	r30, r28
    122e:	e1 5a       	subi	r30, 0xA1	; 161
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4a ef       	ldi	r20, 0xFA	; 250
    1240:	54 e4       	ldi	r21, 0x44	; 68
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	f8 01       	movw	r30, r16
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	a2 83       	std	Z+2, r26	; 0x02
    1252:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1254:	fe 01       	movw	r30, r28
    1256:	e5 5a       	subi	r30, 0xA5	; 165
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	44 f4       	brge	.+16     	; 0x1282 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1272:	fe 01       	movw	r30, r28
    1274:	e7 5a       	subi	r30, 0xA7	; 167
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
    1280:	64 c0       	rjmp	.+200    	; 0x134a <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1282:	fe 01       	movw	r30, r28
    1284:	e5 5a       	subi	r30, 0xA5	; 165
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <LCD_sendCommand+0xd0>
    12a0:	43 c0       	rjmp	.+134    	; 0x1328 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	fe 01       	movw	r30, r28
    12a4:	e1 5a       	subi	r30, 0xA1	; 161
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e2       	ldi	r20, 0x20	; 32
    12b6:	51 e4       	ldi	r21, 0x41	; 65
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8e 01       	movw	r16, r28
    12c2:	07 5a       	subi	r16, 0xA7	; 167
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	f8 01       	movw	r30, r16
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	1f c0       	rjmp	.+62     	; 0x1318 <LCD_sendCommand+0x146>
    12da:	fe 01       	movw	r30, r28
    12dc:	e9 5a       	subi	r30, 0xA9	; 169
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	88 ec       	ldi	r24, 0xC8	; 200
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12e8:	fe 01       	movw	r30, r28
    12ea:	e9 5a       	subi	r30, 0xA9	; 169
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_sendCommand+0x120>
    12f6:	fe 01       	movw	r30, r28
    12f8:	e9 5a       	subi	r30, 0xA9	; 169
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	de 01       	movw	r26, r28
    1302:	a7 5a       	subi	r26, 0xA7	; 167
    1304:	bf 4f       	sbci	r27, 0xFF	; 255
    1306:	fe 01       	movw	r30, r28
    1308:	e7 5a       	subi	r30, 0xA7	; 167
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	9c 93       	st	X, r25
    1316:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1318:	fe 01       	movw	r30, r28
    131a:	e7 5a       	subi	r30, 0xA7	; 167
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	d1 f6       	brne	.-76     	; 0x12da <LCD_sendCommand+0x108>
    1326:	27 c0       	rjmp	.+78     	; 0x1376 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	8e 01       	movw	r16, r28
    132a:	07 5a       	subi	r16, 0xA7	; 167
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	e5 5a       	subi	r30, 0xA5	; 165
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	f8 01       	movw	r30, r16
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	80 83       	st	Z, r24
    134a:	de 01       	movw	r26, r28
    134c:	ab 5a       	subi	r26, 0xAB	; 171
    134e:	bf 4f       	sbci	r27, 0xFF	; 255
    1350:	fe 01       	movw	r30, r28
    1352:	e7 5a       	subi	r30, 0xA7	; 167
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	8d 93       	st	X+, r24
    135c:	9c 93       	st	X, r25
    135e:	fe 01       	movw	r30, r28
    1360:	eb 5a       	subi	r30, 0xAB	; 171
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <LCD_sendCommand+0x196>
    136c:	fe 01       	movw	r30, r28
    136e:	eb 5a       	subi	r30, 0xAB	; 171
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 60       	ori	r24, 0x08	; 8
    1382:	8c 93       	st	X, r24
    1384:	fe 01       	movw	r30, r28
    1386:	ef 5a       	subi	r30, 0xAF	; 175
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 e8       	ldi	r26, 0x80	; 128
    1390:	bf e3       	ldi	r27, 0x3F	; 63
    1392:	80 83       	st	Z, r24
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	a2 83       	std	Z+2, r26	; 0x02
    1398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	8e 01       	movw	r16, r28
    139c:	03 5b       	subi	r16, 0xB3	; 179
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	ef 5a       	subi	r30, 0xAF	; 175
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a ef       	ldi	r20, 0xFA	; 250
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	f8 01       	movw	r30, r16
    13c0:	80 83       	st	Z, r24
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	a2 83       	std	Z+2, r26	; 0x02
    13c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13c8:	fe 01       	movw	r30, r28
    13ca:	e3 5b       	subi	r30, 0xB3	; 179
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	44 f4       	brge	.+16     	; 0x13f6 <LCD_sendCommand+0x224>
		__ticks = 1;
    13e6:	fe 01       	movw	r30, r28
    13e8:	e5 5b       	subi	r30, 0xB5	; 181
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	80 83       	st	Z, r24
    13f4:	64 c0       	rjmp	.+200    	; 0x14be <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    13f6:	fe 01       	movw	r30, r28
    13f8:	e3 5b       	subi	r30, 0xB3	; 179
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	0c f0       	brlt	.+2      	; 0x1416 <LCD_sendCommand+0x244>
    1414:	43 c0       	rjmp	.+134    	; 0x149c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	fe 01       	movw	r30, r28
    1418:	ef 5a       	subi	r30, 0xAF	; 175
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	8e 01       	movw	r16, r28
    1436:	05 5b       	subi	r16, 0xB5	; 181
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	f8 01       	movw	r30, r16
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	1f c0       	rjmp	.+62     	; 0x148c <LCD_sendCommand+0x2ba>
    144e:	fe 01       	movw	r30, r28
    1450:	e7 5b       	subi	r30, 0xB7	; 183
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	88 ec       	ldi	r24, 0xC8	; 200
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
    145c:	fe 01       	movw	r30, r28
    145e:	e7 5b       	subi	r30, 0xB7	; 183
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_sendCommand+0x294>
    146a:	fe 01       	movw	r30, r28
    146c:	e7 5b       	subi	r30, 0xB7	; 183
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	de 01       	movw	r26, r28
    1476:	a5 5b       	subi	r26, 0xB5	; 181
    1478:	bf 4f       	sbci	r27, 0xFF	; 255
    147a:	fe 01       	movw	r30, r28
    147c:	e5 5b       	subi	r30, 0xB5	; 181
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	fe 01       	movw	r30, r28
    148e:	e5 5b       	subi	r30, 0xB5	; 181
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	d1 f6       	brne	.-76     	; 0x144e <LCD_sendCommand+0x27c>
    149a:	27 c0       	rjmp	.+78     	; 0x14ea <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	8e 01       	movw	r16, r28
    149e:	05 5b       	subi	r16, 0xB5	; 181
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	fe 01       	movw	r30, r28
    14a4:	e3 5b       	subi	r30, 0xB3	; 179
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	f8 01       	movw	r30, r16
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	de 01       	movw	r26, r28
    14c0:	a9 5b       	subi	r26, 0xB9	; 185
    14c2:	bf 4f       	sbci	r27, 0xFF	; 255
    14c4:	fe 01       	movw	r30, r28
    14c6:	e5 5b       	subi	r30, 0xB5	; 181
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	8d 93       	st	X+, r24
    14d0:	9c 93       	st	X, r25
    14d2:	fe 01       	movw	r30, r28
    14d4:	e9 5b       	subi	r30, 0xB9	; 185
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_sendCommand+0x30a>
    14e0:	fe 01       	movw	r30, r28
    14e2:	e9 5b       	subi	r30, 0xB9	; 185
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    14ea:	ab e3       	ldi	r26, 0x3B	; 59
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	98 2f       	mov	r25, r24
    14f6:	90 7f       	andi	r25, 0xF0	; 240
    14f8:	fe 01       	movw	r30, r28
    14fa:	ed 59       	subi	r30, 0x9D	; 157
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	82 95       	swap	r24
    1502:	8f 70       	andi	r24, 0x0F	; 15
    1504:	89 2b       	or	r24, r25
    1506:	8c 93       	st	X, r24
    1508:	fe 01       	movw	r30, r28
    150a:	ed 5b       	subi	r30, 0xBD	; 189
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e8       	ldi	r26, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	80 83       	st	Z, r24
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	a2 83       	std	Z+2, r26	; 0x02
    151c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	8e 01       	movw	r16, r28
    1520:	01 5c       	subi	r16, 0xC1	; 193
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	fe 01       	movw	r30, r28
    1526:	ed 5b       	subi	r30, 0xBD	; 189
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	60 81       	ld	r22, Z
    152c:	71 81       	ldd	r23, Z+1	; 0x01
    152e:	82 81       	ldd	r24, Z+2	; 0x02
    1530:	93 81       	ldd	r25, Z+3	; 0x03
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	4a ef       	ldi	r20, 0xFA	; 250
    1538:	54 e4       	ldi	r21, 0x44	; 68
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	f8 01       	movw	r30, r16
    1544:	80 83       	st	Z, r24
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	a2 83       	std	Z+2, r26	; 0x02
    154a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    154c:	fe 01       	movw	r30, r28
    154e:	ff 96       	adiw	r30, 0x3f	; 63
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9e af       	std	Y+62, r25	; 0x3e
    156e:	8d af       	std	Y+61, r24	; 0x3d
    1570:	46 c0       	rjmp	.+140    	; 0x15fe <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    1572:	fe 01       	movw	r30, r28
    1574:	ff 96       	adiw	r30, 0x3f	; 63
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	64 f5       	brge	.+88     	; 0x15e6 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	fe 01       	movw	r30, r28
    1590:	ed 5b       	subi	r30, 0xBD	; 189
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e af       	std	Y+62, r25	; 0x3e
    15ba:	8d af       	std	Y+61, r24	; 0x3d
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <LCD_sendCommand+0x40a>
    15be:	88 ec       	ldi	r24, 0xC8	; 200
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9c af       	std	Y+60, r25	; 0x3c
    15c4:	8b af       	std	Y+59, r24	; 0x3b
    15c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    15c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_sendCommand+0x3f8>
    15ce:	9c af       	std	Y+60, r25	; 0x3c
    15d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    15d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9e af       	std	Y+62, r25	; 0x3e
    15da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15de:	9e ad       	ldd	r25, Y+62	; 0x3e
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <LCD_sendCommand+0x3ec>
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	fe 01       	movw	r30, r28
    15e8:	ff 96       	adiw	r30, 0x3f	; 63
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
    15fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1600:	9e ad       	ldd	r25, Y+62	; 0x3e
    1602:	9a af       	std	Y+58, r25	; 0x3a
    1604:	89 af       	std	Y+57, r24	; 0x39
    1606:	89 ad       	ldd	r24, Y+57	; 0x39
    1608:	9a ad       	ldd	r25, Y+58	; 0x3a
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0x438>
    160e:	9a af       	std	Y+58, r25	; 0x3a
    1610:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1612:	a8 e3       	ldi	r26, 0x38	; 56
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e8 e3       	ldi	r30, 0x38	; 56
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	87 7f       	andi	r24, 0xF7	; 247
    161e:	8c 93       	st	X, r24
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e8       	ldi	r26, 0x80	; 128
    1626:	bf e3       	ldi	r27, 0x3F	; 63
    1628:	8d ab       	std	Y+53, r24	; 0x35
    162a:	9e ab       	std	Y+54, r25	; 0x36
    162c:	af ab       	std	Y+55, r26	; 0x37
    162e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	6d a9       	ldd	r22, Y+53	; 0x35
    1632:	7e a9       	ldd	r23, Y+54	; 0x36
    1634:	8f a9       	ldd	r24, Y+55	; 0x37
    1636:	98 ad       	ldd	r25, Y+56	; 0x38
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a ef       	ldi	r20, 0xFA	; 250
    163e:	54 e4       	ldi	r21, 0x44	; 68
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	89 ab       	std	Y+49, r24	; 0x31
    164a:	9a ab       	std	Y+50, r25	; 0x32
    164c:	ab ab       	std	Y+51, r26	; 0x33
    164e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1650:	69 a9       	ldd	r22, Y+49	; 0x31
    1652:	7a a9       	ldd	r23, Y+50	; 0x32
    1654:	8b a9       	ldd	r24, Y+51	; 0x33
    1656:	9c a9       	ldd	r25, Y+52	; 0x34
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	98 ab       	std	Y+48, r25	; 0x30
    166e:	8f a7       	std	Y+47, r24	; 0x2f
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1672:	69 a9       	ldd	r22, Y+49	; 0x31
    1674:	7a a9       	ldd	r23, Y+50	; 0x32
    1676:	8b a9       	ldd	r24, Y+51	; 0x33
    1678:	9c a9       	ldd	r25, Y+52	; 0x34
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	6d a9       	ldd	r22, Y+53	; 0x35
    168c:	7e a9       	ldd	r23, Y+54	; 0x36
    168e:	8f a9       	ldd	r24, Y+55	; 0x37
    1690:	98 ad       	ldd	r25, Y+56	; 0x38
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	98 ab       	std	Y+48, r25	; 0x30
    16b0:	8f a7       	std	Y+47, r24	; 0x2f
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <LCD_sendCommand+0x500>
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e a7       	std	Y+46, r25	; 0x2e
    16ba:	8d a7       	std	Y+45, r24	; 0x2d
    16bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16be:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_sendCommand+0x4ee>
    16c4:	9e a7       	std	Y+46, r25	; 0x2e
    16c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ca:	98 a9       	ldd	r25, Y+48	; 0x30
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d4:	98 a9       	ldd	r25, Y+48	; 0x30
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <LCD_sendCommand+0x4e2>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	69 a9       	ldd	r22, Y+49	; 0x31
    16de:	7a a9       	ldd	r23, Y+50	; 0x32
    16e0:	8b a9       	ldd	r24, Y+51	; 0x33
    16e2:	9c a9       	ldd	r25, Y+52	; 0x34
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	98 ab       	std	Y+48, r25	; 0x30
    16ee:	8f a7       	std	Y+47, r24	; 0x2f
    16f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f2:	98 a9       	ldd	r25, Y+48	; 0x30
    16f4:	9c a7       	std	Y+44, r25	; 0x2c
    16f6:	8b a7       	std	Y+43, r24	; 0x2b
    16f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_sendCommand+0x52a>
    1700:	9c a7       	std	Y+44, r25	; 0x2c
    1702:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1704:	a8 e3       	ldi	r26, 0x38	; 56
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e3       	ldi	r30, 0x38	; 56
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 60       	ori	r24, 0x08	; 8
    1710:	8c 93       	st	X, r24
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e8       	ldi	r26, 0x80	; 128
    1718:	bf e3       	ldi	r27, 0x3F	; 63
    171a:	8f a3       	std	Y+39, r24	; 0x27
    171c:	98 a7       	std	Y+40, r25	; 0x28
    171e:	a9 a7       	std	Y+41, r26	; 0x29
    1720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6f a1       	ldd	r22, Y+39	; 0x27
    1724:	78 a5       	ldd	r23, Y+40	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	9a a5       	ldd	r25, Y+42	; 0x2a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8b a3       	std	Y+35, r24	; 0x23
    173c:	9c a3       	std	Y+36, r25	; 0x24
    173e:	ad a3       	std	Y+37, r26	; 0x25
    1740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1742:	6b a1       	ldd	r22, Y+35	; 0x23
    1744:	7c a1       	ldd	r23, Y+36	; 0x24
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <LCD_sendCommand+0x592>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6f a1       	ldd	r22, Y+39	; 0x27
    177e:	78 a5       	ldd	r23, Y+40	; 0x28
    1780:	89 a5       	ldd	r24, Y+41	; 0x29
    1782:	9a a5       	ldd	r25, Y+42	; 0x2a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_sendCommand+0x5f2>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 a3       	std	Y+32, r25	; 0x20
    17ac:	8f 8f       	std	Y+31, r24	; 0x1f
    17ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b0:	98 a1       	ldd	r25, Y+32	; 0x20
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_sendCommand+0x5e0>
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	89 a1       	ldd	r24, Y+33	; 0x21
    17bc:	9a a1       	ldd	r25, Y+34	; 0x22
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <LCD_sendCommand+0x5d4>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	89 a1       	ldd	r24, Y+33	; 0x21
    17e4:	9a a1       	ldd	r25, Y+34	; 0x22
    17e6:	9e 8f       	std	Y+30, r25	; 0x1e
    17e8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_sendCommand+0x61c>
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    17f6:	ab e3       	ldi	r26, 0x3B	; 59
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	eb e3       	ldi	r30, 0x3B	; 59
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	98 2f       	mov	r25, r24
    1802:	90 7f       	andi	r25, 0xF0	; 240
    1804:	fe 01       	movw	r30, r28
    1806:	ed 59       	subi	r30, 0x9D	; 157
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	8f 70       	andi	r24, 0x0F	; 15
    180e:	89 2b       	or	r24, r25
    1810:	8c 93       	st	X, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e8       	ldi	r26, 0x80	; 128
    1818:	bf e3       	ldi	r27, 0x3F	; 63
    181a:	89 8f       	std	Y+25, r24	; 0x19
    181c:	9a 8f       	std	Y+26, r25	; 0x1a
    181e:	ab 8f       	std	Y+27, r26	; 0x1b
    1820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	69 8d       	ldd	r22, Y+25	; 0x19
    1824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a ef       	ldi	r20, 0xFA	; 250
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8d 8b       	std	Y+21, r24	; 0x15
    183c:	9e 8b       	std	Y+22, r25	; 0x16
    183e:	af 8b       	std	Y+23, r26	; 0x17
    1840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1842:	6d 89       	ldd	r22, Y+21	; 0x15
    1844:	7e 89       	ldd	r23, Y+22	; 0x16
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <LCD_sendCommand+0x692>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 8b       	std	Y+20, r25	; 0x14
    1860:	8b 8b       	std	Y+19, r24	; 0x13
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	4c f5       	brge	.+82     	; 0x18ce <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187c:	69 8d       	ldd	r22, Y+25	; 0x19
    187e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <LCD_sendCommand+0x6f2>
    18a6:	88 ec       	ldi	r24, 0xC8	; 200
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9a 8b       	std	Y+18, r25	; 0x12
    18ac:	89 8b       	std	Y+17, r24	; 0x11
    18ae:	89 89       	ldd	r24, Y+17	; 0x11
    18b0:	9a 89       	ldd	r25, Y+18	; 0x12
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_sendCommand+0x6e0>
    18b6:	9a 8b       	std	Y+18, r25	; 0x12
    18b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	8b 89       	ldd	r24, Y+19	; 0x13
    18bc:	9c 89       	ldd	r25, Y+20	; 0x14
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c4:	8b 89       	ldd	r24, Y+19	; 0x13
    18c6:	9c 89       	ldd	r25, Y+20	; 0x14
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <LCD_sendCommand+0x6d4>
    18cc:	14 c0       	rjmp	.+40     	; 0x18f6 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ce:	6d 89       	ldd	r22, Y+21	; 0x15
    18d0:	7e 89       	ldd	r23, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 8b       	std	Y+20, r25	; 0x14
    18e0:	8b 8b       	std	Y+19, r24	; 0x13
    18e2:	8b 89       	ldd	r24, Y+19	; 0x13
    18e4:	9c 89       	ldd	r25, Y+20	; 0x14
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	98 89       	ldd	r25, Y+16	; 0x10
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_sendCommand+0x71c>
    18f2:	98 8b       	std	Y+16, r25	; 0x10
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    18f6:	a8 e3       	ldi	r26, 0x38	; 56
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e8 e3       	ldi	r30, 0x38	; 56
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	87 7f       	andi	r24, 0xF7	; 247
    1902:	8c 93       	st	X, r24
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	8b 87       	std	Y+11, r24	; 0x0b
    190e:	9c 87       	std	Y+12, r25	; 0x0c
    1910:	ad 87       	std	Y+13, r26	; 0x0d
    1912:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	6b 85       	ldd	r22, Y+11	; 0x0b
    1916:	7c 85       	ldd	r23, Y+12	; 0x0c
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8f 83       	std	Y+7, r24	; 0x07
    192e:	98 87       	std	Y+8, r25	; 0x08
    1930:	a9 87       	std	Y+9, r26	; 0x09
    1932:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <LCD_sendCommand+0x784>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <LCD_sendCommand+0x7e4>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_sendCommand+0x7d2>
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <LCD_sendCommand+0x7c6>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_sendCommand+0x80e>
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    19e8:	cd 59       	subi	r28, 0x9D	; 157
    19ea:	df 4f       	sbci	r29, 0xFF	; 255
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	c3 56       	subi	r28, 0x63	; 99
    1a0e:	d0 40       	sbci	r29, 0x00	; 0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 59       	subi	r30, 0x9D	; 157
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1a22:	a8 e3       	ldi	r26, 0x38	; 56
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	82 60       	ori	r24, 0x02	; 2
    1a2e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a30:	a8 e3       	ldi	r26, 0x38	; 56
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e8 e3       	ldi	r30, 0x38	; 56
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8b 7f       	andi	r24, 0xFB	; 251
    1a3c:	8c 93       	st	X, r24
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e1 5a       	subi	r30, 0xA1	; 161
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e8       	ldi	r26, 0x80	; 128
    1a4a:	bf e3       	ldi	r27, 0x3F	; 63
    1a4c:	80 83       	st	Z, r24
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	a2 83       	std	Z+2, r26	; 0x02
    1a52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	8e 01       	movw	r16, r28
    1a56:	05 5a       	subi	r16, 0xA5	; 165
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e1 5a       	subi	r30, 0xA1	; 161
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	f8 01       	movw	r30, r16
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a82:	fe 01       	movw	r30, r28
    1a84:	e5 5a       	subi	r30, 0xA5	; 165
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	44 f4       	brge	.+16     	; 0x1ab0 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e7 5a       	subi	r30, 0xA7	; 167
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	64 c0       	rjmp	.+200    	; 0x1b78 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e5 5a       	subi	r30, 0xA5	; 165
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	0c f0       	brlt	.+2      	; 0x1ad0 <LCD_displayCharacter+0xd0>
    1ace:	43 c0       	rjmp	.+134    	; 0x1b56 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e1 5a       	subi	r30, 0xA1	; 161
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8e 01       	movw	r16, r28
    1af0:	07 5a       	subi	r16, 0xA7	; 167
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	1f c0       	rjmp	.+62     	; 0x1b46 <LCD_displayCharacter+0x146>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e9 5a       	subi	r30, 0xA9	; 169
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	88 ec       	ldi	r24, 0xC8	; 200
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	fe 01       	movw	r30, r28
    1b18:	e9 5a       	subi	r30, 0xA9	; 169
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_displayCharacter+0x120>
    1b24:	fe 01       	movw	r30, r28
    1b26:	e9 5a       	subi	r30, 0xA9	; 169
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	de 01       	movw	r26, r28
    1b30:	a7 5a       	subi	r26, 0xA7	; 167
    1b32:	bf 4f       	sbci	r27, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	e7 5a       	subi	r30, 0xA7	; 167
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	9c 93       	st	X, r25
    1b44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5a       	subi	r30, 0xA7	; 167
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	d1 f6       	brne	.-76     	; 0x1b08 <LCD_displayCharacter+0x108>
    1b54:	27 c0       	rjmp	.+78     	; 0x1ba4 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	8e 01       	movw	r16, r28
    1b58:	07 5a       	subi	r16, 0xA7	; 167
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e5 5a       	subi	r30, 0xA5	; 165
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	f8 01       	movw	r30, r16
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24
    1b78:	de 01       	movw	r26, r28
    1b7a:	ab 5a       	subi	r26, 0xAB	; 171
    1b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 5a       	subi	r30, 0xA7	; 167
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	8d 93       	st	X+, r24
    1b8a:	9c 93       	st	X, r25
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	eb 5a       	subi	r30, 0xAB	; 171
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_displayCharacter+0x196>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	eb 5a       	subi	r30, 0xAB	; 171
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ba4:	a8 e3       	ldi	r26, 0x38	; 56
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e8 e3       	ldi	r30, 0x38	; 56
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 60       	ori	r24, 0x08	; 8
    1bb0:	8c 93       	st	X, r24
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ef 5a       	subi	r30, 0xAF	; 175
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e8       	ldi	r26, 0x80	; 128
    1bbe:	bf e3       	ldi	r27, 0x3F	; 63
    1bc0:	80 83       	st	Z, r24
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	a2 83       	std	Z+2, r26	; 0x02
    1bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	8e 01       	movw	r16, r28
    1bca:	03 5b       	subi	r16, 0xB3	; 179
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ef 5a       	subi	r30, 0xAF	; 175
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a ef       	ldi	r20, 0xFA	; 250
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	f8 01       	movw	r30, r16
    1bee:	80 83       	st	Z, r24
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	a2 83       	std	Z+2, r26	; 0x02
    1bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e3 5b       	subi	r30, 0xB3	; 179
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	44 f4       	brge	.+16     	; 0x1c24 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1c14:	fe 01       	movw	r30, r28
    1c16:	e5 5b       	subi	r30, 0xB5	; 181
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	64 c0       	rjmp	.+200    	; 0x1cec <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 5b       	subi	r30, 0xB3	; 179
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	0c f0       	brlt	.+2      	; 0x1c44 <LCD_displayCharacter+0x244>
    1c42:	43 c0       	rjmp	.+134    	; 0x1cca <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	fe 01       	movw	r30, r28
    1c46:	ef 5a       	subi	r30, 0xAF	; 175
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8e 01       	movw	r16, r28
    1c64:	05 5b       	subi	r16, 0xB5	; 181
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	1f c0       	rjmp	.+62     	; 0x1cba <LCD_displayCharacter+0x2ba>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e7 5b       	subi	r30, 0xB7	; 183
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 5b       	subi	r30, 0xB7	; 183
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_displayCharacter+0x294>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 5b       	subi	r30, 0xB7	; 183
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	de 01       	movw	r26, r28
    1ca4:	a5 5b       	subi	r26, 0xB5	; 181
    1ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5b       	subi	r30, 0xB5	; 181
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	11 96       	adiw	r26, 0x01	; 1
    1cb6:	9c 93       	st	X, r25
    1cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e5 5b       	subi	r30, 0xB5	; 181
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	d1 f6       	brne	.-76     	; 0x1c7c <LCD_displayCharacter+0x27c>
    1cc8:	27 c0       	rjmp	.+78     	; 0x1d18 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	8e 01       	movw	r16, r28
    1ccc:	05 5b       	subi	r16, 0xB5	; 181
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e3 5b       	subi	r30, 0xB3	; 179
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	de 01       	movw	r26, r28
    1cee:	a9 5b       	subi	r26, 0xB9	; 185
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e5 5b       	subi	r30, 0xB5	; 181
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	8d 93       	st	X+, r24
    1cfe:	9c 93       	st	X, r25
    1d00:	fe 01       	movw	r30, r28
    1d02:	e9 5b       	subi	r30, 0xB9	; 185
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_displayCharacter+0x30a>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e9 5b       	subi	r30, 0xB9	; 185
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1d18:	ab e3       	ldi	r26, 0x3B	; 59
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	eb e3       	ldi	r30, 0x3B	; 59
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	98 2f       	mov	r25, r24
    1d24:	90 7f       	andi	r25, 0xF0	; 240
    1d26:	fe 01       	movw	r30, r28
    1d28:	ed 59       	subi	r30, 0x9D	; 157
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	82 95       	swap	r24
    1d30:	8f 70       	andi	r24, 0x0F	; 15
    1d32:	89 2b       	or	r24, r25
    1d34:	8c 93       	st	X, r24
    1d36:	fe 01       	movw	r30, r28
    1d38:	ed 5b       	subi	r30, 0xBD	; 189
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	80 83       	st	Z, r24
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	a2 83       	std	Z+2, r26	; 0x02
    1d4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	8e 01       	movw	r16, r28
    1d4e:	01 5c       	subi	r16, 0xC1	; 193
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	fe 01       	movw	r30, r28
    1d54:	ed 5b       	subi	r30, 0xBD	; 189
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a ef       	ldi	r20, 0xFA	; 250
    1d66:	54 e4       	ldi	r21, 0x44	; 68
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	f8 01       	movw	r30, r16
    1d72:	80 83       	st	Z, r24
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	a2 83       	std	Z+2, r26	; 0x02
    1d78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ff 96       	adiw	r30, 0x3f	; 63
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9e af       	std	Y+62, r25	; 0x3e
    1d9c:	8d af       	std	Y+61, r24	; 0x3d
    1d9e:	46 c0       	rjmp	.+140    	; 0x1e2c <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    1da0:	fe 01       	movw	r30, r28
    1da2:	ff 96       	adiw	r30, 0x3f	; 63
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	64 f5       	brge	.+88     	; 0x1e14 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ed 5b       	subi	r30, 0xBD	; 189
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e af       	std	Y+62, r25	; 0x3e
    1de8:	8d af       	std	Y+61, r24	; 0x3d
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <LCD_displayCharacter+0x40a>
    1dec:	88 ec       	ldi	r24, 0xC8	; 200
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c af       	std	Y+60, r25	; 0x3c
    1df2:	8b af       	std	Y+59, r24	; 0x3b
    1df4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_displayCharacter+0x3f8>
    1dfc:	9c af       	std	Y+60, r25	; 0x3c
    1dfe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9e af       	std	Y+62, r25	; 0x3e
    1e08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <LCD_displayCharacter+0x3ec>
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	fe 01       	movw	r30, r28
    1e16:	ff 96       	adiw	r30, 0x3f	; 63
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e af       	std	Y+62, r25	; 0x3e
    1e2a:	8d af       	std	Y+61, r24	; 0x3d
    1e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e30:	9a af       	std	Y+58, r25	; 0x3a
    1e32:	89 af       	std	Y+57, r24	; 0x39
    1e34:	89 ad       	ldd	r24, Y+57	; 0x39
    1e36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_displayCharacter+0x438>
    1e3c:	9a af       	std	Y+58, r25	; 0x3a
    1e3e:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e40:	a8 e3       	ldi	r26, 0x38	; 56
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e8 e3       	ldi	r30, 0x38	; 56
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	87 7f       	andi	r24, 0xF7	; 247
    1e4c:	8c 93       	st	X, r24
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e8       	ldi	r26, 0x80	; 128
    1e54:	bf e3       	ldi	r27, 0x3F	; 63
    1e56:	8d ab       	std	Y+53, r24	; 0x35
    1e58:	9e ab       	std	Y+54, r25	; 0x36
    1e5a:	af ab       	std	Y+55, r26	; 0x37
    1e5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e60:	7e a9       	ldd	r23, Y+54	; 0x36
    1e62:	8f a9       	ldd	r24, Y+55	; 0x37
    1e64:	98 ad       	ldd	r25, Y+56	; 0x38
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a ef       	ldi	r20, 0xFA	; 250
    1e6c:	54 e4       	ldi	r21, 0x44	; 68
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	89 ab       	std	Y+49, r24	; 0x31
    1e78:	9a ab       	std	Y+50, r25	; 0x32
    1e7a:	ab ab       	std	Y+51, r26	; 0x33
    1e7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e80:	7a a9       	ldd	r23, Y+50	; 0x32
    1e82:	8b a9       	ldd	r24, Y+51	; 0x33
    1e84:	9c a9       	ldd	r25, Y+52	; 0x34
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eba:	7e a9       	ldd	r23, Y+54	; 0x36
    1ebc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ebe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_displayCharacter+0x500>
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9e a7       	std	Y+46, r25	; 0x2e
    1ee8:	8d a7       	std	Y+45, r24	; 0x2d
    1eea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_displayCharacter+0x4ee>
    1ef2:	9e a7       	std	Y+46, r25	; 0x2e
    1ef4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	98 ab       	std	Y+48, r25	; 0x30
    1efe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f02:	98 a9       	ldd	r25, Y+48	; 0x30
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_displayCharacter+0x4e2>
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	98 ab       	std	Y+48, r25	; 0x30
    1f1c:	8f a7       	std	Y+47, r24	; 0x2f
    1f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f20:	98 a9       	ldd	r25, Y+48	; 0x30
    1f22:	9c a7       	std	Y+44, r25	; 0x2c
    1f24:	8b a7       	std	Y+43, r24	; 0x2b
    1f26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_displayCharacter+0x52a>
    1f2e:	9c a7       	std	Y+44, r25	; 0x2c
    1f30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f32:	a8 e3       	ldi	r26, 0x38	; 56
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e8 e3       	ldi	r30, 0x38	; 56
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 60       	ori	r24, 0x08	; 8
    1f3e:	8c 93       	st	X, r24
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	8f a3       	std	Y+39, r24	; 0x27
    1f4a:	98 a7       	std	Y+40, r25	; 0x28
    1f4c:	a9 a7       	std	Y+41, r26	; 0x29
    1f4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6f a1       	ldd	r22, Y+39	; 0x27
    1f52:	78 a5       	ldd	r23, Y+40	; 0x28
    1f54:	89 a5       	ldd	r24, Y+41	; 0x29
    1f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a ef       	ldi	r20, 0xFA	; 250
    1f5e:	54 e4       	ldi	r21, 0x44	; 68
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8b a3       	std	Y+35, r24	; 0x23
    1f6a:	9c a3       	std	Y+36, r25	; 0x24
    1f6c:	ad a3       	std	Y+37, r26	; 0x25
    1f6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f70:	6b a1       	ldd	r22, Y+35	; 0x23
    1f72:	7c a1       	ldd	r23, Y+36	; 0x24
    1f74:	8d a1       	ldd	r24, Y+37	; 0x25
    1f76:	9e a1       	ldd	r25, Y+38	; 0x26
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_displayCharacter+0x592>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	89 a3       	std	Y+33, r24	; 0x21
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1f92:	6b a1       	ldd	r22, Y+35	; 0x23
    1f94:	7c a1       	ldd	r23, Y+36	; 0x24
    1f96:	8d a1       	ldd	r24, Y+37	; 0x25
    1f98:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6f a1       	ldd	r22, Y+39	; 0x27
    1fac:	78 a5       	ldd	r23, Y+40	; 0x28
    1fae:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_displayCharacter+0x5f2>
    1fd4:	88 ec       	ldi	r24, 0xC8	; 200
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	98 a3       	std	Y+32, r25	; 0x20
    1fda:	8f 8f       	std	Y+31, r24	; 0x1f
    1fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fde:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_displayCharacter+0x5e0>
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fea:	9a a1       	ldd	r25, Y+34	; 0x22
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_displayCharacter+0x5d4>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	9e 8f       	std	Y+30, r25	; 0x1e
    2016:	8d 8f       	std	Y+29, r24	; 0x1d
    2018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_displayCharacter+0x61c>
    2020:	9e 8f       	std	Y+30, r25	; 0x1e
    2022:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2024:	ab e3       	ldi	r26, 0x3B	; 59
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	eb e3       	ldi	r30, 0x3B	; 59
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	98 2f       	mov	r25, r24
    2030:	90 7f       	andi	r25, 0xF0	; 240
    2032:	fe 01       	movw	r30, r28
    2034:	ed 59       	subi	r30, 0x9D	; 157
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	8f 70       	andi	r24, 0x0F	; 15
    203c:	89 2b       	or	r24, r25
    203e:	8c 93       	st	X, r24
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	89 8f       	std	Y+25, r24	; 0x19
    204a:	9a 8f       	std	Y+26, r25	; 0x1a
    204c:	ab 8f       	std	Y+27, r26	; 0x1b
    204e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	69 8d       	ldd	r22, Y+25	; 0x19
    2052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8d 8b       	std	Y+21, r24	; 0x15
    206a:	9e 8b       	std	Y+22, r25	; 0x16
    206c:	af 8b       	std	Y+23, r26	; 0x17
    206e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2070:	6d 89       	ldd	r22, Y+21	; 0x15
    2072:	7e 89       	ldd	r23, Y+22	; 0x16
    2074:	8f 89       	ldd	r24, Y+23	; 0x17
    2076:	98 8d       	ldd	r25, Y+24	; 0x18
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_displayCharacter+0x692>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	69 8d       	ldd	r22, Y+25	; 0x19
    20ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_displayCharacter+0x6f2>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
    20dc:	89 89       	ldd	r24, Y+17	; 0x11
    20de:	9a 89       	ldd	r25, Y+18	; 0x12
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_displayCharacter+0x6e0>
    20e4:	9a 8b       	std	Y+18, r25	; 0x12
    20e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_displayCharacter+0x6d4>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    2118:	8f 85       	ldd	r24, Y+15	; 0x0f
    211a:	98 89       	ldd	r25, Y+16	; 0x10
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_displayCharacter+0x71c>
    2120:	98 8b       	std	Y+16, r25	; 0x10
    2122:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	87 7f       	andi	r24, 0xF7	; 247
    2130:	8c 93       	st	X, r24
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e8       	ldi	r26, 0x80	; 128
    2138:	bf e3       	ldi	r27, 0x3F	; 63
    213a:	8b 87       	std	Y+11, r24	; 0x0b
    213c:	9c 87       	std	Y+12, r25	; 0x0c
    213e:	ad 87       	std	Y+13, r26	; 0x0d
    2140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6b 85       	ldd	r22, Y+11	; 0x0b
    2144:	7c 85       	ldd	r23, Y+12	; 0x0c
    2146:	8d 85       	ldd	r24, Y+13	; 0x0d
    2148:	9e 85       	ldd	r25, Y+14	; 0x0e
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a ef       	ldi	r20, 0xFA	; 250
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	98 87       	std	Y+8, r25	; 0x08
    215e:	a9 87       	std	Y+9, r26	; 0x09
    2160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <LCD_displayCharacter+0x784>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <LCD_displayCharacter+0x7e4>
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_displayCharacter+0x7d2>
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <LCD_displayCharacter+0x7c6>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_displayCharacter+0x80e>
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2216:	cd 59       	subi	r28, 0x9D	; 157
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <LCD_displayString+0x6>
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	0e c0       	rjmp	.+28     	; 0x225e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	80 81       	ld	r24, Z
    2254:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <LCD_displayCharacter>
		i++;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	fc 01       	movw	r30, r24
    226a:	e2 0f       	add	r30, r18
    226c:	f3 1f       	adc	r31, r19
    226e:	80 81       	ld	r24, Z
    2270:	88 23       	and	r24, r24
    2272:	39 f7       	brne	.-50     	; 0x2242 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <LCD_goToRowColumn+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <LCD_goToRowColumn+0x8>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8a 83       	std	Y+2, r24	; 0x02
    2290:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3d 83       	std	Y+5, r19	; 0x05
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	91 05       	cpc	r25, r1
    22a4:	c1 f0       	breq	.+48     	; 0x22d6 <LCD_goToRowColumn+0x56>
    22a6:	2c 81       	ldd	r18, Y+4	; 0x04
    22a8:	3d 81       	ldd	r19, Y+5	; 0x05
    22aa:	22 30       	cpi	r18, 0x02	; 2
    22ac:	31 05       	cpc	r19, r1
    22ae:	2c f4       	brge	.+10     	; 0x22ba <LCD_goToRowColumn+0x3a>
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	61 f0       	breq	.+24     	; 0x22d0 <LCD_goToRowColumn+0x50>
    22b8:	19 c0       	rjmp	.+50     	; 0x22ec <LCD_goToRowColumn+0x6c>
    22ba:	2c 81       	ldd	r18, Y+4	; 0x04
    22bc:	3d 81       	ldd	r19, Y+5	; 0x05
    22be:	22 30       	cpi	r18, 0x02	; 2
    22c0:	31 05       	cpc	r19, r1
    22c2:	69 f0       	breq	.+26     	; 0x22de <LCD_goToRowColumn+0x5e>
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	9d 81       	ldd	r25, Y+5	; 0x05
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	91 05       	cpc	r25, r1
    22cc:	61 f0       	breq	.+24     	; 0x22e6 <LCD_goToRowColumn+0x66>
    22ce:	0e c0       	rjmp	.+28     	; 0x22ec <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	0b c0       	rjmp	.+22     	; 0x22ec <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	80 5c       	subi	r24, 0xC0	; 192
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	07 c0       	rjmp	.+14     	; 0x22ec <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	80 5f       	subi	r24, 0xF0	; 240
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	80 5b       	subi	r24, 0xB0	; 176
    22ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	80 68       	ori	r24, 0x80	; 128
    22f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <LCD_displayStringRowColumn+0x6>
    230a:	00 d0       	rcall	.+0      	; 0x230c <LCD_displayStringRowColumn+0x8>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	6a 83       	std	Y+2, r22	; 0x02
    2314:	5c 83       	std	Y+4, r21	; 0x04
    2316:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	6a 81       	ldd	r22, Y+2	; 0x02
    231c:	0e 94 40 11 	call	0x2280	; 0x2280 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	0e 94 17 11 	call	0x222e	; 0x222e <LCD_displayString>
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	62 97       	sbiw	r28, 0x12	; 18
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    234e:	89 89       	ldd	r24, Y+17	; 0x11
    2350:	9a 89       	ldd	r25, Y+18	; 0x12
    2352:	9e 01       	movw	r18, r28
    2354:	2f 5f       	subi	r18, 0xFF	; 255
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	b9 01       	movw	r22, r18
    235a:	4a e0       	ldi	r20, 0x0A	; 10
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	0e 94 86 18 	call	0x310c	; 0x310c <itoa>
   LCD_displayString(buff);
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	0e 94 17 11 	call	0x222e	; 0x222e <LCD_displayString>
}
    236a:	62 96       	adiw	r28, 0x12	; 18
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_sendCommand>
}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <recievePassword>:
volatile uint8 g_timeCount = 0;        /*variable used to count time*/
volatile uint8 g_sec_Count = 0;        /*variable used to count number of seconds*/

/* FUNCTION to get password from user and check 2 password and save it*/
void recievePassword(void)
{
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	a3 97       	sbiw	r28, 0x23	; 35
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
	uint8 a_Pass[6];                    /*variable used to save password*/
	/*uint8 a_rPass[6];*/
	uint8 a_count;                      /*variable used to count received password*/

	/*MCU2 wait until MCU1 send to start*/
	while(UART_recieveByte()!= Begin);
    23a8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <recievePassword+0x18>
	/*LCD_clearScreen();
	LCD_displayString("ccccc");*/
	/*loop to save password*/
	for(a_count = 0; a_count < 5; a_count++)
    23b0:	1d 8e       	std	Y+29, r1	; 0x1d
    23b2:	97 c0       	rjmp	.+302    	; 0x24e2 <recievePassword+0x152>
	{
		/*MCU2 send to MCU1 that it be ready*/
		UART_sendByte(M2_READY);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
		/*save received password from MCU1 in array*/
		a_Pass[a_count] = UART_recieveByte();
    23ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23bc:	08 2f       	mov	r16, r24
    23be:	10 e0       	ldi	r17, 0x00	; 0
    23c0:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    23c4:	28 2f       	mov	r18, r24
    23c6:	ce 01       	movw	r24, r28
    23c8:	4e 96       	adiw	r24, 0x1e	; 30
    23ca:	fc 01       	movw	r30, r24
    23cc:	e0 0f       	add	r30, r16
    23ce:	f1 1f       	adc	r31, r17
    23d0:	20 83       	st	Z, r18
		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_Pass[a_count]);*/
		/*save received password from MCU1 in memory*/
		EEPROM_writeByte((0x0311+a_count), a_Pass[a_count]);
    23d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	8f 5e       	subi	r24, 0xEF	; 239
    23da:	9c 4f       	sbci	r25, 0xFC	; 252
    23dc:	ac 01       	movw	r20, r24
    23de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	ce 01       	movw	r24, r28
    23e6:	4e 96       	adiw	r24, 0x1e	; 30
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	20 81       	ld	r18, Z
    23f0:	ca 01       	movw	r24, r20
    23f2:	62 2f       	mov	r22, r18
    23f4:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_writeByte>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e2       	ldi	r26, 0x20	; 32
    23fe:	b1 e4       	ldi	r27, 0x41	; 65
    2400:	89 8f       	std	Y+25, r24	; 0x19
    2402:	9a 8f       	std	Y+26, r25	; 0x1a
    2404:	ab 8f       	std	Y+27, r26	; 0x1b
    2406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	69 8d       	ldd	r22, Y+25	; 0x19
    240a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a ef       	ldi	r20, 0xFA	; 250
    2416:	54 e4       	ldi	r21, 0x44	; 68
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8d 8b       	std	Y+21, r24	; 0x15
    2422:	9e 8b       	std	Y+22, r25	; 0x16
    2424:	af 8b       	std	Y+23, r26	; 0x17
    2426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <recievePassword+0xba>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <recievePassword+0x138>
	else if (__tmp > 65535)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <recievePassword+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	69 8d       	ldd	r22, Y+25	; 0x19
    2464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <recievePassword+0x11a>
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9a 8b       	std	Y+18, r25	; 0x12
    2492:	89 8b       	std	Y+17, r24	; 0x11
    2494:	89 89       	ldd	r24, Y+17	; 0x11
    2496:	9a 89       	ldd	r25, Y+18	; 0x12
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <recievePassword+0x108>
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <recievePassword+0xfc>
    24b2:	14 c0       	rjmp	.+40     	; 0x24dc <recievePassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	98 8b       	std	Y+16, r25	; 0x10
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d2:	98 89       	ldd	r25, Y+16	; 0x10
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <recievePassword+0x144>
    24d8:	98 8b       	std	Y+16, r25	; 0x10
    24da:	8f 87       	std	Y+15, r24	; 0x0f
	/*MCU2 wait until MCU1 send to start*/
	while(UART_recieveByte()!= Begin);
	/*LCD_clearScreen();
	LCD_displayString("ccccc");*/
	/*loop to save password*/
	for(a_count = 0; a_count < 5; a_count++)
    24dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	8d 8f       	std	Y+29, r24	; 0x1d
    24e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e4:	85 30       	cpi	r24, 0x05	; 5
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <recievePassword+0x15a>
    24e8:	65 cf       	rjmp	.-310    	; 0x23b4 <recievePassword+0x24>


		//LCD_displayStringRowColumn(1,a_count + 3,a_strPass[a_count]);
		_delay_ms(10);                /*Wait for 10ms to write the value in the memory*/
	}
	UART_sendByte(End);
    24ea:	84 e0       	ldi	r24, 0x04	; 4
    24ec:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
	/*save flag in memory address to know if code used one before or nor*/
	EEPROM_writeByte(0x0420, INIT_FLAG);
    24f0:	80 e2       	ldi	r24, 0x20	; 32
    24f2:	94 e0       	ldi	r25, 0x04	; 4
    24f4:	6a e0       	ldi	r22, 0x0A	; 10
    24f6:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_writeByte>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a0 e2       	ldi	r26, 0x20	; 32
    2500:	b1 e4       	ldi	r27, 0x41	; 65
    2502:	8b 87       	std	Y+11, r24	; 0x0b
    2504:	9c 87       	std	Y+12, r25	; 0x0c
    2506:	ad 87       	std	Y+13, r26	; 0x0d
    2508:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	6b 85       	ldd	r22, Y+11	; 0x0b
    250c:	7c 85       	ldd	r23, Y+12	; 0x0c
    250e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2510:	9e 85       	ldd	r25, Y+14	; 0x0e
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8f 83       	std	Y+7, r24	; 0x07
    2524:	98 87       	std	Y+8, r25	; 0x08
    2526:	a9 87       	std	Y+9, r26	; 0x09
    2528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252a:	6f 81       	ldd	r22, Y+7	; 0x07
    252c:	78 85       	ldd	r23, Y+8	; 0x08
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <recievePassword+0x1bc>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <recievePassword+0x23a>
	else if (__tmp > 65535)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <recievePassword+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <recievePassword+0x21c>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <recievePassword+0x20a>
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <recievePassword+0x1fe>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <recievePassword+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <recievePassword+0x246>
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);/*Wait for 10ms to write the value in the memory*/
}
    25de:	a3 96       	adiw	r28, 0x23	; 35
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	08 95       	ret

000025f4 <changePass>:
/* FUNCTION to ask user if he want to chande password or open the door*/
void changePass(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	uint8 a_key;
	/*call compare password to check if entered password is correct or not*/
	comparePass();
    25fe:	0e 94 23 13 	call	0x2646	; 0x2646 <comparePass>
	/*if error counter equal 0 */
	g_error_flag = UART_recieveByte();
    2602:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2606:	80 93 78 00 	sts	0x0078, r24

	if(g_error_flag == 0)
    260a:	80 91 78 00 	lds	r24, 0x0078
    260e:	88 23       	and	r24, r24
    2610:	79 f4       	brne	.+30     	; 0x2630 <changePass+0x3c>
	{
		/*LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"IN");*/

		a_key = UART_recieveByte();
    2612:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2616:	89 83       	std	Y+1, r24	; 0x01
		/*LCD_intgerToString(a_key);*/
		/*if received key is + go to receive new password*/
		if(a_key == 13)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	8d 30       	cpi	r24, 0x0D	; 13
    261c:	19 f4       	brne	.+6      	; 0x2624 <changePass+0x30>
		{
			/*LCD_displayStringRowColumn(0,3,"open");*/
			/*if received key is - go to open door*/
			OpenDoor();
    261e:	0e 94 c3 13 	call	0x2786	; 0x2786 <OpenDoor>
    2622:	0d c0       	rjmp	.+26     	; 0x263e <changePass+0x4a>

		}
		else if (a_key == 11)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8b 30       	cpi	r24, 0x0B	; 11
    2628:	51 f4       	brne	.+20     	; 0x263e <changePass+0x4a>
		{
			/*if received key is + go to receive new password*/
			recievePassword();
    262a:	0e 94 c8 11 	call	0x2390	; 0x2390 <recievePassword>
    262e:	07 c0       	rjmp	.+14     	; 0x263e <changePass+0x4a>
		/*LCD_displayStringRowColumn(1,0,"out");*/
	}
	else
	{
		/*close led*/
		CLEAR_BIT(PORTD,PD2);
    2630:	a2 e3       	ldi	r26, 0x32	; 50
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e2 e3       	ldi	r30, 0x32	; 50
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	8b 7f       	andi	r24, 0xFB	; 251
    263c:	8c 93       	st	X, r24
	}
}
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <comparePass>:
/* FUNCTION used to compare 2 password one that user entered and anther that we saved before */
void comparePass(void)
{
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	2e 97       	sbiw	r28, 0x0e	; 14
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                          LOCAL VARIABLE                                  *
	 *******************************************************************************/
	uint8 a_savedPass[6];           /*array has saved password in memory*/
	uint8 a_Pass[6];                /*array has saved password from user*/
	uint8 a_count = 0;               /*variable used to count received password*/
    265e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 a_errCount = 0;           /*variable used to count how many user enter password wrong*/
    2660:	19 82       	std	Y+1, r1	; 0x01
	/*MCU2 wait until MCU1 send to compPass*/
	while(UART_recieveByte()!= compPass);
    2662:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2666:	85 30       	cpi	r24, 0x05	; 5
    2668:	e1 f7       	brne	.-8      	; 0x2662 <comparePass+0x1c>
	/*loop to receive password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    266a:	1a 82       	std	Y+2, r1	; 0x02
    266c:	12 c0       	rjmp	.+36     	; 0x2692 <comparePass+0x4c>
	{
		/*MCU2 send to MCU1 that it be ready*/
		UART_sendByte(M2_comREADY);
    266e:	88 e0       	ldi	r24, 0x08	; 8
    2670:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
		/*saved received password in array*/
		a_Pass[a_count] = UART_recieveByte();
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	08 2f       	mov	r16, r24
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    267e:	28 2f       	mov	r18, r24
    2680:	ce 01       	movw	r24, r28
    2682:	09 96       	adiw	r24, 0x09	; 9
    2684:	fc 01       	movw	r30, r24
    2686:	e0 0f       	add	r30, r16
    2688:	f1 1f       	adc	r31, r17
    268a:	20 83       	st	Z, r18
	uint8 a_count = 0;               /*variable used to count received password*/
	uint8 a_errCount = 0;           /*variable used to count how many user enter password wrong*/
	/*MCU2 wait until MCU1 send to compPass*/
	while(UART_recieveByte()!= compPass);
	/*loop to receive password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	8a 83       	std	Y+2, r24	; 0x02
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	85 30       	cpi	r24, 0x05	; 5
    2696:	58 f3       	brcs	.-42     	; 0x266e <comparePass+0x28>
		a_Pass[a_count] = UART_recieveByte();
		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_Pass[a_count]);*/
	}
	/*loop to get saved password from memory password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    2698:	1a 82       	std	Y+2, r1	; 0x02
    269a:	15 c0       	rjmp	.+42     	; 0x26c6 <comparePass+0x80>
	{
		EEPROM_readByte((0x0311+a_count), &a_savedPass[a_count]);
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	8f 5e       	subi	r24, 0xEF	; 239
    26a4:	9c 4f       	sbci	r25, 0xFC	; 252
    26a6:	ac 01       	movw	r20, r24
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9e 01       	movw	r18, r28
    26b0:	2d 5f       	subi	r18, 0xFD	; 253
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	28 0f       	add	r18, r24
    26b6:	39 1f       	adc	r19, r25
    26b8:	ca 01       	movw	r24, r20
    26ba:	b9 01       	movw	r22, r18
    26bc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <EEPROM_readByte>
		a_Pass[a_count] = UART_recieveByte();
		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_Pass[a_count]);*/
	}
	/*loop to get saved password from memory password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	85 30       	cpi	r24, 0x05	; 5
    26ca:	40 f3       	brcs	.-48     	; 0x269c <comparePass+0x56>
	{
		EEPROM_readByte((0x0311+a_count), &a_savedPass[a_count]);
	}
	/*loop to compare passwords*/
	for(a_count = 0; a_count < 5; a_count++)
    26cc:	1a 82       	std	Y+2, r1	; 0x02
    26ce:	1b c0       	rjmp	.+54     	; 0x2706 <comparePass+0xc0>
	{
		if(a_Pass[a_count] != a_savedPass[a_count])
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	ce 01       	movw	r24, r28
    26d8:	09 96       	adiw	r24, 0x09	; 9
    26da:	fc 01       	movw	r30, r24
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	40 81       	ld	r20, Z
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	ce 01       	movw	r24, r28
    26ea:	03 96       	adiw	r24, 0x03	; 3
    26ec:	fc 01       	movw	r30, r24
    26ee:	e2 0f       	add	r30, r18
    26f0:	f3 1f       	adc	r31, r19
    26f2:	80 81       	ld	r24, Z
    26f4:	48 17       	cp	r20, r24
    26f6:	21 f0       	breq	.+8      	; 0x2700 <comparePass+0xba>
		{
			/*if any number in password was wrong put 1 in flag*/
			g_flag = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 76 00 	sts	0x0076, r24
    26fe:	06 c0       	rjmp	.+12     	; 0x270c <comparePass+0xc6>
	for(a_count = 0; a_count < 5; a_count++)
	{
		EEPROM_readByte((0x0311+a_count), &a_savedPass[a_count]);
	}
	/*loop to compare passwords*/
	for(a_count = 0; a_count < 5; a_count++)
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	85 30       	cpi	r24, 0x05	; 5
    270a:	10 f3       	brcs	.-60     	; 0x26d0 <comparePass+0x8a>
			/*LCD_clearScreen();
			LCD_displayStringRowColumn(0,3,"wrong");*/
			break;
		}
	}
	if(g_flag == 1)
    270c:	80 91 76 00 	lds	r24, 0x0076
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	31 f4       	brne	.+12     	; 0x2720 <comparePass+0xda>
	{
		/*MCU2 send wrong to MCU1 in case password was wrong*/
		UART_sendByte(wrong);
    2714:	86 e0       	ldi	r24, 0x06	; 6
    2716:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
		g_flag = 0;
    271a:	10 92 76 00 	sts	0x0076, r1
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <comparePass+0xe0>
	}
	else
	{
		/*MCU2 send correct to MCU1 in case password was correct*/
		UART_sendByte(correct);
    2720:	87 e0       	ldi	r24, 0x07	; 7
    2722:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
	}
	/*MCU2 wait until MCU1 send to error counter*/
	a_errCount = UART_recieveByte();
    2726:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    272a:	89 83       	std	Y+1, r24	; 0x01
	g_errCount = a_errCount;
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	80 93 77 00 	sts	0x0077, r24

	if(a_errCount < 3 && a_errCount>0)
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	30 f4       	brcc	.+12     	; 0x2744 <comparePass+0xfe>
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	88 23       	and	r24, r24
    273c:	19 f0       	breq	.+6      	; 0x2744 <comparePass+0xfe>
	{
		/*if error counter not equal 3 and 0 go to compare function to take password again*/
		comparePass();
    273e:	0e 94 23 13 	call	0x2646	; 0x2646 <comparePass>
    2742:	16 c0       	rjmp	.+44     	; 0x2770 <comparePass+0x12a>
	}
	else if (a_errCount == 3)
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	83 30       	cpi	r24, 0x03	; 3
    2748:	99 f4       	brne	.+38     	; 0x2770 <comparePass+0x12a>
	{
		/*if error counter equal 3 open led*/
		g_timeCount = 0;
    274a:	10 92 79 00 	sts	0x0079, r1
		g_sec_Count = 0;
    274e:	10 92 7a 00 	sts	0x007A, r1
		Timer_start();
    2752:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Timer_start>
		SET_BIT(PORTD,PD2);
    2756:	a2 e3       	ldi	r26, 0x32	; 50
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e2 e3       	ldi	r30, 0x32	; 50
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	84 60       	ori	r24, 0x04	; 4
    2762:	8c 93       	st	X, r24
		while (g_sec_Count != 60) /*As long as it hasn't passed 1 minute,display on LCD this massage*/
    2764:	80 91 7a 00 	lds	r24, 0x007A
    2768:	8c 33       	cpi	r24, 0x3C	; 60
    276a:	e1 f7       	brne	.-8      	; 0x2764 <comparePass+0x11e>
		{

		}
		Timer_stop();
    276c:	0e 94 56 16 	call	0x2cac	; 0x2cac <Timer_stop>
	}
}
    2770:	2e 96       	adiw	r28, 0x0e	; 14
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	08 95       	ret

00002786 <OpenDoor>:
/*FUNCTION used to open door*/
void OpenDoor (void)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	/*wait until MCU1 send Open to MCU2*/
	while(UART_recieveByte()!= Open);
    278e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2792:	89 30       	cpi	r24, 0x09	; 9
    2794:	e1 f7       	brne	.-8      	; 0x278e <OpenDoor+0x8>
	/*make motor move as clock wise to open door*/
	g_timeCount = 0;
    2796:	10 92 79 00 	sts	0x0079, r1
	g_sec_Count = 0;
    279a:	10 92 7a 00 	sts	0x007A, r1
	Timer_start();
    279e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Timer_start>
	PORTC &= (~(1<<PC2));
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8b 7f       	andi	r24, 0xFB	; 251
    27ae:	8c 93       	st	X, r24
	PORTC |= (1<<PC3);
    27b0:	a5 e3       	ldi	r26, 0x35	; 53
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e5 e3       	ldi	r30, 0x35	; 53
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	88 60       	ori	r24, 0x08	; 8
    27bc:	8c 93       	st	X, r24
	while(g_sec_Count != 3)
    27be:	80 91 7a 00 	lds	r24, 0x007A
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	e1 f7       	brne	.-8      	; 0x27be <OpenDoor+0x38>
	{

	}
	Timer_stop();
    27c6:	0e 94 56 16 	call	0x2cac	; 0x2cac <Timer_stop>
	/*make motor move as anti clock wise to close door*/
	g_timeCount = 0;
    27ca:	10 92 79 00 	sts	0x0079, r1
	g_sec_Count = 0;
    27ce:	10 92 7a 00 	sts	0x007A, r1
	Timer_start();
    27d2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Timer_start>
	PORTC &= (~(1<<PC3));
    27d6:	a5 e3       	ldi	r26, 0x35	; 53
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e5 e3       	ldi	r30, 0x35	; 53
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	87 7f       	andi	r24, 0xF7	; 247
    27e2:	8c 93       	st	X, r24
	PORTC |= (1<<PC2);
    27e4:	a5 e3       	ldi	r26, 0x35	; 53
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e5 e3       	ldi	r30, 0x35	; 53
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	84 60       	ori	r24, 0x04	; 4
    27f0:	8c 93       	st	X, r24
	while(g_sec_Count != 3)
    27f2:	80 91 7a 00 	lds	r24, 0x007A
    27f6:	83 30       	cpi	r24, 0x03	; 3
    27f8:	e1 f7       	brne	.-8      	; 0x27f2 <OpenDoor+0x6c>
	{

	}
	Timer_stop();
    27fa:	0e 94 56 16 	call	0x2cac	; 0x2cac <Timer_stop>

	//Then stop the Door
	CLEAR_BIT(PORTC,PC2);
    27fe:	a5 e3       	ldi	r26, 0x35	; 53
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e3       	ldi	r30, 0x35	; 53
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	8b 7f       	andi	r24, 0xFB	; 251
    280a:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC,PC3);
    280c:	a5 e3       	ldi	r26, 0x35	; 53
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e5 e3       	ldi	r30, 0x35	; 53
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	87 7f       	andi	r24, 0xF7	; 247
    2818:	8c 93       	st	X, r24

}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <Calc_time>:
/*FUNCTION to calculate number of seconds*/
void Calc_time(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	/*increase time counter by one*/
	g_timeCount++;
    2828:	80 91 79 00 	lds	r24, 0x0079
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	80 93 79 00 	sts	0x0079, r24

	if(g_timeCount == 30)
    2832:	80 91 79 00 	lds	r24, 0x0079
    2836:	8e 31       	cpi	r24, 0x1E	; 30
    2838:	39 f4       	brne	.+14     	; 0x2848 <Calc_time+0x28>
	{
		g_timeCount = 0;
    283a:	10 92 79 00 	sts	0x0079, r1
		/*increase seconds counter by one*/
		g_sec_Count ++;
    283e:	80 91 7a 00 	lds	r24, 0x007A
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 7a 00 	sts	0x007A, r24
	}
}
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <__vector_9>:
/*********************************************************************************************************************
 *                                                Interrupt Service Routines                                         *
 *********************************************************************************************************************/

ISR(TIMER0_OVF_vect)
{
    284e:	1f 92       	push	r1
    2850:	0f 92       	push	r0
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	0f 92       	push	r0
    2856:	11 24       	eor	r1, r1
    2858:	2f 93       	push	r18
    285a:	3f 93       	push	r19
    285c:	4f 93       	push	r20
    285e:	5f 93       	push	r21
    2860:	6f 93       	push	r22
    2862:	7f 93       	push	r23
    2864:	8f 93       	push	r24
    2866:	9f 93       	push	r25
    2868:	af 93       	push	r26
    286a:	bf 93       	push	r27
    286c:	ef 93       	push	r30
    286e:	ff 93       	push	r31
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
	if(g_t0_ovf_callBackPtr != NULL_PTR)
    2878:	80 91 7b 00 	lds	r24, 0x007B
    287c:	90 91 7c 00 	lds	r25, 0x007C
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	29 f0       	breq	.+10     	; 0x288e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t0_ovf_callBackPtr)();
    2884:	e0 91 7b 00 	lds	r30, 0x007B
    2888:	f0 91 7c 00 	lds	r31, 0x007C
    288c:	09 95       	icall
		/* another method to call the function using pointer to function t0_ovf_callBackPtr(); */
	}
}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	ff 91       	pop	r31
    2894:	ef 91       	pop	r30
    2896:	bf 91       	pop	r27
    2898:	af 91       	pop	r26
    289a:	9f 91       	pop	r25
    289c:	8f 91       	pop	r24
    289e:	7f 91       	pop	r23
    28a0:	6f 91       	pop	r22
    28a2:	5f 91       	pop	r21
    28a4:	4f 91       	pop	r20
    28a6:	3f 91       	pop	r19
    28a8:	2f 91       	pop	r18
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	0f 90       	pop	r0
    28b0:	1f 90       	pop	r1
    28b2:	18 95       	reti

000028b4 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	2f 93       	push	r18
    28c0:	3f 93       	push	r19
    28c2:	4f 93       	push	r20
    28c4:	5f 93       	push	r21
    28c6:	6f 93       	push	r22
    28c8:	7f 93       	push	r23
    28ca:	8f 93       	push	r24
    28cc:	9f 93       	push	r25
    28ce:	af 93       	push	r26
    28d0:	bf 93       	push	r27
    28d2:	ef 93       	push	r30
    28d4:	ff 93       	push	r31
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
	if(g_t0_ctc_callBackPtr != NULL_PTR)
    28de:	80 91 7d 00 	lds	r24, 0x007D
    28e2:	90 91 7e 00 	lds	r25, 0x007E
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	29 f0       	breq	.+10     	; 0x28f4 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t0_ctc_callBackPtr)();
    28ea:	e0 91 7d 00 	lds	r30, 0x007D
    28ee:	f0 91 7e 00 	lds	r31, 0x007E
    28f2:	09 95       	icall
		/* another method to call the function using pointer to function t0_ctc_callBackPtr(); */
	}
}
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	ff 91       	pop	r31
    28fa:	ef 91       	pop	r30
    28fc:	bf 91       	pop	r27
    28fe:	af 91       	pop	r26
    2900:	9f 91       	pop	r25
    2902:	8f 91       	pop	r24
    2904:	7f 91       	pop	r23
    2906:	6f 91       	pop	r22
    2908:	5f 91       	pop	r21
    290a:	4f 91       	pop	r20
    290c:	3f 91       	pop	r19
    290e:	2f 91       	pop	r18
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	0f 90       	pop	r0
    2916:	1f 90       	pop	r1
    2918:	18 95       	reti

0000291a <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    291a:	1f 92       	push	r1
    291c:	0f 92       	push	r0
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	0f 92       	push	r0
    2922:	11 24       	eor	r1, r1
    2924:	2f 93       	push	r18
    2926:	3f 93       	push	r19
    2928:	4f 93       	push	r20
    292a:	5f 93       	push	r21
    292c:	6f 93       	push	r22
    292e:	7f 93       	push	r23
    2930:	8f 93       	push	r24
    2932:	9f 93       	push	r25
    2934:	af 93       	push	r26
    2936:	bf 93       	push	r27
    2938:	ef 93       	push	r30
    293a:	ff 93       	push	r31
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	if(g_t1_ovf_callBackPtr != NULL_PTR)
    2944:	80 91 7f 00 	lds	r24, 0x007F
    2948:	90 91 80 00 	lds	r25, 0x0080
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	29 f0       	breq	.+10     	; 0x295a <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t1_ovf_callBackPtr)();
    2950:	e0 91 7f 00 	lds	r30, 0x007F
    2954:	f0 91 80 00 	lds	r31, 0x0080
    2958:	09 95       	icall
		/* another method to call the function using pointer to function t1_ovf_callBackPtr(); */
	}
}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	bf 91       	pop	r27
    2964:	af 91       	pop	r26
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	7f 91       	pop	r23
    296c:	6f 91       	pop	r22
    296e:	5f 91       	pop	r21
    2970:	4f 91       	pop	r20
    2972:	3f 91       	pop	r19
    2974:	2f 91       	pop	r18
    2976:	0f 90       	pop	r0
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	0f 90       	pop	r0
    297c:	1f 90       	pop	r1
    297e:	18 95       	reti

00002980 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2980:	1f 92       	push	r1
    2982:	0f 92       	push	r0
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	0f 92       	push	r0
    2988:	11 24       	eor	r1, r1
    298a:	2f 93       	push	r18
    298c:	3f 93       	push	r19
    298e:	4f 93       	push	r20
    2990:	5f 93       	push	r21
    2992:	6f 93       	push	r22
    2994:	7f 93       	push	r23
    2996:	8f 93       	push	r24
    2998:	9f 93       	push	r25
    299a:	af 93       	push	r26
    299c:	bf 93       	push	r27
    299e:	ef 93       	push	r30
    29a0:	ff 93       	push	r31
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	if(g_t1_ctc_callBackPtr != NULL_PTR)
    29aa:	80 91 81 00 	lds	r24, 0x0081
    29ae:	90 91 82 00 	lds	r25, 0x0082
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	29 f0       	breq	.+10     	; 0x29c0 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t1_ctc_callBackPtr)();
    29b6:	e0 91 81 00 	lds	r30, 0x0081
    29ba:	f0 91 82 00 	lds	r31, 0x0082
    29be:	09 95       	icall
		/* another method to call the function using pointer to function t1_ctc_callBackPtr(); */
	}
}
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	ff 91       	pop	r31
    29c6:	ef 91       	pop	r30
    29c8:	bf 91       	pop	r27
    29ca:	af 91       	pop	r26
    29cc:	9f 91       	pop	r25
    29ce:	8f 91       	pop	r24
    29d0:	7f 91       	pop	r23
    29d2:	6f 91       	pop	r22
    29d4:	5f 91       	pop	r21
    29d6:	4f 91       	pop	r20
    29d8:	3f 91       	pop	r19
    29da:	2f 91       	pop	r18
    29dc:	0f 90       	pop	r0
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	0f 90       	pop	r0
    29e2:	1f 90       	pop	r1
    29e4:	18 95       	reti

000029e6 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	if(g_t2_ovf_callBackPtr != NULL_PTR)
    2a10:	80 91 83 00 	lds	r24, 0x0083
    2a14:	90 91 84 00 	lds	r25, 0x0084
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t2_ovf_callBackPtr)();
    2a1c:	e0 91 83 00 	lds	r30, 0x0083
    2a20:	f0 91 84 00 	lds	r31, 0x0084
    2a24:	09 95       	icall
		/* another method to call the function using pointer to function t2_ovf_callBackPtr(); */
	}
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2a4c:	1f 92       	push	r1
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	0f 92       	push	r0
    2a54:	11 24       	eor	r1, r1
    2a56:	2f 93       	push	r18
    2a58:	3f 93       	push	r19
    2a5a:	4f 93       	push	r20
    2a5c:	5f 93       	push	r21
    2a5e:	6f 93       	push	r22
    2a60:	7f 93       	push	r23
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	af 93       	push	r26
    2a68:	bf 93       	push	r27
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	if(g_t2_ctc_callBackPtr != NULL_PTR)
    2a76:	80 91 85 00 	lds	r24, 0x0085
    2a7a:	90 91 86 00 	lds	r25, 0x0086
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <__vector_3+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t2_ctc_callBackPtr)();
    2a82:	e0 91 85 00 	lds	r30, 0x0085
    2a86:	f0 91 86 00 	lds	r31, 0x0086
    2a8a:	09 95       	icall
		/* another method to call the function using pointer to function t2_ctc_callBackPtr(); */
	}
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	ff 91       	pop	r31
    2a92:	ef 91       	pop	r30
    2a94:	bf 91       	pop	r27
    2a96:	af 91       	pop	r26
    2a98:	9f 91       	pop	r25
    2a9a:	8f 91       	pop	r24
    2a9c:	7f 91       	pop	r23
    2a9e:	6f 91       	pop	r22
    2aa0:	5f 91       	pop	r21
    2aa2:	4f 91       	pop	r20
    2aa4:	3f 91       	pop	r19
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0f 90       	pop	r0
    2aae:	1f 90       	pop	r1
    2ab0:	18 95       	reti

00002ab2 <Timer_init>:
 * Function that initialize the timer
 * Given timer and the mode, it initiate the registers
 * the initial value and the compare value
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <Timer_init+0x6>
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01

	if(Config_Ptr->type  == TIMER0)
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 23       	and	r24, r24
    2ac8:	e1 f5       	brne	.+120    	; 0x2b42 <Timer_init+0x90>
	{
		TCNT0 = Config_Ptr->s_init; /*Put the initial value in TCNT0*/
    2aca:	a2 e5       	ldi	r26, 0x52	; 82
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad2:	83 81       	ldd	r24, Z+3	; 0x03
    2ad4:	94 81       	ldd	r25, Z+4	; 0x04
    2ad6:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0); /*Non PWM mode FOC0=1*/
    2ad8:	e3 e5       	ldi	r30, 0x53	; 83
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 e8       	ldi	r24, 0x80	; 128
    2ade:	80 83       	st	Z, r24
		TCCR0 = (TCCR0 & 0xF8) | (prescalar);
    2ae0:	a3 e5       	ldi	r26, 0x53	; 83
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e3 e5       	ldi	r30, 0x53	; 83
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	98 2f       	mov	r25, r24
    2aec:	98 7f       	andi	r25, 0xF8	; 248
    2aee:	80 91 87 00 	lds	r24, 0x0087
    2af2:	89 2b       	or	r24, r25
    2af4:	8c 93       	st	X, r24

		if(Config_Ptr->mode == OVERFLOW)
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	81 81       	ldd	r24, Z+1	; 0x01
    2afc:	88 23       	and	r24, r24
    2afe:	41 f4       	brne	.+16     	; 0x2b10 <Timer_init+0x5e>
		{
			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2b00:	a9 e5       	ldi	r26, 0x59	; 89
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e9 e5       	ldi	r30, 0x59	; 89
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	81 60       	ori	r24, 0x01	; 1
    2b0c:	8c 93       	st	X, r24
    2b0e:	95 c0       	rjmp	.+298    	; 0x2c3a <Timer_init+0x188>
			/* Configure the timer control register
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
		}
		else if(Config_Ptr->mode == COMPARE)
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	81 81       	ldd	r24, Z+1	; 0x01
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <Timer_init+0x6a>
    2b1a:	8f c0       	rjmp	.+286    	; 0x2c3a <Timer_init+0x188>
		{
			OCR0  = Config_Ptr->s_compare; /* Set Compare Value*/
    2b1c:	ac e5       	ldi	r26, 0x5C	; 92
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e9 81       	ldd	r30, Y+1	; 0x01
    2b22:	fa 81       	ldd	r31, Y+2	; 0x02
    2b24:	85 81       	ldd	r24, Z+5	; 0x05
    2b26:	96 81       	ldd	r25, Z+6	; 0x06
    2b28:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2b2a:	a9 e5       	ldi	r26, 0x59	; 89
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e9 e5       	ldi	r30, 0x59	; 89
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	82 60       	ori	r24, 0x02	; 2
    2b36:	8c 93       	st	X, r24
			/* Configure timer0 control register
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 */
			TCCR0 = (1<<WGM01);
    2b38:	e3 e5       	ldi	r30, 0x53	; 83
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	88 e0       	ldi	r24, 0x08	; 8
    2b3e:	80 83       	st	Z, r24
    2b40:	7c c0       	rjmp	.+248    	; 0x2c3a <Timer_init+0x188>
		}
	}
	else if(Config_Ptr->type  == TIMER1)
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	80 81       	ld	r24, Z
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	d1 f5       	brne	.+116    	; 0x2bc0 <Timer_init+0x10e>
	{
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2b4c:	ef e4       	ldi	r30, 0x4F	; 79
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	8c e0       	ldi	r24, 0x0C	; 12
    2b52:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B & 0xF8) | (prescalar); /*Put the prescalar in the first 3-bits*/
    2b54:	ae e4       	ldi	r26, 0x4E	; 78
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	ee e4       	ldi	r30, 0x4E	; 78
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	98 2f       	mov	r25, r24
    2b60:	98 7f       	andi	r25, 0xF8	; 248
    2b62:	80 91 87 00 	lds	r24, 0x0087
    2b66:	89 2b       	or	r24, r25
    2b68:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->s_init;
    2b6a:	ac e4       	ldi	r26, 0x4C	; 76
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b70:	fa 81       	ldd	r31, Y+2	; 0x02
    2b72:	83 81       	ldd	r24, Z+3	; 0x03
    2b74:	94 81       	ldd	r25, Z+4	; 0x04
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	9c 93       	st	X, r25
    2b7a:	8e 93       	st	-X, r24
		if(Config_Ptr->mode == OVERFLOW)
    2b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b80:	81 81       	ldd	r24, Z+1	; 0x01
    2b82:	88 23       	and	r24, r24
    2b84:	29 f4       	brne	.+10     	; 0x2b90 <Timer_init+0xde>
		{
			TIMSK = (1<<TOIE1); /*TOIE1=1: Enable overflow interrupt*/
    2b86:	e9 e5       	ldi	r30, 0x59	; 89
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	80 83       	st	Z, r24
    2b8e:	55 c0       	rjmp	.+170    	; 0x2c3a <Timer_init+0x188>
		}
		else if(Config_Ptr->mode == COMPARE)
    2b90:	e9 81       	ldd	r30, Y+1	; 0x01
    2b92:	fa 81       	ldd	r31, Y+2	; 0x02
    2b94:	81 81       	ldd	r24, Z+1	; 0x01
    2b96:	81 30       	cpi	r24, 0x01	; 1
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <Timer_init+0xea>
    2b9a:	4f c0       	rjmp	.+158    	; 0x2c3a <Timer_init+0x188>
		{
			TCCR1B = (1<<WGM12); /*WGM12=1: Compare mode (Mode 12)*/
    2b9c:	ee e4       	ldi	r30, 0x4E	; 78
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	88 e0       	ldi	r24, 0x08	; 8
    2ba2:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->s_compare; /* compare value in OCR1A mode 4*/
    2ba4:	aa e4       	ldi	r26, 0x4A	; 74
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	85 81       	ldd	r24, Z+5	; 0x05
    2bae:	96 81       	ldd	r25, Z+6	; 0x06
    2bb0:	11 96       	adiw	r26, 0x01	; 1
    2bb2:	9c 93       	st	X, r25
    2bb4:	8e 93       	st	-X, r24
			TIMSK = (1<<OCIE1A); /*OCIE1A=1: Enable output compare A match interrupt*/
    2bb6:	e9 e5       	ldi	r30, 0x59	; 89
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 e1       	ldi	r24, 0x10	; 16
    2bbc:	80 83       	st	Z, r24
    2bbe:	3d c0       	rjmp	.+122    	; 0x2c3a <Timer_init+0x188>
		}
	}
	else if(Config_Ptr->type  == TIMER2)
    2bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc4:	80 81       	ld	r24, Z
    2bc6:	82 30       	cpi	r24, 0x02	; 2
    2bc8:	c1 f5       	brne	.+112    	; 0x2c3a <Timer_init+0x188>
	{
		TCCR2= (1<<FOC2);
    2bca:	e5 e4       	ldi	r30, 0x45	; 69
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 e8       	ldi	r24, 0x80	; 128
    2bd0:	80 83       	st	Z, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescalar);
    2bd2:	a5 e4       	ldi	r26, 0x45	; 69
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e5 e4       	ldi	r30, 0x45	; 69
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	98 2f       	mov	r25, r24
    2bde:	98 7f       	andi	r25, 0xF8	; 248
    2be0:	e9 81       	ldd	r30, Y+1	; 0x01
    2be2:	fa 81       	ldd	r31, Y+2	; 0x02
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	89 2b       	or	r24, r25
    2be8:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->s_init;
    2bea:	a4 e4       	ldi	r26, 0x44	; 68
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	83 81       	ldd	r24, Z+3	; 0x03
    2bf4:	94 81       	ldd	r25, Z+4	; 0x04
    2bf6:	8c 93       	st	X, r24
		if(Config_Ptr->mode == OVERFLOW)
    2bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfc:	81 81       	ldd	r24, Z+1	; 0x01
    2bfe:	88 23       	and	r24, r24
    2c00:	29 f4       	brne	.+10     	; 0x2c0c <Timer_init+0x15a>
		{
			TIMSK = (1<<TOIE2); /*TOIE1=2: Enable overflow interrupt*/
    2c02:	e9 e5       	ldi	r30, 0x59	; 89
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 e4       	ldi	r24, 0x40	; 64
    2c08:	80 83       	st	Z, r24
    2c0a:	17 c0       	rjmp	.+46     	; 0x2c3a <Timer_init+0x188>
		}
		else if(Config_Ptr->mode == COMPARE)
    2c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c10:	81 81       	ldd	r24, Z+1	; 0x01
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	91 f4       	brne	.+36     	; 0x2c3a <Timer_init+0x188>
		{
			TCCR2 |= (1<<WGM21);
    2c16:	a5 e4       	ldi	r26, 0x45	; 69
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e5 e4       	ldi	r30, 0x45	; 69
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 60       	ori	r24, 0x08	; 8
    2c22:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->s_compare;
    2c24:	a3 e4       	ldi	r26, 0x43	; 67
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	85 81       	ldd	r24, Z+5	; 0x05
    2c2e:	96 81       	ldd	r25, Z+6	; 0x06
    2c30:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE2);
    2c32:	e9 e5       	ldi	r30, 0x59	; 89
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 e8       	ldi	r24, 0x80	; 128
    2c38:	80 83       	st	Z, r24
		}
	}


	if((Config_Ptr->prescalar) == NO_CLOCK)
    2c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	88 23       	and	r24, r24
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <Timer_init+0x198>
	{
		prescalar = 0;/*If it is NO_CLOCK , it should be 0*/
    2c44:	10 92 87 00 	sts	0x0087, r1
    2c48:	2c c0       	rjmp	.+88     	; 0x2ca2 <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_CLOCK)
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	88 23       	and	r24, r24
    2c52:	21 f4       	brne	.+8      	; 0x2c5c <Timer_init+0x1aa>
	{
		prescalar = 1;/*If it is F_CPU_CLOCK , it should be 1*/
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	80 93 87 00 	sts	0x0087, r24
    2c5a:	23 c0       	rjmp	.+70     	; 0x2ca2 <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPUt_8)
    2c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	21 f4       	brne	.+8      	; 0x2c6e <Timer_init+0x1bc>
	{
		prescalar = 2;/*If it is F_CPUt_8, it should be 2*/
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	80 93 87 00 	sts	0x0087, r24
    2c6c:	1a c0       	rjmp	.+52     	; 0x2ca2 <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPUt_64)
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	84 30       	cpi	r24, 0x04	; 4
    2c76:	21 f4       	brne	.+8      	; 0x2c80 <Timer_init+0x1ce>
	{
		prescalar = 3;/*If it is F_CPUt_8, it should be 3*/
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	80 93 87 00 	sts	0x0087, r24
    2c7e:	11 c0       	rjmp	.+34     	; 0x2ca2 <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPUt_256)
    2c80:	e9 81       	ldd	r30, Y+1	; 0x01
    2c82:	fa 81       	ldd	r31, Y+2	; 0x02
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	86 30       	cpi	r24, 0x06	; 6
    2c88:	21 f4       	brne	.+8      	; 0x2c92 <Timer_init+0x1e0>
	{
		prescalar = 4;/*If it is F_CPUt_256 , it should be 4*/
    2c8a:	84 e0       	ldi	r24, 0x04	; 4
    2c8c:	80 93 87 00 	sts	0x0087, r24
    2c90:	08 c0       	rjmp	.+16     	; 0x2ca2 <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPUt_1024)
    2c92:	e9 81       	ldd	r30, Y+1	; 0x01
    2c94:	fa 81       	ldd	r31, Y+2	; 0x02
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	87 30       	cpi	r24, 0x07	; 7
    2c9a:	19 f4       	brne	.+6      	; 0x2ca2 <Timer_init+0x1f0>
	{
		prescalar = 5;/*If it is F_CPUt_1024, it should be 5*/
    2c9c:	85 e0       	ldi	r24, 0x05	; 5
    2c9e:	80 93 87 00 	sts	0x0087, r24
	}
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <Timer_stop>:
/*Function to stop timer*/
void Timer_stop(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0);
    2cb4:	a3 e5       	ldi	r26, 0x53	; 83
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e3 e5       	ldi	r30, 0x53	; 83
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	88 7f       	andi	r24, 0xF8	; 248
    2cc0:	8c 93       	st	X, r24
}
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <Timer_start>:
/*Function to start timer*/
void Timer_start(void)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    2cd0:	e2 e5       	ldi	r30, 0x52	; 82
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	10 82       	st	Z, r1
	TCCR0 = (TCCR0 & 0xF8) | (prescalar);
    2cd6:	a3 e5       	ldi	r26, 0x53	; 83
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e3 e5       	ldi	r30, 0x53	; 83
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	98 7f       	andi	r25, 0xF8	; 248
    2ce4:	80 91 87 00 	lds	r24, 0x0087
    2ce8:	89 2b       	or	r24, r25
    2cea:	8c 93       	st	X, r24
}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <Timer0_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer0, overflow mode*/
void Timer0_Ovf_setCallBack(void(*a_t0_ovf_ptr)(void))
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <Timer0_Ovf_setCallBack+0x6>
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t0_ovf_callBackPtr = a_t0_ovf_ptr;
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	90 93 7c 00 	sts	0x007C, r25
    2d08:	80 93 7b 00 	sts	0x007B, r24
}
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <Timer0_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer0, compare mode*/
void Timer0_CTC_setCallBack(void(*a_t0_ctc_ptr)(void))
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <Timer0_CTC_setCallBack+0x6>
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t0_ctc_callBackPtr = a_t0_ctc_ptr;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	90 93 7e 00 	sts	0x007E, r25
    2d2c:	80 93 7d 00 	sts	0x007D, r24
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <Timer1_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer1, overflow mode*/
void Timer1_Ovf_setCallBack(void(*a_t1_ovf_ptr)(void))
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <Timer1_Ovf_setCallBack+0x6>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t1_ovf_callBackPtr = a_t1_ovf_ptr;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	90 93 80 00 	sts	0x0080, r25
    2d50:	80 93 7f 00 	sts	0x007F, r24
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <Timer1_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer1, compare mode*/
void Timer1_CTC_setCallBack(void(*a_t1_ctc_ptr)(void))
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <Timer1_CTC_setCallBack+0x6>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t1_ctc_callBackPtr = a_t1_ctc_ptr;
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	90 93 82 00 	sts	0x0082, r25
    2d74:	80 93 81 00 	sts	0x0081, r24
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <Timer2_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer2, overflow mode*/
void Timer2_Ovf_setCallBack(void(*a_t2_ovf_ptr)(void))
{
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <Timer2_Ovf_setCallBack+0x6>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t2_ovf_callBackPtr = a_t2_ovf_ptr;
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	90 93 84 00 	sts	0x0084, r25
    2d98:	80 93 83 00 	sts	0x0083, r24
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <Timer2_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer2, compare mode*/
void Timer2_CTC_setCallBack(void(*a_t2_ctc_ptr)(void))
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <Timer2_CTC_setCallBack+0x6>
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t2_ctc_callBackPtr = a_t2_ctc_ptr;
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	90 93 86 00 	sts	0x0086, r25
    2dbc:	80 93 85 00 	sts	0x0085, r24
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	2a 97       	sbiw	r28, 0x0a	; 10
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	9a 87       	std	Y+10, r25	; 0x0a
    2de0:	89 87       	std	Y+9, r24	; 0x09
	uint32 baudrate; /*Used to put baudrate in it*/

	uint32 baud_prescaler;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2de2:	eb e2       	ldi	r30, 0x2B	; 43
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2dea:	ea e2       	ldi	r30, 0x2A	; 42
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	88 e1       	ldi	r24, 0x18	; 24
    2df0:	80 83       	st	Z, r24
	

	if (Config_Ptr-> parity == EVEN_PARITY)
    2df2:	e9 85       	ldd	r30, Y+9	; 0x09
    2df4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2df6:	80 81       	ld	r24, Z
    2df8:	82 30       	cpi	r24, 0x02	; 2
    2dfa:	41 f4       	brne	.+16     	; 0x2e0c <UART_init+0x42>
	{
		SET_BIT(UCSRC,UPM1);
    2dfc:	a0 e4       	ldi	r26, 0x40	; 64
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e0 e4       	ldi	r30, 0x40	; 64
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	80 62       	ori	r24, 0x20	; 32
    2e08:	8c 93       	st	X, r24
    2e0a:	13 c0       	rjmp	.+38     	; 0x2e32 <UART_init+0x68>
		//UCSRC |= (1<<UPM1); /*UPM1=1: Even parity*/
	}
	else if(Config_Ptr-> parity == ODD_PARITY)
    2e0c:	e9 85       	ldd	r30, Y+9	; 0x09
    2e0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e10:	80 81       	ld	r24, Z
    2e12:	83 30       	cpi	r24, 0x03	; 3
    2e14:	71 f4       	brne	.+28     	; 0x2e32 <UART_init+0x68>
	{
		SET_BIT(UCSRC,UPM1);
    2e16:	a0 e4       	ldi	r26, 0x40	; 64
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e0 e4       	ldi	r30, 0x40	; 64
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 62       	ori	r24, 0x20	; 32
    2e22:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM0);
    2e24:	a0 e4       	ldi	r26, 0x40	; 64
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e0 e4       	ldi	r30, 0x40	; 64
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	80 61       	ori	r24, 0x10	; 16
    2e30:	8c 93       	st	X, r24
		//UCSRC |= (1<<UPM0) | (1<<UPM1); /*UPM1=0 UPM1=1: Odd parity*/
	}


	if(Config_Ptr->stop == BIT_2)
    2e32:	e9 85       	ldd	r30, Y+9	; 0x09
    2e34:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e36:	81 81       	ldd	r24, Z+1	; 0x01
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	39 f4       	brne	.+14     	; 0x2e4a <UART_init+0x80>
	{
		SET_BIT(UCSRC,USBS);
    2e3c:	a0 e4       	ldi	r26, 0x40	; 64
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e0 e4       	ldi	r30, 0x40	; 64
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	88 60       	ori	r24, 0x08	; 8
    2e48:	8c 93       	st	X, r24
		//UCSRC |= (1<<USBS); /*USBS=1: 2-bits stop*/
	}

	if(Config_Ptr->size == BIT_6)
    2e4a:	e9 85       	ldd	r30, Y+9	; 0x09
    2e4c:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	41 f4       	brne	.+16     	; 0x2e64 <UART_init+0x9a>
	{
		SET_BIT(UCSRC,UCSZ0);
    2e54:	a0 e4       	ldi	r26, 0x40	; 64
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e0 e4       	ldi	r30, 0x40	; 64
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	82 60       	ori	r24, 0x02	; 2
    2e60:	8c 93       	st	X, r24
    2e62:	20 c0       	rjmp	.+64     	; 0x2ea4 <UART_init+0xda>
		//UCSRC |= (1<<UCSZ0);
	}
	else if(Config_Ptr->size == BIT_7)
    2e64:	e9 85       	ldd	r30, Y+9	; 0x09
    2e66:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	41 f4       	brne	.+16     	; 0x2e7e <UART_init+0xb4>
	{
		SET_BIT(UCSRC,UCSZ1);
    2e6e:	a0 e4       	ldi	r26, 0x40	; 64
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e0 e4       	ldi	r30, 0x40	; 64
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	84 60       	ori	r24, 0x04	; 4
    2e7a:	8c 93       	st	X, r24
    2e7c:	13 c0       	rjmp	.+38     	; 0x2ea4 <UART_init+0xda>
		//UCSRC |= (1<<UCSZ1);
	}
	else if(Config_Ptr->size == BIT_8)
    2e7e:	e9 85       	ldd	r30, Y+9	; 0x09
    2e80:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	71 f4       	brne	.+28     	; 0x2ea4 <UART_init+0xda>
	{
		SET_BIT(UCSRC,UCSZ1);
    2e88:	a0 e4       	ldi	r26, 0x40	; 64
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e0 e4       	ldi	r30, 0x40	; 64
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	84 60       	ori	r24, 0x04	; 4
    2e94:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    2e96:	a0 e4       	ldi	r26, 0x40	; 64
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e0 e4       	ldi	r30, 0x40	; 64
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	82 60       	ori	r24, 0x02	; 2
    2ea2:	8c 93       	st	X, r24
		//UCSRC = (1<<UCSZ0) | (1<<UCSZ1);  /*For 8-bit data mode*/
	}

	UCSRC = (1<<URSEL);
    2ea4:	e0 e4       	ldi	r30, 0x40	; 64
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 e8       	ldi	r24, 0x80	; 128
    2eaa:	80 83       	st	Z, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	


	baudrate =  Config_Ptr->s_baudrate;
    2eac:	e9 85       	ldd	r30, Y+9	; 0x09
    2eae:	fa 85       	ldd	r31, Y+10	; 0x0a
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	94 81       	ldd	r25, Z+4	; 0x04
    2eb4:	a5 81       	ldd	r26, Z+5	; 0x05
    2eb6:	b6 81       	ldd	r27, Z+6	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	af 83       	std	Y+7, r26	; 0x07
    2ebe:	b8 87       	std	Y+8, r27	; 0x08

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	baud_prescaler = (((F_CPU / (baudrate * 8UL))) - 1);
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	af 81       	ldd	r26, Y+7	; 0x07
    2ec6:	b8 85       	ldd	r27, Y+8	; 0x08
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	aa 1f       	adc	r26, r26
    2ece:	bb 1f       	adc	r27, r27
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	aa 1f       	adc	r26, r26
    2ed6:	bb 1f       	adc	r27, r27
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	aa 1f       	adc	r26, r26
    2ede:	bb 1f       	adc	r27, r27
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	ad 01       	movw	r20, r26
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	92 e1       	ldi	r25, 0x12	; 18
    2ee8:	aa e7       	ldi	r26, 0x7A	; 122
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodsi4>
    2ef4:	da 01       	movw	r26, r20
    2ef6:	c9 01       	movw	r24, r18
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	a1 09       	sbc	r26, r1
    2efc:	b1 09       	sbc	r27, r1
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	ab 83       	std	Y+3, r26	; 0x03
    2f04:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = baud_prescaler>>8;
    2f06:	e0 e4       	ldi	r30, 0x40	; 64
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f10:	bc 81       	ldd	r27, Y+4	; 0x04
    2f12:	89 2f       	mov	r24, r25
    2f14:	9a 2f       	mov	r25, r26
    2f16:	ab 2f       	mov	r26, r27
    2f18:	bb 27       	eor	r27, r27
    2f1a:	80 83       	st	Z, r24
	UBRRL = baud_prescaler;
    2f1c:	e9 e2       	ldi	r30, 0x29	; 41
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	80 83       	st	Z, r24
}
    2f24:	2a 96       	adiw	r28, 0x0a	; 10
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f42:	eb e2       	ldi	r30, 0x2B	; 43
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	80 72       	andi	r24, 0x20	; 32
    2f4e:	90 70       	andi	r25, 0x00	; 0
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	b9 f3       	breq	.-18     	; 0x2f42 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2f54:	ec e2       	ldi	r30, 0x2C	; 44
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f6c:	eb e2       	ldi	r30, 0x2B	; 43
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	88 23       	and	r24, r24
    2f74:	dc f7       	brge	.-10     	; 0x2f6c <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2f76:	ec e2       	ldi	r30, 0x2C	; 44
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
}
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <UART_sendString+0x6>
    2f88:	0f 92       	push	r0
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	9b 83       	std	Y+3, r25	; 0x03
    2f90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f92:	19 82       	std	Y+1, r1	; 0x01
    2f94:	0e c0       	rjmp	.+28     	; 0x2fb2 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e2 0f       	add	r30, r18
    2fa4:	f3 1f       	adc	r31, r19
    2fa6:	80 81       	ld	r24, Z
    2fa8:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <UART_sendByte>
		i++;
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 23       	and	r24, r24
    2fc6:	39 f7       	brne	.-50     	; 0x2f96 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <UART_receiveString+0xa>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fe8:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	8c 01       	movw	r16, r24
    2ff6:	02 0f       	add	r16, r18
    2ff8:	13 1f       	adc	r17, r19
    2ffa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2ffe:	f8 01       	movw	r30, r16
    3000:	80 83       	st	Z, r24
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	8c 01       	movw	r16, r24
    3016:	02 0f       	add	r16, r18
    3018:	13 1f       	adc	r17, r19
    301a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	fc 01       	movw	r30, r24
    302e:	e2 0f       	add	r30, r18
    3030:	f3 1f       	adc	r31, r19
    3032:	80 81       	ld	r24, Z
    3034:	83 32       	cpi	r24, 0x23	; 35
    3036:	31 f7       	brne	.-52     	; 0x3004 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	9b 81       	ldd	r25, Y+3	; 0x03
    3042:	fc 01       	movw	r30, r24
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	10 82       	st	Z, r1
}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <__udivmodsi4>:
    305a:	a1 e2       	ldi	r26, 0x21	; 33
    305c:	1a 2e       	mov	r1, r26
    305e:	aa 1b       	sub	r26, r26
    3060:	bb 1b       	sub	r27, r27
    3062:	fd 01       	movw	r30, r26
    3064:	0d c0       	rjmp	.+26     	; 0x3080 <__udivmodsi4_ep>

00003066 <__udivmodsi4_loop>:
    3066:	aa 1f       	adc	r26, r26
    3068:	bb 1f       	adc	r27, r27
    306a:	ee 1f       	adc	r30, r30
    306c:	ff 1f       	adc	r31, r31
    306e:	a2 17       	cp	r26, r18
    3070:	b3 07       	cpc	r27, r19
    3072:	e4 07       	cpc	r30, r20
    3074:	f5 07       	cpc	r31, r21
    3076:	20 f0       	brcs	.+8      	; 0x3080 <__udivmodsi4_ep>
    3078:	a2 1b       	sub	r26, r18
    307a:	b3 0b       	sbc	r27, r19
    307c:	e4 0b       	sbc	r30, r20
    307e:	f5 0b       	sbc	r31, r21

00003080 <__udivmodsi4_ep>:
    3080:	66 1f       	adc	r22, r22
    3082:	77 1f       	adc	r23, r23
    3084:	88 1f       	adc	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	1a 94       	dec	r1
    308a:	69 f7       	brne	.-38     	; 0x3066 <__udivmodsi4_loop>
    308c:	60 95       	com	r22
    308e:	70 95       	com	r23
    3090:	80 95       	com	r24
    3092:	90 95       	com	r25
    3094:	9b 01       	movw	r18, r22
    3096:	ac 01       	movw	r20, r24
    3098:	bd 01       	movw	r22, r26
    309a:	cf 01       	movw	r24, r30
    309c:	08 95       	ret

0000309e <__prologue_saves__>:
    309e:	2f 92       	push	r2
    30a0:	3f 92       	push	r3
    30a2:	4f 92       	push	r4
    30a4:	5f 92       	push	r5
    30a6:	6f 92       	push	r6
    30a8:	7f 92       	push	r7
    30aa:	8f 92       	push	r8
    30ac:	9f 92       	push	r9
    30ae:	af 92       	push	r10
    30b0:	bf 92       	push	r11
    30b2:	cf 92       	push	r12
    30b4:	df 92       	push	r13
    30b6:	ef 92       	push	r14
    30b8:	ff 92       	push	r15
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	ca 1b       	sub	r28, r26
    30c8:	db 0b       	sbc	r29, r27
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	09 94       	ijmp

000030d6 <__epilogue_restores__>:
    30d6:	2a 88       	ldd	r2, Y+18	; 0x12
    30d8:	39 88       	ldd	r3, Y+17	; 0x11
    30da:	48 88       	ldd	r4, Y+16	; 0x10
    30dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    30de:	6e 84       	ldd	r6, Y+14	; 0x0e
    30e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30e8:	b9 84       	ldd	r11, Y+9	; 0x09
    30ea:	c8 84       	ldd	r12, Y+8	; 0x08
    30ec:	df 80       	ldd	r13, Y+7	; 0x07
    30ee:	ee 80       	ldd	r14, Y+6	; 0x06
    30f0:	fd 80       	ldd	r15, Y+5	; 0x05
    30f2:	0c 81       	ldd	r16, Y+4	; 0x04
    30f4:	1b 81       	ldd	r17, Y+3	; 0x03
    30f6:	aa 81       	ldd	r26, Y+2	; 0x02
    30f8:	b9 81       	ldd	r27, Y+1	; 0x01
    30fa:	ce 0f       	add	r28, r30
    30fc:	d1 1d       	adc	r29, r1
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	ed 01       	movw	r28, r26
    310a:	08 95       	ret

0000310c <itoa>:
    310c:	fb 01       	movw	r30, r22
    310e:	9f 01       	movw	r18, r30
    3110:	e8 94       	clt
    3112:	42 30       	cpi	r20, 0x02	; 2
    3114:	c4 f0       	brlt	.+48     	; 0x3146 <itoa+0x3a>
    3116:	45 32       	cpi	r20, 0x25	; 37
    3118:	b4 f4       	brge	.+44     	; 0x3146 <itoa+0x3a>
    311a:	4a 30       	cpi	r20, 0x0A	; 10
    311c:	29 f4       	brne	.+10     	; 0x3128 <itoa+0x1c>
    311e:	97 fb       	bst	r25, 7
    3120:	1e f4       	brtc	.+6      	; 0x3128 <itoa+0x1c>
    3122:	90 95       	com	r25
    3124:	81 95       	neg	r24
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	64 2f       	mov	r22, r20
    312a:	77 27       	eor	r23, r23
    312c:	0e 94 b7 18 	call	0x316e	; 0x316e <__udivmodhi4>
    3130:	80 5d       	subi	r24, 0xD0	; 208
    3132:	8a 33       	cpi	r24, 0x3A	; 58
    3134:	0c f0       	brlt	.+2      	; 0x3138 <itoa+0x2c>
    3136:	89 5d       	subi	r24, 0xD9	; 217
    3138:	81 93       	st	Z+, r24
    313a:	cb 01       	movw	r24, r22
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	a1 f7       	brne	.-24     	; 0x3128 <itoa+0x1c>
    3140:	16 f4       	brtc	.+4      	; 0x3146 <itoa+0x3a>
    3142:	5d e2       	ldi	r21, 0x2D	; 45
    3144:	51 93       	st	Z+, r21
    3146:	10 82       	st	Z, r1
    3148:	c9 01       	movw	r24, r18
    314a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <strrev>

0000314e <strrev>:
    314e:	dc 01       	movw	r26, r24
    3150:	fc 01       	movw	r30, r24
    3152:	67 2f       	mov	r22, r23
    3154:	71 91       	ld	r23, Z+
    3156:	77 23       	and	r23, r23
    3158:	e1 f7       	brne	.-8      	; 0x3152 <strrev+0x4>
    315a:	32 97       	sbiw	r30, 0x02	; 2
    315c:	04 c0       	rjmp	.+8      	; 0x3166 <strrev+0x18>
    315e:	7c 91       	ld	r23, X
    3160:	6d 93       	st	X+, r22
    3162:	70 83       	st	Z, r23
    3164:	62 91       	ld	r22, -Z
    3166:	ae 17       	cp	r26, r30
    3168:	bf 07       	cpc	r27, r31
    316a:	c8 f3       	brcs	.-14     	; 0x315e <strrev+0x10>
    316c:	08 95       	ret

0000316e <__udivmodhi4>:
    316e:	aa 1b       	sub	r26, r26
    3170:	bb 1b       	sub	r27, r27
    3172:	51 e1       	ldi	r21, 0x11	; 17
    3174:	07 c0       	rjmp	.+14     	; 0x3184 <__udivmodhi4_ep>

00003176 <__udivmodhi4_loop>:
    3176:	aa 1f       	adc	r26, r26
    3178:	bb 1f       	adc	r27, r27
    317a:	a6 17       	cp	r26, r22
    317c:	b7 07       	cpc	r27, r23
    317e:	10 f0       	brcs	.+4      	; 0x3184 <__udivmodhi4_ep>
    3180:	a6 1b       	sub	r26, r22
    3182:	b7 0b       	sbc	r27, r23

00003184 <__udivmodhi4_ep>:
    3184:	88 1f       	adc	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	5a 95       	dec	r21
    318a:	a9 f7       	brne	.-22     	; 0x3176 <__udivmodhi4_loop>
    318c:	80 95       	com	r24
    318e:	90 95       	com	r25
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	08 95       	ret

00003196 <_exit>:
    3196:	f8 94       	cli

00003198 <__stop_program>:
    3198:	ff cf       	rjmp	.-2      	; 0x3198 <__stop_program>
