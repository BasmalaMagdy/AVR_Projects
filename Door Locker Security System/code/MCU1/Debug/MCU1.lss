
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00003614  000036a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080011a  0080011a  00003762  2**0
                  ALLOC
  3 .stab         00003930  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001485  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008519  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008659  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_3>
      10:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__vector_8>
      24:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                                 MAIN FUNCTION                              *
 *******************************************************************************/
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 init_flag =0;      /*variable used to know if the first code is done before or not*/
     b5a:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);          /* Enable Global Interrupt I-Bit */
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
	 * 2. Timer_mode: Overflow mode
	 * 3. Prescalar: clk/1024
	 * 4. Initial value: 0
	 * 5. Compare value: 0  (overflow mode)
	 */
	Timer_ConfigType Timer_Config = {TIMER0,OVERFLOW,F_CPU_1024,0,0};
     b6a:	ce 01       	movw	r24, r28
     b6c:	02 96       	adiw	r24, 0x02	; 2
     b6e:	99 8b       	std	Y+17, r25	; 0x11
     b70:	88 8b       	std	Y+16, r24	; 0x10
     b72:	e3 e1       	ldi	r30, 0x13	; 19
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	fb 8b       	std	Y+19, r31	; 0x13
     b78:	ea 8b       	std	Y+18, r30	; 0x12
     b7a:	f7 e0       	ldi	r31, 0x07	; 7
     b7c:	fc 8b       	std	Y+20, r31	; 0x14
     b7e:	ea 89       	ldd	r30, Y+18	; 0x12
     b80:	fb 89       	ldd	r31, Y+19	; 0x13
     b82:	00 80       	ld	r0, Z
     b84:	8a 89       	ldd	r24, Y+18	; 0x12
     b86:	9b 89       	ldd	r25, Y+19	; 0x13
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9b 8b       	std	Y+19, r25	; 0x13
     b8c:	8a 8b       	std	Y+18, r24	; 0x12
     b8e:	e8 89       	ldd	r30, Y+16	; 0x10
     b90:	f9 89       	ldd	r31, Y+17	; 0x11
     b92:	00 82       	st	Z, r0
     b94:	88 89       	ldd	r24, Y+16	; 0x10
     b96:	99 89       	ldd	r25, Y+17	; 0x11
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	99 8b       	std	Y+17, r25	; 0x11
     b9c:	88 8b       	std	Y+16, r24	; 0x10
     b9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	9c 8b       	std	Y+20, r25	; 0x14
     ba4:	ec 89       	ldd	r30, Y+20	; 0x14
     ba6:	ee 23       	and	r30, r30
     ba8:	51 f7       	brne	.-44     	; 0xb7e <main+0x38>
	 * 1. Parity: Disabled (no parity)
	 * 2. Stop_Bit: BIT_1 (1 stop bit)
	 * 3. CharSize: BIT_8 (8-bits data)
	 * 4. Baudrate: 9600
	 */
	UART_ConfigType UART_Config = {DISABLED,BIT_1,BIT_8,9600};
     baa:	ce 01       	movw	r24, r28
     bac:	09 96       	adiw	r24, 0x09	; 9
     bae:	9e 8b       	std	Y+22, r25	; 0x16
     bb0:	8d 8b       	std	Y+21, r24	; 0x15
     bb2:	ec e0       	ldi	r30, 0x0C	; 12
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	f8 8f       	std	Y+24, r31	; 0x18
     bb8:	ef 8b       	std	Y+23, r30	; 0x17
     bba:	f7 e0       	ldi	r31, 0x07	; 7
     bbc:	f9 8f       	std	Y+25, r31	; 0x19
     bbe:	ef 89       	ldd	r30, Y+23	; 0x17
     bc0:	f8 8d       	ldd	r31, Y+24	; 0x18
     bc2:	00 80       	ld	r0, Z
     bc4:	8f 89       	ldd	r24, Y+23	; 0x17
     bc6:	98 8d       	ldd	r25, Y+24	; 0x18
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	98 8f       	std	Y+24, r25	; 0x18
     bcc:	8f 8b       	std	Y+23, r24	; 0x17
     bce:	ed 89       	ldd	r30, Y+21	; 0x15
     bd0:	fe 89       	ldd	r31, Y+22	; 0x16
     bd2:	00 82       	st	Z, r0
     bd4:	8d 89       	ldd	r24, Y+21	; 0x15
     bd6:	9e 89       	ldd	r25, Y+22	; 0x16
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	9e 8b       	std	Y+22, r25	; 0x16
     bdc:	8d 8b       	std	Y+21, r24	; 0x15
     bde:	99 8d       	ldd	r25, Y+25	; 0x19
     be0:	91 50       	subi	r25, 0x01	; 1
     be2:	99 8f       	std	Y+25, r25	; 0x19
     be4:	e9 8d       	ldd	r30, Y+25	; 0x19
     be6:	ee 23       	and	r30, r30
     be8:	51 f7       	brne	.-44     	; 0xbbe <main+0x78>

	/*Function to set the Call Back function address for Timer0, overflow mode in time driver
	 * Calc_time to Calculate number of seconds
	 * */
	Timer0_Ovf_setCallBack(Calc_time);
     bea:	84 e4       	ldi	r24, 0x44	; 68
     bec:	96 e1       	ldi	r25, 0x16	; 22
     bee:	0e 94 ad 18 	call	0x315a	; 0x315a <Timer0_Ovf_setCallBack>


	LCD_init();                   /* initialize LCD */
     bf2:	0e 94 80 08 	call	0x1100	; 0x1100 <LCD_init>
	UART_init(& UART_Config);    /* initialize UART */
     bf6:	ce 01       	movw	r24, r28
     bf8:	09 96       	adiw	r24, 0x09	; 9
     bfa:	0e 94 19 19 	call	0x3232	; 0x3232 <UART_init>
	Timer_init(& Timer_Config);   /* initialize TIMER */
     bfe:	ce 01       	movw	r24, r28
     c00:	02 96       	adiw	r24, 0x02	; 2
     c02:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <Timer_init>


	UART_sendByte(M1_READY); /*MC1 sends to MC2 that it is ready to start*/
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
	/*
	 * variable used to receive initialization value that be saved in the address
	 * to know if the first code is done before or not
	 */
	init_flag = UART_recieveByte();
     c0c:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
     c10:	89 83       	std	Y+1, r24	; 0x01

		/*
		 * if init_flag equal the INIT_FLAG
		 * that mean the the first code isn't done yet
		 */
		if (init_flag != INIT_FLAG)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	39 f0       	breq	.+14     	; 0xc26 <main+0xe0>
		{
			// Go to this function if the code is the first run to take the new password from user
			// 2 times and check if they are match and sent it to MCU22 to save it
			//
			takePassword();
     c18:	0e 94 80 11 	call	0x2300	; 0x2300 <takePassword>
			init_flag = INIT_FLAG;
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	89 83       	std	Y+1, r24	; 0x01

			changePass();
     c20:	0e 94 3e 14 	call	0x287c	; 0x287c <changePass>
     c24:	f6 cf       	rjmp	.-20     	; 0xc12 <main+0xcc>
		else
		{
			// Go to this function if the code is done before run
			// to know if user want to change password or open the door
			//
			changePass();
     c26:	0e 94 3e 14 	call	0x287c	; 0x287c <changePass>
     c2a:	f3 cf       	rjmp	.-26     	; 0xc12 <main+0xcc>

00000c2c <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     c34:	e7 e2       	ldi	r30, 0x27	; 39
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     c3a:	e6 e2       	ldi	r30, 0x26	; 38
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	83 e8       	ldi	r24, 0x83	; 131
     c40:	80 83       	st	Z, r24
}
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	87 70       	andi	r24, 0x07	; 7
     c58:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     c5a:	a7 e2       	ldi	r26, 0x27	; 39
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e7 e2       	ldi	r30, 0x27	; 39
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	80 7e       	andi	r24, 0xE0	; 224
     c66:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     c68:	a7 e2       	ldi	r26, 0x27	; 39
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e7 e2       	ldi	r30, 0x27	; 39
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	90 81       	ld	r25, Z
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	89 2b       	or	r24, r25
     c76:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     c78:	a6 e2       	ldi	r26, 0x26	; 38
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e6 e2       	ldi	r30, 0x26	; 38
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     c86:	e6 e2       	ldi	r30, 0x26	; 38
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	80 71       	andi	r24, 0x10	; 16
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	b9 f3       	breq	.-18     	; 0xc86 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     c98:	a6 e2       	ldi	r26, 0x26	; 38
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e6 e2       	ldi	r30, 0x26	; 38
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 61       	ori	r24, 0x10	; 16
     ca4:	8c 93       	st	X, r24
	return ADC; /* return the data register */
     ca6:	e4 e2       	ldi	r30, 0x24	; 36
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
}
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     cbe:	0e 94 05 07 	call	0xe0a	; 0xe0a <TWI_init>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <EEPROM_writeByte+0x6>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <EEPROM_writeByte+0x8>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cda:	0e 94 1b 07 	call	0xe36	; 0xe36 <TWI_start>
    if (TWI_getStatus() != TW_START)
     cde:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     ce2:	88 30       	cpi	r24, 0x08	; 8
     ce4:	11 f0       	breq	.+4      	; 0xcea <EEPROM_writeByte+0x22>
        return ERROR;
     ce6:	1c 82       	std	Y+4, r1	; 0x04
     ce8:	28 c0       	rjmp	.+80     	; 0xd3a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	80 70       	andi	r24, 0x00	; 0
     cf0:	97 70       	andi	r25, 0x07	; 7
     cf2:	88 0f       	add	r24, r24
     cf4:	89 2f       	mov	r24, r25
     cf6:	88 1f       	adc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	91 95       	neg	r25
     cfc:	80 6a       	ori	r24, 0xA0	; 160
     cfe:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d02:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d06:	88 31       	cpi	r24, 0x18	; 24
     d08:	11 f0       	breq	.+4      	; 0xd0e <EEPROM_writeByte+0x46>
        return ERROR; 
     d0a:	1c 82       	std	Y+4, r1	; 0x04
     d0c:	16 c0       	rjmp	.+44     	; 0xd3a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d14:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d18:	88 32       	cpi	r24, 0x28	; 40
     d1a:	11 f0       	breq	.+4      	; 0xd20 <EEPROM_writeByte+0x58>
        return ERROR;
     d1c:	1c 82       	std	Y+4, r1	; 0x04
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d26:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d2a:	88 32       	cpi	r24, 0x28	; 40
     d2c:	11 f0       	breq	.+4      	; 0xd32 <EEPROM_writeByte+0x6a>
        return ERROR;
     d2e:	1c 82       	std	Y+4, r1	; 0x04
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     d32:	0e 94 2b 07 	call	0xe56	; 0xe56 <TWI_stop>
	
    return SUCCESS;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8c 83       	std	Y+4, r24	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <EEPROM_readByte+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <EEPROM_readByte+0x8>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	7c 83       	std	Y+4, r23	; 0x04
     d5e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d60:	0e 94 1b 07 	call	0xe36	; 0xe36 <TWI_start>
    if (TWI_getStatus() != TW_START)
     d64:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	11 f0       	breq	.+4      	; 0xd70 <EEPROM_readByte+0x26>
        return ERROR;
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	44 c0       	rjmp	.+136    	; 0xdf8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	80 70       	andi	r24, 0x00	; 0
     d76:	97 70       	andi	r25, 0x07	; 7
     d78:	88 0f       	add	r24, r24
     d7a:	89 2f       	mov	r24, r25
     d7c:	88 1f       	adc	r24, r24
     d7e:	99 0b       	sbc	r25, r25
     d80:	91 95       	neg	r25
     d82:	80 6a       	ori	r24, 0xA0	; 160
     d84:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d88:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d8c:	88 31       	cpi	r24, 0x18	; 24
     d8e:	11 f0       	breq	.+4      	; 0xd94 <EEPROM_readByte+0x4a>
        return ERROR;
     d90:	1d 82       	std	Y+5, r1	; 0x05
     d92:	32 c0       	rjmp	.+100    	; 0xdf8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d9a:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     d9e:	88 32       	cpi	r24, 0x28	; 40
     da0:	11 f0       	breq	.+4      	; 0xda6 <EEPROM_readByte+0x5c>
        return ERROR;
     da2:	1d 82       	std	Y+5, r1	; 0x05
     da4:	29 c0       	rjmp	.+82     	; 0xdf8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     da6:	0e 94 1b 07 	call	0xe36	; 0xe36 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     daa:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     dae:	80 31       	cpi	r24, 0x10	; 16
     db0:	11 f0       	breq	.+4      	; 0xdb6 <EEPROM_readByte+0x6c>
        return ERROR;
     db2:	1d 82       	std	Y+5, r1	; 0x05
     db4:	21 c0       	rjmp	.+66     	; 0xdf8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	80 70       	andi	r24, 0x00	; 0
     dbc:	97 70       	andi	r25, 0x07	; 7
     dbe:	88 0f       	add	r24, r24
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 1f       	adc	r24, r24
     dc4:	99 0b       	sbc	r25, r25
     dc6:	91 95       	neg	r25
     dc8:	81 6a       	ori	r24, 0xA1	; 161
     dca:	0e 94 36 07 	call	0xe6c	; 0xe6c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     dce:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     dd2:	80 34       	cpi	r24, 0x40	; 64
     dd4:	11 f0       	breq	.+4      	; 0xdda <EEPROM_readByte+0x90>
        return ERROR;
     dd6:	1d 82       	std	Y+5, r1	; 0x05
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     dda:	0e 94 60 07 	call	0xec0	; 0xec0 <TWI_readWithNACK>
     dde:	eb 81       	ldd	r30, Y+3	; 0x03
     de0:	fc 81       	ldd	r31, Y+4	; 0x04
     de2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     de4:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_getStatus>
     de8:	88 35       	cpi	r24, 0x58	; 88
     dea:	11 f0       	breq	.+4      	; 0xdf0 <EEPROM_readByte+0xa6>
        return ERROR;
     dec:	1d 82       	std	Y+5, r1	; 0x05
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     df0:	0e 94 2b 07 	call	0xe56	; 0xe56 <TWI_stop>
    return SUCCESS;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     e12:	e0 e2       	ldi	r30, 0x20	; 32
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 83       	st	Z, r24
	TWSR = 0x00;
     e1a:	e1 e2       	ldi	r30, 0x21	; 33
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     e20:	e2 e2       	ldi	r30, 0x22	; 34
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     e28:	e6 e5       	ldi	r30, 0x56	; 86
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	80 83       	st	Z, r24
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <TWI_start>:

void TWI_start(void)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e3e:	e6 e5       	ldi	r30, 0x56	; 86
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	84 ea       	ldi	r24, 0xA4	; 164
     e44:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 23       	and	r24, r24
     e4e:	dc f7       	brge	.-10     	; 0xe46 <TWI_start+0x10>
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <TWI_stop>:

void TWI_stop(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	84 e9       	ldi	r24, 0x94	; 148
     e64:	80 83       	st	Z, r24
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <TWI_write>:

void TWI_write(uint8 data)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e78:	e3 e2       	ldi	r30, 0x23	; 35
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	84 e8       	ldi	r24, 0x84	; 132
     e86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	dc f7       	brge	.-10     	; 0xe88 <TWI_write+0x1c>
}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     ea2:	e6 e5       	ldi	r30, 0x56	; 86
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	84 ec       	ldi	r24, 0xC4	; 196
     ea8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     eaa:	e6 e5       	ldi	r30, 0x56	; 86
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	dc f7       	brge	.-10     	; 0xeaa <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     eb4:	e3 e2       	ldi	r30, 0x23	; 35
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     ec8:	e6 e5       	ldi	r30, 0x56	; 86
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	84 e8       	ldi	r24, 0x84	; 132
     ece:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ed0:	e6 e5       	ldi	r30, 0x56	; 86
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 23       	and	r24, r24
     ed8:	dc f7       	brge	.-10     	; 0xed0 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     eda:	e3 e2       	ldi	r30, 0x23	; 35
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     ef0:	e1 e2       	ldi	r30, 0x21	; 33
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	89 83       	std	Y+1, r24	; 0x01
    return status;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <KeyPad_getPressedKey+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     f0e:	1a 82       	std	Y+2, r1	; 0x02
     f10:	4c c0       	rjmp	.+152    	; 0xfaa <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <KeyPad_getPressedKey+0x22>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <KeyPad_getPressedKey+0x1e>
     f2a:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	80 e1       	ldi	r24, 0x10	; 16
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <KeyPad_getPressedKey+0x3e>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <KeyPad_getPressedKey+0x3a>
     f46:	80 95       	com	r24
     f48:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     f4a:	19 82       	std	Y+1, r1	; 0x01
     f4c:	28 c0       	rjmp	.+80     	; 0xf9e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     f4e:	e3 e3       	ldi	r30, 0x33	; 51
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <KeyPad_getPressedKey+0x62>
     f62:	55 95       	asr	r21
     f64:	47 95       	ror	r20
     f66:	8a 95       	dec	r24
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <KeyPad_getPressedKey+0x5e>
     f6a:	ca 01       	movw	r24, r20
     f6c:	81 70       	andi	r24, 0x01	; 1
     f6e:	90 70       	andi	r25, 0x00	; 0
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	91 f4       	brne	.+36     	; 0xf98 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	98 2f       	mov	r25, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	89 0f       	add	r24, r25
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	a8 f2       	brcs	.-86     	; 0xf4e <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	84 30       	cpi	r24, 0x04	; 4
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <KeyPad_getPressedKey+0xae>
     fb0:	b0 cf       	rjmp	.-160    	; 0xf12 <KeyPad_getPressedKey+0xe>
     fb2:	ad cf       	rjmp	.-166    	; 0xf0e <KeyPad_getPressedKey+0xa>

00000fb4 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <KeyPad_4x4_adjustKeyNumber+0x6>
     fba:	00 d0       	rcall	.+0      	; 0xfbc <KeyPad_4x4_adjustKeyNumber+0x8>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3c 83       	std	Y+4, r19	; 0x04
     fca:	2b 83       	std	Y+3, r18	; 0x03
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	88 30       	cpi	r24, 0x08	; 8
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <KeyPad_4x4_adjustKeyNumber+0x24>
     fd6:	70 c0       	rjmp	.+224    	; 0x10b8 <KeyPad_4x4_adjustKeyNumber+0x104>
     fd8:	2b 81       	ldd	r18, Y+3	; 0x03
     fda:	3c 81       	ldd	r19, Y+4	; 0x04
     fdc:	29 30       	cpi	r18, 0x09	; 9
     fde:	31 05       	cpc	r19, r1
     fe0:	5c f5       	brge	.+86     	; 0x1038 <KeyPad_4x4_adjustKeyNumber+0x84>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x3a>
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <KeyPad_4x4_adjustKeyNumber+0xec>
     fee:	2b 81       	ldd	r18, Y+3	; 0x03
     ff0:	3c 81       	ldd	r19, Y+4	; 0x04
     ff2:	25 30       	cpi	r18, 0x05	; 5
     ff4:	31 05       	cpc	r19, r1
     ff6:	9c f4       	brge	.+38     	; 0x101e <KeyPad_4x4_adjustKeyNumber+0x6a>
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <KeyPad_4x4_adjustKeyNumber+0x50>
    1002:	48 c0       	rjmp	.+144    	; 0x1094 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1004:	2b 81       	ldd	r18, Y+3	; 0x03
    1006:	3c 81       	ldd	r19, Y+4	; 0x04
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	0c f0       	brlt	.+2      	; 0x1010 <KeyPad_4x4_adjustKeyNumber+0x5c>
    100e:	45 c0       	rjmp	.+138    	; 0x109a <KeyPad_4x4_adjustKeyNumber+0xe6>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <KeyPad_4x4_adjustKeyNumber+0x68>
    101a:	39 c0       	rjmp	.+114    	; 0x108e <KeyPad_4x4_adjustKeyNumber+0xda>
    101c:	67 c0       	rjmp	.+206    	; 0x10ec <KeyPad_4x4_adjustKeyNumber+0x138>
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	3c 81       	ldd	r19, Y+4	; 0x04
    1022:	26 30       	cpi	r18, 0x06	; 6
    1024:	31 05       	cpc	r19, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <KeyPad_4x4_adjustKeyNumber+0x76>
    1028:	41 c0       	rjmp	.+130    	; 0x10ac <KeyPad_4x4_adjustKeyNumber+0xf8>
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	87 30       	cpi	r24, 0x07	; 7
    1030:	91 05       	cpc	r25, r1
    1032:	0c f0       	brlt	.+2      	; 0x1036 <KeyPad_4x4_adjustKeyNumber+0x82>
    1034:	3e c0       	rjmp	.+124    	; 0x10b2 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1036:	37 c0       	rjmp	.+110    	; 0x10a6 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1038:	2b 81       	ldd	r18, Y+3	; 0x03
    103a:	3c 81       	ldd	r19, Y+4	; 0x04
    103c:	2c 30       	cpi	r18, 0x0C	; 12
    103e:	31 05       	cpc	r19, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <KeyPad_4x4_adjustKeyNumber+0x90>
    1042:	46 c0       	rjmp	.+140    	; 0x10d0 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	8d 30       	cpi	r24, 0x0D	; 13
    104a:	91 05       	cpc	r25, r1
    104c:	5c f4       	brge	.+22     	; 0x1064 <KeyPad_4x4_adjustKeyNumber+0xb0>
    104e:	2b 81       	ldd	r18, Y+3	; 0x03
    1050:	3c 81       	ldd	r19, Y+4	; 0x04
    1052:	2a 30       	cpi	r18, 0x0A	; 10
    1054:	31 05       	cpc	r19, r1
    1056:	b1 f1       	breq	.+108    	; 0x10c4 <KeyPad_4x4_adjustKeyNumber+0x110>
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	8b 30       	cpi	r24, 0x0B	; 11
    105e:	91 05       	cpc	r25, r1
    1060:	a4 f5       	brge	.+104    	; 0x10ca <KeyPad_4x4_adjustKeyNumber+0x116>
    1062:	2d c0       	rjmp	.+90     	; 0x10be <KeyPad_4x4_adjustKeyNumber+0x10a>
    1064:	2b 81       	ldd	r18, Y+3	; 0x03
    1066:	3c 81       	ldd	r19, Y+4	; 0x04
    1068:	2e 30       	cpi	r18, 0x0E	; 14
    106a:	31 05       	cpc	r19, r1
    106c:	b9 f1       	breq	.+110    	; 0x10dc <KeyPad_4x4_adjustKeyNumber+0x128>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	8e 30       	cpi	r24, 0x0E	; 14
    1074:	91 05       	cpc	r25, r1
    1076:	7c f1       	brlt	.+94     	; 0x10d6 <KeyPad_4x4_adjustKeyNumber+0x122>
    1078:	2b 81       	ldd	r18, Y+3	; 0x03
    107a:	3c 81       	ldd	r19, Y+4	; 0x04
    107c:	2f 30       	cpi	r18, 0x0F	; 15
    107e:	31 05       	cpc	r19, r1
    1080:	79 f1       	breq	.+94     	; 0x10e0 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	80 31       	cpi	r24, 0x10	; 16
    1088:	91 05       	cpc	r25, r1
    108a:	69 f1       	breq	.+90     	; 0x10e6 <KeyPad_4x4_adjustKeyNumber+0x132>
    108c:	2f c0       	rjmp	.+94     	; 0x10ec <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    108e:	97 e0       	ldi	r25, 0x07	; 7
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	2e c0       	rjmp	.+92     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1094:	28 e0       	ldi	r18, 0x08	; 8
    1096:	2a 83       	std	Y+2, r18	; 0x02
    1098:	2b c0       	rjmp	.+86     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    109a:	39 e0       	ldi	r19, 0x09	; 9
    109c:	3a 83       	std	Y+2, r19	; 0x02
    109e:	28 c0       	rjmp	.+80     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    10a0:	85 e2       	ldi	r24, 0x25	; 37
    10a2:	8a 83       	std	Y+2, r24	; 0x02
    10a4:	25 c0       	rjmp	.+74     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	22 c0       	rjmp	.+68     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    10ac:	25 e0       	ldi	r18, 0x05	; 5
    10ae:	2a 83       	std	Y+2, r18	; 0x02
    10b0:	1f c0       	rjmp	.+62     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    10b2:	36 e0       	ldi	r19, 0x06	; 6
    10b4:	3a 83       	std	Y+2, r19	; 0x02
    10b6:	1c c0       	rjmp	.+56     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    10b8:	8a e2       	ldi	r24, 0x2A	; 42
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	19 c0       	rjmp	.+50     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	16 c0       	rjmp	.+44     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    10c4:	22 e0       	ldi	r18, 0x02	; 2
    10c6:	2a 83       	std	Y+2, r18	; 0x02
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    10ca:	33 e0       	ldi	r19, 0x03	; 3
    10cc:	3a 83       	std	Y+2, r19	; 0x02
    10ce:	10 c0       	rjmp	.+32     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    10d6:	9d e0       	ldi	r25, 0x0D	; 13
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	0a c0       	rjmp	.+20     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    10dc:	1a 82       	std	Y+2, r1	; 0x02
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    10e0:	2d e3       	ldi	r18, 0x3D	; 61
    10e2:	2a 83       	std	Y+2, r18	; 0x02
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    10e6:	3b e2       	ldi	r19, 0x2B	; 43
    10e8:	3a 83       	std	Y+2, r19	; 0x02
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8a 83       	std	Y+2, r24	; 0x02
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1108:	a7 e3       	ldi	r26, 0x37	; 55
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e7 e3       	ldi	r30, 0x37	; 55
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 60       	ori	r24, 0x0E	; 14
    1114:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1116:	aa e3       	ldi	r26, 0x3A	; 58
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 60       	ori	r24, 0x0F	; 15
    1122:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    112a:	88 e2       	ldi	r24, 0x28	; 40
    112c:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1130:	8c e0       	ldi	r24, 0x0C	; 12
    1132:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	c3 56       	subi	r28, 0x63	; 99
    1150:	d0 40       	sbci	r29, 0x00	; 0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	fe 01       	movw	r30, r28
    115e:	ed 59       	subi	r30, 0x9D	; 157
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1164:	a8 e3       	ldi	r26, 0x38	; 56
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8d 7f       	andi	r24, 0xFD	; 253
    1170:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8b 7f       	andi	r24, 0xFB	; 251
    117e:	8c 93       	st	X, r24
    1180:	fe 01       	movw	r30, r28
    1182:	e1 5a       	subi	r30, 0xA1	; 161
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e8       	ldi	r26, 0x80	; 128
    118c:	bf e3       	ldi	r27, 0x3F	; 63
    118e:	80 83       	st	Z, r24
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	a2 83       	std	Z+2, r26	; 0x02
    1194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	8e 01       	movw	r16, r28
    1198:	05 5a       	subi	r16, 0xA5	; 165
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	fe 01       	movw	r30, r28
    119e:	e1 5a       	subi	r30, 0xA1	; 161
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a ef       	ldi	r20, 0xFA	; 250
    11b0:	54 e4       	ldi	r21, 0x44	; 68
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	f8 01       	movw	r30, r16
    11bc:	80 83       	st	Z, r24
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	a2 83       	std	Z+2, r26	; 0x02
    11c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c4:	fe 01       	movw	r30, r28
    11c6:	e5 5a       	subi	r30, 0xA5	; 165
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	44 f4       	brge	.+16     	; 0x11f2 <LCD_sendCommand+0xb0>
		__ticks = 1;
    11e2:	fe 01       	movw	r30, r28
    11e4:	e7 5a       	subi	r30, 0xA7	; 167
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
    11f0:	64 c0       	rjmp	.+200    	; 0x12ba <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    11f2:	fe 01       	movw	r30, r28
    11f4:	e5 5a       	subi	r30, 0xA5	; 165
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	0c f0       	brlt	.+2      	; 0x1212 <LCD_sendCommand+0xd0>
    1210:	43 c0       	rjmp	.+134    	; 0x1298 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	fe 01       	movw	r30, r28
    1214:	e1 5a       	subi	r30, 0xA1	; 161
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	8e 01       	movw	r16, r28
    1232:	07 5a       	subi	r16, 0xA7	; 167
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	f8 01       	movw	r30, r16
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
    1248:	1f c0       	rjmp	.+62     	; 0x1288 <LCD_sendCommand+0x146>
    124a:	fe 01       	movw	r30, r28
    124c:	e9 5a       	subi	r30, 0xA9	; 169
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1258:	fe 01       	movw	r30, r28
    125a:	e9 5a       	subi	r30, 0xA9	; 169
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <LCD_sendCommand+0x120>
    1266:	fe 01       	movw	r30, r28
    1268:	e9 5a       	subi	r30, 0xA9	; 169
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1270:	de 01       	movw	r26, r28
    1272:	a7 5a       	subi	r26, 0xA7	; 167
    1274:	bf 4f       	sbci	r27, 0xFF	; 255
    1276:	fe 01       	movw	r30, r28
    1278:	e7 5a       	subi	r30, 0xA7	; 167
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	9c 93       	st	X, r25
    1286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1288:	fe 01       	movw	r30, r28
    128a:	e7 5a       	subi	r30, 0xA7	; 167
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	d1 f6       	brne	.-76     	; 0x124a <LCD_sendCommand+0x108>
    1296:	27 c0       	rjmp	.+78     	; 0x12e6 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1298:	8e 01       	movw	r16, r28
    129a:	07 5a       	subi	r16, 0xA7	; 167
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
    129e:	fe 01       	movw	r30, r28
    12a0:	e5 5a       	subi	r30, 0xA5	; 165
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	f8 01       	movw	r30, r16
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
    12ba:	de 01       	movw	r26, r28
    12bc:	ab 5a       	subi	r26, 0xAB	; 171
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	fe 01       	movw	r30, r28
    12c2:	e7 5a       	subi	r30, 0xA7	; 167
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	8d 93       	st	X+, r24
    12cc:	9c 93       	st	X, r25
    12ce:	fe 01       	movw	r30, r28
    12d0:	eb 5a       	subi	r30, 0xAB	; 171
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <LCD_sendCommand+0x196>
    12dc:	fe 01       	movw	r30, r28
    12de:	eb 5a       	subi	r30, 0xAB	; 171
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    12e6:	a8 e3       	ldi	r26, 0x38	; 56
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e8 e3       	ldi	r30, 0x38	; 56
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 60       	ori	r24, 0x08	; 8
    12f2:	8c 93       	st	X, r24
    12f4:	fe 01       	movw	r30, r28
    12f6:	ef 5a       	subi	r30, 0xAF	; 175
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e8       	ldi	r26, 0x80	; 128
    1300:	bf e3       	ldi	r27, 0x3F	; 63
    1302:	80 83       	st	Z, r24
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	a2 83       	std	Z+2, r26	; 0x02
    1308:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	8e 01       	movw	r16, r28
    130c:	03 5b       	subi	r16, 0xB3	; 179
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
    1310:	fe 01       	movw	r30, r28
    1312:	ef 5a       	subi	r30, 0xAF	; 175
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	60 81       	ld	r22, Z
    1318:	71 81       	ldd	r23, Z+1	; 0x01
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	93 81       	ldd	r25, Z+3	; 0x03
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4a ef       	ldi	r20, 0xFA	; 250
    1324:	54 e4       	ldi	r21, 0x44	; 68
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	f8 01       	movw	r30, r16
    1330:	80 83       	st	Z, r24
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	a2 83       	std	Z+2, r26	; 0x02
    1336:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1338:	fe 01       	movw	r30, r28
    133a:	e3 5b       	subi	r30, 0xB3	; 179
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	44 f4       	brge	.+16     	; 0x1366 <LCD_sendCommand+0x224>
		__ticks = 1;
    1356:	fe 01       	movw	r30, r28
    1358:	e5 5b       	subi	r30, 0xB5	; 181
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
    1364:	64 c0       	rjmp	.+200    	; 0x142e <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1366:	fe 01       	movw	r30, r28
    1368:	e3 5b       	subi	r30, 0xB3	; 179
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	4f e7       	ldi	r20, 0x7F	; 127
    137a:	57 e4       	ldi	r21, 0x47	; 71
    137c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1380:	18 16       	cp	r1, r24
    1382:	0c f0       	brlt	.+2      	; 0x1386 <LCD_sendCommand+0x244>
    1384:	43 c0       	rjmp	.+134    	; 0x140c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	fe 01       	movw	r30, r28
    1388:	ef 5a       	subi	r30, 0xAF	; 175
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e2       	ldi	r20, 0x20	; 32
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8e 01       	movw	r16, r28
    13a6:	05 5b       	subi	r16, 0xB5	; 181
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	f8 01       	movw	r30, r16
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
    13bc:	1f c0       	rjmp	.+62     	; 0x13fc <LCD_sendCommand+0x2ba>
    13be:	fe 01       	movw	r30, r28
    13c0:	e7 5b       	subi	r30, 0xB7	; 183
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	88 ec       	ldi	r24, 0xC8	; 200
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	fe 01       	movw	r30, r28
    13ce:	e7 5b       	subi	r30, 0xB7	; 183
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <LCD_sendCommand+0x294>
    13da:	fe 01       	movw	r30, r28
    13dc:	e7 5b       	subi	r30, 0xB7	; 183
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	de 01       	movw	r26, r28
    13e6:	a5 5b       	subi	r26, 0xB5	; 181
    13e8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ea:	fe 01       	movw	r30, r28
    13ec:	e5 5b       	subi	r30, 0xB5	; 181
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	9c 93       	st	X, r25
    13fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	fe 01       	movw	r30, r28
    13fe:	e5 5b       	subi	r30, 0xB5	; 181
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	d1 f6       	brne	.-76     	; 0x13be <LCD_sendCommand+0x27c>
    140a:	27 c0       	rjmp	.+78     	; 0x145a <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140c:	8e 01       	movw	r16, r28
    140e:	05 5b       	subi	r16, 0xB5	; 181
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	fe 01       	movw	r30, r28
    1414:	e3 5b       	subi	r30, 0xB3	; 179
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	f8 01       	movw	r30, r16
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	de 01       	movw	r26, r28
    1430:	a9 5b       	subi	r26, 0xB9	; 185
    1432:	bf 4f       	sbci	r27, 0xFF	; 255
    1434:	fe 01       	movw	r30, r28
    1436:	e5 5b       	subi	r30, 0xB5	; 181
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	8d 93       	st	X+, r24
    1440:	9c 93       	st	X, r25
    1442:	fe 01       	movw	r30, r28
    1444:	e9 5b       	subi	r30, 0xB9	; 185
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_sendCommand+0x30a>
    1450:	fe 01       	movw	r30, r28
    1452:	e9 5b       	subi	r30, 0xB9	; 185
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	98 2f       	mov	r25, r24
    1466:	90 7f       	andi	r25, 0xF0	; 240
    1468:	fe 01       	movw	r30, r28
    146a:	ed 59       	subi	r30, 0x9D	; 157
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	82 95       	swap	r24
    1472:	8f 70       	andi	r24, 0x0F	; 15
    1474:	89 2b       	or	r24, r25
    1476:	8c 93       	st	X, r24
    1478:	fe 01       	movw	r30, r28
    147a:	ed 5b       	subi	r30, 0xBD	; 189
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e8       	ldi	r26, 0x80	; 128
    1484:	bf e3       	ldi	r27, 0x3F	; 63
    1486:	80 83       	st	Z, r24
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	a2 83       	std	Z+2, r26	; 0x02
    148c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	8e 01       	movw	r16, r28
    1490:	01 5c       	subi	r16, 0xC1	; 193
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	fe 01       	movw	r30, r28
    1496:	ed 5b       	subi	r30, 0xBD	; 189
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4a ef       	ldi	r20, 0xFA	; 250
    14a8:	54 e4       	ldi	r21, 0x44	; 68
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	a2 83       	std	Z+2, r26	; 0x02
    14ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14bc:	fe 01       	movw	r30, r28
    14be:	ff 96       	adiw	r30, 0x3f	; 63
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9e af       	std	Y+62, r25	; 0x3e
    14de:	8d af       	std	Y+61, r24	; 0x3d
    14e0:	46 c0       	rjmp	.+140    	; 0x156e <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    14e2:	fe 01       	movw	r30, r28
    14e4:	ff 96       	adiw	r30, 0x3f	; 63
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	64 f5       	brge	.+88     	; 0x1556 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	fe 01       	movw	r30, r28
    1500:	ed 5b       	subi	r30, 0xBD	; 189
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	51 e4       	ldi	r21, 0x41	; 65
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9e af       	std	Y+62, r25	; 0x3e
    152a:	8d af       	std	Y+61, r24	; 0x3d
    152c:	0f c0       	rjmp	.+30     	; 0x154c <LCD_sendCommand+0x40a>
    152e:	88 ec       	ldi	r24, 0xC8	; 200
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c af       	std	Y+60, r25	; 0x3c
    1534:	8b af       	std	Y+59, r24	; 0x3b
    1536:	8b ad       	ldd	r24, Y+59	; 0x3b
    1538:	9c ad       	ldd	r25, Y+60	; 0x3c
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_sendCommand+0x3f8>
    153e:	9c af       	std	Y+60, r25	; 0x3c
    1540:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8d ad       	ldd	r24, Y+61	; 0x3d
    1544:	9e ad       	ldd	r25, Y+62	; 0x3e
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9e af       	std	Y+62, r25	; 0x3e
    154a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8d ad       	ldd	r24, Y+61	; 0x3d
    154e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <LCD_sendCommand+0x3ec>
    1554:	16 c0       	rjmp	.+44     	; 0x1582 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	fe 01       	movw	r30, r28
    1558:	ff 96       	adiw	r30, 0x3f	; 63
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e af       	std	Y+62, r25	; 0x3e
    156c:	8d af       	std	Y+61, r24	; 0x3d
    156e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1570:	9e ad       	ldd	r25, Y+62	; 0x3e
    1572:	9a af       	std	Y+58, r25	; 0x3a
    1574:	89 af       	std	Y+57, r24	; 0x39
    1576:	89 ad       	ldd	r24, Y+57	; 0x39
    1578:	9a ad       	ldd	r25, Y+58	; 0x3a
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_sendCommand+0x438>
    157e:	9a af       	std	Y+58, r25	; 0x3a
    1580:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	87 7f       	andi	r24, 0xF7	; 247
    158e:	8c 93       	st	X, r24
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e8       	ldi	r26, 0x80	; 128
    1596:	bf e3       	ldi	r27, 0x3F	; 63
    1598:	8d ab       	std	Y+53, r24	; 0x35
    159a:	9e ab       	std	Y+54, r25	; 0x36
    159c:	af ab       	std	Y+55, r26	; 0x37
    159e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	6d a9       	ldd	r22, Y+53	; 0x35
    15a2:	7e a9       	ldd	r23, Y+54	; 0x36
    15a4:	8f a9       	ldd	r24, Y+55	; 0x37
    15a6:	98 ad       	ldd	r25, Y+56	; 0x38
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	89 ab       	std	Y+49, r24	; 0x31
    15ba:	9a ab       	std	Y+50, r25	; 0x32
    15bc:	ab ab       	std	Y+51, r26	; 0x33
    15be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15c0:	69 a9       	ldd	r22, Y+49	; 0x31
    15c2:	7a a9       	ldd	r23, Y+50	; 0x32
    15c4:	8b a9       	ldd	r24, Y+51	; 0x33
    15c6:	9c a9       	ldd	r25, Y+52	; 0x34
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	98 ab       	std	Y+48, r25	; 0x30
    15de:	8f a7       	std	Y+47, r24	; 0x2f
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    15e2:	69 a9       	ldd	r22, Y+49	; 0x31
    15e4:	7a a9       	ldd	r23, Y+50	; 0x32
    15e6:	8b a9       	ldd	r24, Y+51	; 0x33
    15e8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	6d a9       	ldd	r22, Y+53	; 0x35
    15fc:	7e a9       	ldd	r23, Y+54	; 0x36
    15fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1600:	98 ad       	ldd	r25, Y+56	; 0x38
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	98 ab       	std	Y+48, r25	; 0x30
    1620:	8f a7       	std	Y+47, r24	; 0x2f
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_sendCommand+0x500>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9e a7       	std	Y+46, r25	; 0x2e
    162a:	8d a7       	std	Y+45, r24	; 0x2d
    162c:	8d a5       	ldd	r24, Y+45	; 0x2d
    162e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_sendCommand+0x4ee>
    1634:	9e a7       	std	Y+46, r25	; 0x2e
    1636:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	8f a5       	ldd	r24, Y+47	; 0x2f
    163a:	98 a9       	ldd	r25, Y+48	; 0x30
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	98 ab       	std	Y+48, r25	; 0x30
    1640:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	8f a5       	ldd	r24, Y+47	; 0x2f
    1644:	98 a9       	ldd	r25, Y+48	; 0x30
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <LCD_sendCommand+0x4e2>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	69 a9       	ldd	r22, Y+49	; 0x31
    164e:	7a a9       	ldd	r23, Y+50	; 0x32
    1650:	8b a9       	ldd	r24, Y+51	; 0x33
    1652:	9c a9       	ldd	r25, Y+52	; 0x34
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	98 ab       	std	Y+48, r25	; 0x30
    165e:	8f a7       	std	Y+47, r24	; 0x2f
    1660:	8f a5       	ldd	r24, Y+47	; 0x2f
    1662:	98 a9       	ldd	r25, Y+48	; 0x30
    1664:	9c a7       	std	Y+44, r25	; 0x2c
    1666:	8b a7       	std	Y+43, r24	; 0x2b
    1668:	8b a5       	ldd	r24, Y+43	; 0x2b
    166a:	9c a5       	ldd	r25, Y+44	; 0x2c
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_sendCommand+0x52a>
    1670:	9c a7       	std	Y+44, r25	; 0x2c
    1672:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1674:	a8 e3       	ldi	r26, 0x38	; 56
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e8 e3       	ldi	r30, 0x38	; 56
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	88 60       	ori	r24, 0x08	; 8
    1680:	8c 93       	st	X, r24
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	8f a3       	std	Y+39, r24	; 0x27
    168c:	98 a7       	std	Y+40, r25	; 0x28
    168e:	a9 a7       	std	Y+41, r26	; 0x29
    1690:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6f a1       	ldd	r22, Y+39	; 0x27
    1694:	78 a5       	ldd	r23, Y+40	; 0x28
    1696:	89 a5       	ldd	r24, Y+41	; 0x29
    1698:	9a a5       	ldd	r25, Y+42	; 0x2a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8b a3       	std	Y+35, r24	; 0x23
    16ac:	9c a3       	std	Y+36, r25	; 0x24
    16ae:	ad a3       	std	Y+37, r26	; 0x25
    16b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16b2:	6b a1       	ldd	r22, Y+35	; 0x23
    16b4:	7c a1       	ldd	r23, Y+36	; 0x24
    16b6:	8d a1       	ldd	r24, Y+37	; 0x25
    16b8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_sendCommand+0x592>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6f a1       	ldd	r22, Y+39	; 0x27
    16ee:	78 a5       	ldd	r23, Y+40	; 0x28
    16f0:	89 a5       	ldd	r24, Y+41	; 0x29
    16f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9a a3       	std	Y+34, r25	; 0x22
    1712:	89 a3       	std	Y+33, r24	; 0x21
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_sendCommand+0x5f2>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	98 a3       	std	Y+32, r25	; 0x20
    171c:	8f 8f       	std	Y+31, r24	; 0x1f
    171e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1720:	98 a1       	ldd	r25, Y+32	; 0x20
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_sendCommand+0x5e0>
    1726:	98 a3       	std	Y+32, r25	; 0x20
    1728:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	89 a1       	ldd	r24, Y+33	; 0x21
    172c:	9a a1       	ldd	r25, Y+34	; 0x22
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9a a3       	std	Y+34, r25	; 0x22
    1732:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	89 a1       	ldd	r24, Y+33	; 0x21
    1736:	9a a1       	ldd	r25, Y+34	; 0x22
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_sendCommand+0x5d4>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6b a1       	ldd	r22, Y+35	; 0x23
    1740:	7c a1       	ldd	r23, Y+36	; 0x24
    1742:	8d a1       	ldd	r24, Y+37	; 0x25
    1744:	9e a1       	ldd	r25, Y+38	; 0x26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	89 a1       	ldd	r24, Y+33	; 0x21
    1754:	9a a1       	ldd	r25, Y+34	; 0x22
    1756:	9e 8f       	std	Y+30, r25	; 0x1e
    1758:	8d 8f       	std	Y+29, r24	; 0x1d
    175a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    175c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_sendCommand+0x61c>
    1762:	9e 8f       	std	Y+30, r25	; 0x1e
    1764:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1766:	ab e3       	ldi	r26, 0x3B	; 59
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	eb e3       	ldi	r30, 0x3B	; 59
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	98 2f       	mov	r25, r24
    1772:	90 7f       	andi	r25, 0xF0	; 240
    1774:	fe 01       	movw	r30, r28
    1776:	ed 59       	subi	r30, 0x9D	; 157
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e8       	ldi	r26, 0x80	; 128
    1788:	bf e3       	ldi	r27, 0x3F	; 63
    178a:	89 8f       	std	Y+25, r24	; 0x19
    178c:	9a 8f       	std	Y+26, r25	; 0x1a
    178e:	ab 8f       	std	Y+27, r26	; 0x1b
    1790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	69 8d       	ldd	r22, Y+25	; 0x19
    1794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a ef       	ldi	r20, 0xFA	; 250
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8d 8b       	std	Y+21, r24	; 0x15
    17ac:	9e 8b       	std	Y+22, r25	; 0x16
    17ae:	af 8b       	std	Y+23, r26	; 0x17
    17b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_sendCommand+0x692>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    17d4:	6d 89       	ldd	r22, Y+21	; 0x15
    17d6:	7e 89       	ldd	r23, Y+22	; 0x16
    17d8:	8f 89       	ldd	r24, Y+23	; 0x17
    17da:	98 8d       	ldd	r25, Y+24	; 0x18
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	69 8d       	ldd	r22, Y+25	; 0x19
    17ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_sendCommand+0x6f2>
    1816:	88 ec       	ldi	r24, 0xC8	; 200
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9a 8b       	std	Y+18, r25	; 0x12
    181c:	89 8b       	std	Y+17, r24	; 0x11
    181e:	89 89       	ldd	r24, Y+17	; 0x11
    1820:	9a 89       	ldd	r25, Y+18	; 0x12
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_sendCommand+0x6e0>
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <LCD_sendCommand+0x6d4>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	98 8b       	std	Y+16, r25	; 0x10
    1858:	8f 87       	std	Y+15, r24	; 0x0f
    185a:	8f 85       	ldd	r24, Y+15	; 0x0f
    185c:	98 89       	ldd	r25, Y+16	; 0x10
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_sendCommand+0x71c>
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1866:	a8 e3       	ldi	r26, 0x38	; 56
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e8 e3       	ldi	r30, 0x38	; 56
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	87 7f       	andi	r24, 0xF7	; 247
    1872:	8c 93       	st	X, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e8       	ldi	r26, 0x80	; 128
    187a:	bf e3       	ldi	r27, 0x3F	; 63
    187c:	8b 87       	std	Y+11, r24	; 0x0b
    187e:	9c 87       	std	Y+12, r25	; 0x0c
    1880:	ad 87       	std	Y+13, r26	; 0x0d
    1882:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6b 85       	ldd	r22, Y+11	; 0x0b
    1886:	7c 85       	ldd	r23, Y+12	; 0x0c
    1888:	8d 85       	ldd	r24, Y+13	; 0x0d
    188a:	9e 85       	ldd	r25, Y+14	; 0x0e
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	98 87       	std	Y+8, r25	; 0x08
    18a0:	a9 87       	std	Y+9, r26	; 0x09
    18a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_sendCommand+0x784>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    18c6:	6f 81       	ldd	r22, Y+7	; 0x07
    18c8:	78 85       	ldd	r23, Y+8	; 0x08
    18ca:	89 85       	ldd	r24, Y+9	; 0x09
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_sendCommand+0x7e4>
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_sendCommand+0x7d2>
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_sendCommand+0x7c6>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_sendCommand+0x80e>
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1958:	cd 59       	subi	r28, 0x9D	; 157
    195a:	df 4f       	sbci	r29, 0xFF	; 255
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	c3 56       	subi	r28, 0x63	; 99
    197e:	d0 40       	sbci	r29, 0x00	; 0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	fe 01       	movw	r30, r28
    198c:	ed 59       	subi	r30, 0x9D	; 157
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1992:	a8 e3       	ldi	r26, 0x38	; 56
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e8 e3       	ldi	r30, 0x38	; 56
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	82 60       	ori	r24, 0x02	; 2
    199e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19a0:	a8 e3       	ldi	r26, 0x38	; 56
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e8 e3       	ldi	r30, 0x38	; 56
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8b 7f       	andi	r24, 0xFB	; 251
    19ac:	8c 93       	st	X, r24
    19ae:	fe 01       	movw	r30, r28
    19b0:	e1 5a       	subi	r30, 0xA1	; 161
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	bf e3       	ldi	r27, 0x3F	; 63
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	8e 01       	movw	r16, r28
    19c6:	05 5a       	subi	r16, 0xA5	; 165
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	fe 01       	movw	r30, r28
    19cc:	e1 5a       	subi	r30, 0xA1	; 161
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4a ef       	ldi	r20, 0xFA	; 250
    19de:	54 e4       	ldi	r21, 0x44	; 68
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	f8 01       	movw	r30, r16
    19ea:	80 83       	st	Z, r24
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	a2 83       	std	Z+2, r26	; 0x02
    19f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e5 5a       	subi	r30, 0xA5	; 165
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	44 f4       	brge	.+16     	; 0x1a20 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1a10:	fe 01       	movw	r30, r28
    1a12:	e7 5a       	subi	r30, 0xA7	; 167
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
    1a1e:	64 c0       	rjmp	.+200    	; 0x1ae8 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1a20:	fe 01       	movw	r30, r28
    1a22:	e5 5a       	subi	r30, 0xA5	; 165
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	0c f0       	brlt	.+2      	; 0x1a40 <LCD_displayCharacter+0xd0>
    1a3e:	43 c0       	rjmp	.+134    	; 0x1ac6 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	fe 01       	movw	r30, r28
    1a42:	e1 5a       	subi	r30, 0xA1	; 161
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8e 01       	movw	r16, r28
    1a60:	07 5a       	subi	r16, 0xA7	; 167
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	f8 01       	movw	r30, r16
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	1f c0       	rjmp	.+62     	; 0x1ab6 <LCD_displayCharacter+0x146>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e9 5a       	subi	r30, 0xA9	; 169
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	88 ec       	ldi	r24, 0xC8	; 200
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	fe 01       	movw	r30, r28
    1a88:	e9 5a       	subi	r30, 0xA9	; 169
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_displayCharacter+0x120>
    1a94:	fe 01       	movw	r30, r28
    1a96:	e9 5a       	subi	r30, 0xA9	; 169
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	de 01       	movw	r26, r28
    1aa0:	a7 5a       	subi	r26, 0xA7	; 167
    1aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 5a       	subi	r30, 0xA7	; 167
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	9c 93       	st	X, r25
    1ab4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5a       	subi	r30, 0xA7	; 167
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	d1 f6       	brne	.-76     	; 0x1a78 <LCD_displayCharacter+0x108>
    1ac4:	27 c0       	rjmp	.+78     	; 0x1b14 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	07 5a       	subi	r16, 0xA7	; 167
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	e5 5a       	subi	r30, 0xA5	; 165
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	80 83       	st	Z, r24
    1ae8:	de 01       	movw	r26, r28
    1aea:	ab 5a       	subi	r26, 0xAB	; 171
    1aec:	bf 4f       	sbci	r27, 0xFF	; 255
    1aee:	fe 01       	movw	r30, r28
    1af0:	e7 5a       	subi	r30, 0xA7	; 167
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	8d 93       	st	X+, r24
    1afa:	9c 93       	st	X, r25
    1afc:	fe 01       	movw	r30, r28
    1afe:	eb 5a       	subi	r30, 0xAB	; 171
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_displayCharacter+0x196>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	eb 5a       	subi	r30, 0xAB	; 171
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b14:	a8 e3       	ldi	r26, 0x38	; 56
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e8 e3       	ldi	r30, 0x38	; 56
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 60       	ori	r24, 0x08	; 8
    1b20:	8c 93       	st	X, r24
    1b22:	fe 01       	movw	r30, r28
    1b24:	ef 5a       	subi	r30, 0xAF	; 175
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e8       	ldi	r26, 0x80	; 128
    1b2e:	bf e3       	ldi	r27, 0x3F	; 63
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	a2 83       	std	Z+2, r26	; 0x02
    1b36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	8e 01       	movw	r16, r28
    1b3a:	03 5b       	subi	r16, 0xB3	; 179
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ef 5a       	subi	r30, 0xAF	; 175
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a ef       	ldi	r20, 0xFA	; 250
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	80 83       	st	Z, r24
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	a2 83       	std	Z+2, r26	; 0x02
    1b64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e3 5b       	subi	r30, 0xB3	; 179
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	44 f4       	brge	.+16     	; 0x1b94 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 5b       	subi	r30, 0xB5	; 181
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
    1b92:	64 c0       	rjmp	.+200    	; 0x1c5c <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1b94:	fe 01       	movw	r30, r28
    1b96:	e3 5b       	subi	r30, 0xB3	; 179
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	0c f0       	brlt	.+2      	; 0x1bb4 <LCD_displayCharacter+0x244>
    1bb2:	43 c0       	rjmp	.+134    	; 0x1c3a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ef 5a       	subi	r30, 0xAF	; 175
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	05 5b       	subi	r16, 0xB5	; 181
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	f8 01       	movw	r30, r16
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	1f c0       	rjmp	.+62     	; 0x1c2a <LCD_displayCharacter+0x2ba>
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 5b       	subi	r30, 0xB7	; 183
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	88 ec       	ldi	r24, 0xC8	; 200
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e7 5b       	subi	r30, 0xB7	; 183
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_displayCharacter+0x294>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 5b       	subi	r30, 0xB7	; 183
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c12:	de 01       	movw	r26, r28
    1c14:	a5 5b       	subi	r26, 0xB5	; 181
    1c16:	bf 4f       	sbci	r27, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e5 5b       	subi	r30, 0xB5	; 181
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	9c 93       	st	X, r25
    1c28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e5 5b       	subi	r30, 0xB5	; 181
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	d1 f6       	brne	.-76     	; 0x1bec <LCD_displayCharacter+0x27c>
    1c38:	27 c0       	rjmp	.+78     	; 0x1c88 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	05 5b       	subi	r16, 0xB5	; 181
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	e3 5b       	subi	r30, 0xB3	; 179
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	de 01       	movw	r26, r28
    1c5e:	a9 5b       	subi	r26, 0xB9	; 185
    1c60:	bf 4f       	sbci	r27, 0xFF	; 255
    1c62:	fe 01       	movw	r30, r28
    1c64:	e5 5b       	subi	r30, 0xB5	; 181
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	91 81       	ldd	r25, Z+1	; 0x01
    1c6c:	8d 93       	st	X+, r24
    1c6e:	9c 93       	st	X, r25
    1c70:	fe 01       	movw	r30, r28
    1c72:	e9 5b       	subi	r30, 0xB9	; 185
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_displayCharacter+0x30a>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e9 5b       	subi	r30, 0xB9	; 185
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1c88:	ab e3       	ldi	r26, 0x3B	; 59
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	eb e3       	ldi	r30, 0x3B	; 59
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	98 2f       	mov	r25, r24
    1c94:	90 7f       	andi	r25, 0xF0	; 240
    1c96:	fe 01       	movw	r30, r28
    1c98:	ed 59       	subi	r30, 0x9D	; 157
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	82 95       	swap	r24
    1ca0:	8f 70       	andi	r24, 0x0F	; 15
    1ca2:	89 2b       	or	r24, r25
    1ca4:	8c 93       	st	X, r24
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ed 5b       	subi	r30, 0xBD	; 189
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e8       	ldi	r26, 0x80	; 128
    1cb2:	bf e3       	ldi	r27, 0x3F	; 63
    1cb4:	80 83       	st	Z, r24
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	a2 83       	std	Z+2, r26	; 0x02
    1cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	8e 01       	movw	r16, r28
    1cbe:	01 5c       	subi	r16, 0xC1	; 193
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ed 5b       	subi	r30, 0xBD	; 189
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4a ef       	ldi	r20, 0xFA	; 250
    1cd6:	54 e4       	ldi	r21, 0x44	; 68
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 83       	st	Z, r24
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	a2 83       	std	Z+2, r26	; 0x02
    1ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cea:	fe 01       	movw	r30, r28
    1cec:	ff 96       	adiw	r30, 0x3f	; 63
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e af       	std	Y+62, r25	; 0x3e
    1d0c:	8d af       	std	Y+61, r24	; 0x3d
    1d0e:	46 c0       	rjmp	.+140    	; 0x1d9c <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    1d10:	fe 01       	movw	r30, r28
    1d12:	ff 96       	adiw	r30, 0x3f	; 63
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	64 f5       	brge	.+88     	; 0x1d84 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 5b       	subi	r30, 0xBD	; 189
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9e af       	std	Y+62, r25	; 0x3e
    1d58:	8d af       	std	Y+61, r24	; 0x3d
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <LCD_displayCharacter+0x40a>
    1d5c:	88 ec       	ldi	r24, 0xC8	; 200
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9c af       	std	Y+60, r25	; 0x3c
    1d62:	8b af       	std	Y+59, r24	; 0x3b
    1d64:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d66:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_displayCharacter+0x3f8>
    1d6c:	9c af       	std	Y+60, r25	; 0x3c
    1d6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9e af       	std	Y+62, r25	; 0x3e
    1d78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <LCD_displayCharacter+0x3ec>
    1d82:	16 c0       	rjmp	.+44     	; 0x1db0 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	fe 01       	movw	r30, r28
    1d86:	ff 96       	adiw	r30, 0x3f	; 63
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9e af       	std	Y+62, r25	; 0x3e
    1d9a:	8d af       	std	Y+61, r24	; 0x3d
    1d9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da0:	9a af       	std	Y+58, r25	; 0x3a
    1da2:	89 af       	std	Y+57, r24	; 0x39
    1da4:	89 ad       	ldd	r24, Y+57	; 0x39
    1da6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_displayCharacter+0x438>
    1dac:	9a af       	std	Y+58, r25	; 0x3a
    1dae:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1db0:	a8 e3       	ldi	r26, 0x38	; 56
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e8 e3       	ldi	r30, 0x38	; 56
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	87 7f       	andi	r24, 0xF7	; 247
    1dbc:	8c 93       	st	X, r24
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	8d ab       	std	Y+53, r24	; 0x35
    1dc8:	9e ab       	std	Y+54, r25	; 0x36
    1dca:	af ab       	std	Y+55, r26	; 0x37
    1dcc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	89 ab       	std	Y+49, r24	; 0x31
    1de8:	9a ab       	std	Y+50, r25	; 0x32
    1dea:	ab ab       	std	Y+51, r26	; 0x33
    1dec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dee:	69 a9       	ldd	r22, Y+49	; 0x31
    1df0:	7a a9       	ldd	r23, Y+50	; 0x32
    1df2:	8b a9       	ldd	r24, Y+51	; 0x33
    1df4:	9c a9       	ldd	r25, Y+52	; 0x34
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1e10:	69 a9       	ldd	r22, Y+49	; 0x31
    1e12:	7a a9       	ldd	r23, Y+50	; 0x32
    1e14:	8b a9       	ldd	r24, Y+51	; 0x33
    1e16:	9c a9       	ldd	r25, Y+52	; 0x34
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6d a9       	ldd	r22, Y+53	; 0x35
    1e2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_displayCharacter+0x500>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9e a7       	std	Y+46, r25	; 0x2e
    1e58:	8d a7       	std	Y+45, r24	; 0x2d
    1e5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_displayCharacter+0x4ee>
    1e62:	9e a7       	std	Y+46, r25	; 0x2e
    1e64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e68:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	98 ab       	std	Y+48, r25	; 0x30
    1e6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e72:	98 a9       	ldd	r25, Y+48	; 0x30
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_displayCharacter+0x4e2>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e80:	9c a9       	ldd	r25, Y+52	; 0x34
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e90:	98 a9       	ldd	r25, Y+48	; 0x30
    1e92:	9c a7       	std	Y+44, r25	; 0x2c
    1e94:	8b a7       	std	Y+43, r24	; 0x2b
    1e96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_displayCharacter+0x52a>
    1e9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ea0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ea2:	a8 e3       	ldi	r26, 0x38	; 56
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e8 e3       	ldi	r30, 0x38	; 56
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 60       	ori	r24, 0x08	; 8
    1eae:	8c 93       	st	X, r24
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	bf e3       	ldi	r27, 0x3F	; 63
    1eb8:	8f a3       	std	Y+39, r24	; 0x27
    1eba:	98 a7       	std	Y+40, r25	; 0x28
    1ebc:	a9 a7       	std	Y+41, r26	; 0x29
    1ebe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8b a3       	std	Y+35, r24	; 0x23
    1eda:	9c a3       	std	Y+36, r25	; 0x24
    1edc:	ad a3       	std	Y+37, r26	; 0x25
    1ede:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_displayCharacter+0x592>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1f02:	6b a1       	ldd	r22, Y+35	; 0x23
    1f04:	7c a1       	ldd	r23, Y+36	; 0x24
    1f06:	8d a1       	ldd	r24, Y+37	; 0x25
    1f08:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9a a3       	std	Y+34, r25	; 0x22
    1f40:	89 a3       	std	Y+33, r24	; 0x21
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_displayCharacter+0x5f2>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	98 a3       	std	Y+32, r25	; 0x20
    1f4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_displayCharacter+0x5e0>
    1f54:	98 a3       	std	Y+32, r25	; 0x20
    1f56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_displayCharacter+0x5d4>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	9e 8f       	std	Y+30, r25	; 0x1e
    1f86:	8d 8f       	std	Y+29, r24	; 0x1d
    1f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_displayCharacter+0x61c>
    1f90:	9e 8f       	std	Y+30, r25	; 0x1e
    1f92:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    1f94:	ab e3       	ldi	r26, 0x3B	; 59
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	eb e3       	ldi	r30, 0x3B	; 59
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	90 7f       	andi	r25, 0xF0	; 240
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ed 59       	subi	r30, 0x9D	; 157
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 70       	andi	r24, 0x0F	; 15
    1fac:	89 2b       	or	r24, r25
    1fae:	8c 93       	st	X, r24
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	89 8f       	std	Y+25, r24	; 0x19
    1fba:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8d 8b       	std	Y+21, r24	; 0x15
    1fda:	9e 8b       	std	Y+22, r25	; 0x16
    1fdc:	af 8b       	std	Y+23, r26	; 0x17
    1fde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <LCD_displayCharacter+0x692>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	69 8d       	ldd	r22, Y+25	; 0x19
    201c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <LCD_displayCharacter+0x6f2>
    2044:	88 ec       	ldi	r24, 0xC8	; 200
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
    204c:	89 89       	ldd	r24, Y+17	; 0x11
    204e:	9a 89       	ldd	r25, Y+18	; 0x12
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_displayCharacter+0x6e0>
    2054:	9a 8b       	std	Y+18, r25	; 0x12
    2056:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_displayCharacter+0x6d4>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	9c 89       	ldd	r25, Y+20	; 0x14
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
    2088:	8f 85       	ldd	r24, Y+15	; 0x0f
    208a:	98 89       	ldd	r25, Y+16	; 0x10
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_displayCharacter+0x71c>
    2090:	98 8b       	std	Y+16, r25	; 0x10
    2092:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	87 7f       	andi	r24, 0xF7	; 247
    20a0:	8c 93       	st	X, r24
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	8b 87       	std	Y+11, r24	; 0x0b
    20ac:	9c 87       	std	Y+12, r25	; 0x0c
    20ae:	ad 87       	std	Y+13, r26	; 0x0d
    20b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8f 83       	std	Y+7, r24	; 0x07
    20cc:	98 87       	std	Y+8, r25	; 0x08
    20ce:	a9 87       	std	Y+9, r26	; 0x09
    20d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_displayCharacter+0x784>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_displayCharacter+0x7e4>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_displayCharacter+0x7d2>
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_displayCharacter+0x7c6>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_displayCharacter+0x80e>
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2186:	cd 59       	subi	r28, 0x9D	; 157
    2188:	df 4f       	sbci	r29, 0xFF	; 255
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <LCD_displayString+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9b 83       	std	Y+3, r25	; 0x03
    21ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21ae:	19 82       	std	Y+1, r1	; 0x01
    21b0:	0e c0       	rjmp	.+28     	; 0x21ce <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	80 81       	ld	r24, Z
    21c4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <LCD_displayCharacter>
		i++;
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	fc 01       	movw	r30, r24
    21da:	e2 0f       	add	r30, r18
    21dc:	f3 1f       	adc	r31, r19
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	39 f7       	brne	.-50     	; 0x21b2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <LCD_goToRowColumn+0x6>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <LCD_goToRowColumn+0x8>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3d 83       	std	Y+5, r19	; 0x05
    220a:	2c 83       	std	Y+4, r18	; 0x04
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	91 05       	cpc	r25, r1
    2214:	c1 f0       	breq	.+48     	; 0x2246 <LCD_goToRowColumn+0x56>
    2216:	2c 81       	ldd	r18, Y+4	; 0x04
    2218:	3d 81       	ldd	r19, Y+5	; 0x05
    221a:	22 30       	cpi	r18, 0x02	; 2
    221c:	31 05       	cpc	r19, r1
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_goToRowColumn+0x3a>
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	9d 81       	ldd	r25, Y+5	; 0x05
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	61 f0       	breq	.+24     	; 0x2240 <LCD_goToRowColumn+0x50>
    2228:	19 c0       	rjmp	.+50     	; 0x225c <LCD_goToRowColumn+0x6c>
    222a:	2c 81       	ldd	r18, Y+4	; 0x04
    222c:	3d 81       	ldd	r19, Y+5	; 0x05
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	69 f0       	breq	.+26     	; 0x224e <LCD_goToRowColumn+0x5e>
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	83 30       	cpi	r24, 0x03	; 3
    223a:	91 05       	cpc	r25, r1
    223c:	61 f0       	breq	.+24     	; 0x2256 <LCD_goToRowColumn+0x66>
    223e:	0e c0       	rjmp	.+28     	; 0x225c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	0b c0       	rjmp	.+22     	; 0x225c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	80 5c       	subi	r24, 0xC0	; 192
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	07 c0       	rjmp	.+14     	; 0x225c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	80 5f       	subi	r24, 0xF0	; 240
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	03 c0       	rjmp	.+6      	; 0x225c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	80 5b       	subi	r24, 0xB0	; 176
    225a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	80 68       	ori	r24, 0x80	; 128
    2260:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <LCD_displayStringRowColumn+0x6>
    227a:	00 d0       	rcall	.+0      	; 0x227c <LCD_displayStringRowColumn+0x8>
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	6a 83       	std	Y+2, r22	; 0x02
    2284:	5c 83       	std	Y+4, r21	; 0x04
    2286:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	6a 81       	ldd	r22, Y+2	; 0x02
    228c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_displayString>
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	62 97       	sbiw	r28, 0x12	; 18
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    22be:	89 89       	ldd	r24, Y+17	; 0x11
    22c0:	9a 89       	ldd	r25, Y+18	; 0x12
    22c2:	9e 01       	movw	r18, r28
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	b9 01       	movw	r22, r18
    22ca:	4a e0       	ldi	r20, 0x0A	; 10
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	0e 94 c3 1a 	call	0x3586	; 0x3586 <itoa>
   LCD_displayString(buff);
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_displayString>
}
    22da:	62 96       	adiw	r28, 0x12	; 18
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_sendCommand>
}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <takePassword>:
volatile uint8 g_error_flag = 0;
volatile uint8 g_timeCount = 0;            /*variable used to count time*/
volatile uint8 g_sec_Count = 0;            /*variable used to count number of seconds*/
/* FUNCTION to get password from user and check 2 password and save it*/
void takePassword(void)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	c3 55       	subi	r28, 0x53	; 83
    230a:	d0 40       	sbci	r29, 0x00	; 0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                          LOCAL VARIABLE                                  *
	 *******************************************************************************/
	uint8 a_key = 0;                                        /*variable used to receive password*/
    2316:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 a_count;                                          /*variable used to count received password*/
	uint8 a_Pass[6]  , a_rePass[6];                         /*variable used to save password*/
	uint8 a_strPass[6], a_str_rePass[6];                    /*variable used to save password as string*/
	uint8 a_strCompare = 0;                                 /*variable used to know if 2enter password are match or not*/
    2318:	19 ae       	std	Y+57, r1	; 0x39


	LCD_clearScreen();           /*clear lcd*/
    231a:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new pass:");
    231e:	20 e6       	ldi	r18, 0x60	; 96
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	a9 01       	movw	r20, r18
    2328:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    232c:	1a ae       	std	Y+58, r1	; 0x3a
    232e:	a6 c0       	rjmp	.+332    	; 0x247c <takePassword+0x17c>
	{
		 /*get password*/
		a_key = KeyPad_getPressedKey();
    2330:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    2334:	8b af       	std	Y+59, r24	; 0x3b
    2336:	03 c0       	rjmp	.+6      	; 0x233e <takePassword+0x3e>
		/*wait until user press enter*/
		while(!((a_key >= 0) && (a_key <= 9)))
		{
			a_key = KeyPad_getPressedKey();
    2338:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    233c:	8b af       	std	Y+59, r24	; 0x3b
	for(a_count = 0; a_count < 5; a_count++)
	{
		 /*get password*/
		a_key = KeyPad_getPressedKey();
		/*wait until user press enter*/
		while(!((a_key >= 0) && (a_key <= 9)))
    233e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2340:	8a 30       	cpi	r24, 0x0A	; 10
    2342:	d0 f7       	brcc	.-12     	; 0x2338 <takePassword+0x38>
			a_key = KeyPad_getPressedKey();
		}

		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_key);*/
		LCD_displayStringRowColumn(1,a_count + 3,"*");
    2344:	8a ad       	ldd	r24, Y+58	; 0x3a
    2346:	98 2f       	mov	r25, r24
    2348:	9d 5f       	subi	r25, 0xFD	; 253
    234a:	20 e7       	ldi	r18, 0x70	; 112
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	69 2f       	mov	r22, r25
    2352:	a9 01       	movw	r20, r18
    2354:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>

		a_Pass[a_count] = a_key;
    2358:	8a ad       	ldd	r24, Y+58	; 0x3a
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	ce 01       	movw	r24, r28
    2360:	cc 96       	adiw	r24, 0x3c	; 60
    2362:	fc 01       	movw	r30, r24
    2364:	e2 0f       	add	r30, r18
    2366:	f3 1f       	adc	r31, r19
    2368:	8b ad       	ldd	r24, Y+59	; 0x3b
    236a:	80 83       	st	Z, r24
		itoa(a_Pass[a_count], a_strPass, 10);
    236c:	8a ad       	ldd	r24, Y+58	; 0x3a
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	ce 01       	movw	r24, r28
    2374:	cc 96       	adiw	r24, 0x3c	; 60
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e 01       	movw	r18, r28
    2384:	28 5b       	subi	r18, 0xB8	; 184
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	b9 01       	movw	r22, r18
    238a:	4a e0       	ldi	r20, 0x0A	; 10
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <itoa>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	aa ef       	ldi	r26, 0xFA	; 250
    2398:	b3 e4       	ldi	r27, 0x43	; 67
    239a:	8d ab       	std	Y+53, r24	; 0x35
    239c:	9e ab       	std	Y+54, r25	; 0x36
    239e:	af ab       	std	Y+55, r26	; 0x37
    23a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6d a9       	ldd	r22, Y+53	; 0x35
    23a4:	7e a9       	ldd	r23, Y+54	; 0x36
    23a6:	8f a9       	ldd	r24, Y+55	; 0x37
    23a8:	98 ad       	ldd	r25, Y+56	; 0x38
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	89 ab       	std	Y+49, r24	; 0x31
    23bc:	9a ab       	std	Y+50, r25	; 0x32
    23be:	ab ab       	std	Y+51, r26	; 0x33
    23c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c2:	69 a9       	ldd	r22, Y+49	; 0x31
    23c4:	7a a9       	ldd	r23, Y+50	; 0x32
    23c6:	8b a9       	ldd	r24, Y+51	; 0x33
    23c8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <takePassword+0xe4>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	98 ab       	std	Y+48, r25	; 0x30
    23e0:	8f a7       	std	Y+47, r24	; 0x2f
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <takePassword+0x162>
	else if (__tmp > 65535)
    23e4:	69 a9       	ldd	r22, Y+49	; 0x31
    23e6:	7a a9       	ldd	r23, Y+50	; 0x32
    23e8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ea:	9c a9       	ldd	r25, Y+52	; 0x34
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <takePassword+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6d a9       	ldd	r22, Y+53	; 0x35
    23fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2400:	8f a9       	ldd	r24, Y+55	; 0x37
    2402:	98 ad       	ldd	r25, Y+56	; 0x38
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 ab       	std	Y+48, r25	; 0x30
    2422:	8f a7       	std	Y+47, r24	; 0x2f
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <takePassword+0x144>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e a7       	std	Y+46, r25	; 0x2e
    242c:	8d a7       	std	Y+45, r24	; 0x2d
    242e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2430:	9e a5       	ldd	r25, Y+46	; 0x2e
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <takePassword+0x132>
    2436:	9e a7       	std	Y+46, r25	; 0x2e
    2438:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	98 ab       	std	Y+48, r25	; 0x30
    2442:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8f a5       	ldd	r24, Y+47	; 0x2f
    2446:	98 a9       	ldd	r25, Y+48	; 0x30
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <takePassword+0x126>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <takePassword+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	8f a5       	ldd	r24, Y+47	; 0x2f
    2464:	98 a9       	ldd	r25, Y+48	; 0x30
    2466:	9c a7       	std	Y+44, r25	; 0x2c
    2468:	8b a7       	std	Y+43, r24	; 0x2b
    246a:	8b a5       	ldd	r24, Y+43	; 0x2b
    246c:	9c a5       	ldd	r25, Y+44	; 0x2c
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <takePassword+0x16e>
    2472:	9c a7       	std	Y+44, r25	; 0x2c
    2474:	8b a7       	std	Y+43, r24	; 0x2b


	LCD_clearScreen();           /*clear lcd*/
	LCD_displayStringRowColumn(0,0,"Enter new pass:");
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    2476:	8a ad       	ldd	r24, Y+58	; 0x3a
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	8a af       	std	Y+58, r24	; 0x3a
    247c:	8a ad       	ldd	r24, Y+58	; 0x3a
    247e:	85 30       	cpi	r24, 0x05	; 5
    2480:	08 f4       	brcc	.+2      	; 0x2484 <takePassword+0x184>
    2482:	56 cf       	rjmp	.-340    	; 0x2330 <takePassword+0x30>

		a_Pass[a_count] = a_key;
		itoa(a_Pass[a_count], a_strPass, 10);
		_delay_ms(500);
	}
	while (KeyPad_getPressedKey() != 13){}
    2484:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    2488:	8d 30       	cpi	r24, 0x0D	; 13
    248a:	e1 f7       	brne	.-8      	; 0x2484 <takePassword+0x184>


	LCD_clearScreen();         /*clear lcd*/
    248c:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	/*ask user reenter new password*/
	LCD_displayStringRowColumn(0,0,"ReEnter pass:");
    2490:	22 e7       	ldi	r18, 0x72	; 114
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	a9 01       	movw	r20, r18
    249a:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    249e:	1a ae       	std	Y+58, r1	; 0x3a
    24a0:	a8 c0       	rjmp	.+336    	; 0x25f2 <takePassword+0x2f2>
	{
		 /*get password*/
		a_key = KeyPad_getPressedKey();
    24a2:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    24a6:	8b af       	std	Y+59, r24	; 0x3b
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <takePassword+0x1b0>
		/*wait until user press number from 0 to 9*/
		while(!((a_key >= 0) && (a_key <= 9)))
		{
			a_key = KeyPad_getPressedKey();
    24aa:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    24ae:	8b af       	std	Y+59, r24	; 0x3b
	for(a_count = 0; a_count < 5; a_count++)
	{
		 /*get password*/
		a_key = KeyPad_getPressedKey();
		/*wait until user press number from 0 to 9*/
		while(!((a_key >= 0) && (a_key <= 9)))
    24b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24b2:	8a 30       	cpi	r24, 0x0A	; 10
    24b4:	d0 f7       	brcc	.-12     	; 0x24aa <takePassword+0x1aa>
		}

		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_key);*/
		/*ask user reenter new password*/
		LCD_displayStringRowColumn(1,a_count + 3,"*");
    24b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    24b8:	98 2f       	mov	r25, r24
    24ba:	9d 5f       	subi	r25, 0xFD	; 253
    24bc:	20 e7       	ldi	r18, 0x70	; 112
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	69 2f       	mov	r22, r25
    24c4:	a9 01       	movw	r20, r18
    24c6:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>

		a_rePass[a_count] = a_key;                            /*save password in array*/
    24ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	ce 01       	movw	r24, r28
    24d2:	8e 5b       	subi	r24, 0xBE	; 190
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	fc 01       	movw	r30, r24
    24d8:	e2 0f       	add	r30, r18
    24da:	f3 1f       	adc	r31, r19
    24dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    24de:	80 83       	st	Z, r24
		itoa(a_rePass[a_count], a_str_rePass, 10);            /*convert password to string*/
    24e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	ce 01       	movw	r24, r28
    24e8:	8e 5b       	subi	r24, 0xBE	; 190
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	80 81       	ld	r24, Z
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 01       	movw	r18, r28
    24fa:	22 5b       	subi	r18, 0xB2	; 178
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	b9 01       	movw	r22, r18
    2500:	4a e0       	ldi	r20, 0x0A	; 10
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	0e 94 c3 1a 	call	0x3586	; 0x3586 <itoa>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	aa ef       	ldi	r26, 0xFA	; 250
    250e:	b3 e4       	ldi	r27, 0x43	; 67
    2510:	8f a3       	std	Y+39, r24	; 0x27
    2512:	98 a7       	std	Y+40, r25	; 0x28
    2514:	a9 a7       	std	Y+41, r26	; 0x29
    2516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6f a1       	ldd	r22, Y+39	; 0x27
    251a:	78 a5       	ldd	r23, Y+40	; 0x28
    251c:	89 a5       	ldd	r24, Y+41	; 0x29
    251e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8b a3       	std	Y+35, r24	; 0x23
    2532:	9c a3       	std	Y+36, r25	; 0x24
    2534:	ad a3       	std	Y+37, r26	; 0x25
    2536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2538:	6b a1       	ldd	r22, Y+35	; 0x23
    253a:	7c a1       	ldd	r23, Y+36	; 0x24
    253c:	8d a1       	ldd	r24, Y+37	; 0x25
    253e:	9e a1       	ldd	r25, Y+38	; 0x26
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <takePassword+0x25a>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <takePassword+0x2d8>
	else if (__tmp > 65535)
    255a:	6b a1       	ldd	r22, Y+35	; 0x23
    255c:	7c a1       	ldd	r23, Y+36	; 0x24
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <takePassword+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <takePassword+0x2ba>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
    25a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a6:	98 a1       	ldd	r25, Y+32	; 0x20
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <takePassword+0x2a8>
    25ac:	98 a3       	std	Y+32, r25	; 0x20
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	9a a1       	ldd	r25, Y+34	; 0x22
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <takePassword+0x29c>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <takePassword+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6b a1       	ldd	r22, Y+35	; 0x23
    25c6:	7c a1       	ldd	r23, Y+36	; 0x24
    25c8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ca:	9e a1       	ldd	r25, Y+38	; 0x26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
    25e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <takePassword+0x2e4>
    25e8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ea:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_clearScreen();         /*clear lcd*/
	/*ask user reenter new password*/
	LCD_displayStringRowColumn(0,0,"ReEnter pass:");
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    25ec:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	8a af       	std	Y+58, r24	; 0x3a
    25f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    25f4:	85 30       	cpi	r24, 0x05	; 5
    25f6:	08 f4       	brcc	.+2      	; 0x25fa <takePassword+0x2fa>
    25f8:	54 cf       	rjmp	.-344    	; 0x24a2 <takePassword+0x1a2>

		a_rePass[a_count] = a_key;                            /*save password in array*/
		itoa(a_rePass[a_count], a_str_rePass, 10);            /*convert password to string*/
		_delay_ms(500);
	}
	while (KeyPad_getPressedKey() != 13){}     /*wait until user press enter*/
    25fa:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    25fe:	8d 30       	cpi	r24, 0x0D	; 13
    2600:	e1 f7       	brne	.-8      	; 0x25fa <takePassword+0x2fa>

	a_strCompare = strcmp(a_strPass, a_str_rePass);    /*check password*/
    2602:	ce 01       	movw	r24, r28
    2604:	88 5b       	subi	r24, 0xB8	; 184
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	9e 01       	movw	r18, r28
    260a:	22 5b       	subi	r18, 0xB2	; 178
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 ba 1a 	call	0x3574	; 0x3574 <strcmp>
    2614:	89 af       	std	Y+57, r24	; 0x39
	/*if 2 password are match*/
	if (a_strCompare == 0)
    2616:	89 ad       	ldd	r24, Y+57	; 0x39
    2618:	88 23       	and	r24, r24
    261a:	09 f0       	breq	.+2      	; 0x261e <takePassword+0x31e>
    261c:	a1 c0       	rjmp	.+322    	; 0x2760 <takePassword+0x460>
	{
		LCD_clearScreen();          /*clear lcd*/
    261e:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 3, "password");
    2622:	20 e8       	ldi	r18, 0x80	; 128
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	63 e0       	ldi	r22, 0x03	; 3
    262a:	a9 01       	movw	r20, r18
    262c:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 4, "Match");
    2630:	29 e8       	ldi	r18, 0x89	; 137
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	64 e0       	ldi	r22, 0x04	; 4
    2638:	a9 01       	movw	r20, r18
    263a:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a8 e4       	ldi	r26, 0x48	; 72
    2644:	b3 e4       	ldi	r27, 0x43	; 67
    2646:	89 8f       	std	Y+25, r24	; 0x19
    2648:	9a 8f       	std	Y+26, r25	; 0x1a
    264a:	ab 8f       	std	Y+27, r26	; 0x1b
    264c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	69 8d       	ldd	r22, Y+25	; 0x19
    2650:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4a ef       	ldi	r20, 0xFA	; 250
    265c:	54 e4       	ldi	r21, 0x44	; 68
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8d 8b       	std	Y+21, r24	; 0x15
    2668:	9e 8b       	std	Y+22, r25	; 0x16
    266a:	af 8b       	std	Y+23, r26	; 0x17
    266c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	2c f4       	brge	.+10     	; 0x2690 <takePassword+0x390>
		__ticks = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
    268e:	3f c0       	rjmp	.+126    	; 0x270e <takePassword+0x40e>
	else if (__tmp > 65535)
    2690:	6d 89       	ldd	r22, Y+21	; 0x15
    2692:	7e 89       	ldd	r23, Y+22	; 0x16
    2694:	8f 89       	ldd	r24, Y+23	; 0x17
    2696:	98 8d       	ldd	r25, Y+24	; 0x18
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	4c f5       	brge	.+82     	; 0x26fa <takePassword+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a8:	69 8d       	ldd	r22, Y+25	; 0x19
    26aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <takePassword+0x3f0>
    26d2:	88 ec       	ldi	r24, 0xC8	; 200
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9a 8b       	std	Y+18, r25	; 0x12
    26d8:	89 8b       	std	Y+17, r24	; 0x11
    26da:	89 89       	ldd	r24, Y+17	; 0x11
    26dc:	9a 89       	ldd	r25, Y+18	; 0x12
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <takePassword+0x3de>
    26e2:	9a 8b       	std	Y+18, r25	; 0x12
    26e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	8b 89       	ldd	r24, Y+19	; 0x13
    26e8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	9c 8b       	std	Y+20, r25	; 0x14
    26ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	8b 89       	ldd	r24, Y+19	; 0x13
    26f2:	9c 89       	ldd	r25, Y+20	; 0x14
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <takePassword+0x3d2>
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <takePassword+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9c 8b       	std	Y+20, r25	; 0x14
    270c:	8b 8b       	std	Y+19, r24	; 0x13
    270e:	8b 89       	ldd	r24, Y+19	; 0x13
    2710:	9c 89       	ldd	r25, Y+20	; 0x14
    2712:	98 8b       	std	Y+16, r25	; 0x10
    2714:	8f 87       	std	Y+15, r24	; 0x0f
    2716:	8f 85       	ldd	r24, Y+15	; 0x0f
    2718:	98 89       	ldd	r25, Y+16	; 0x10
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <takePassword+0x41a>
    271e:	98 8b       	std	Y+16, r25	; 0x10
    2720:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);


		UART_sendByte(Begin);
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
		for(a_count = 0; a_count < 5; a_count++)
    2728:	1a ae       	std	Y+58, r1	; 0x3a
    272a:	12 c0       	rjmp	.+36     	; 0x2750 <takePassword+0x450>
		{
			/*MCU1 send to MCU2 to start take password*/
			while(UART_recieveByte()!= M2_READY){};
    272c:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	e1 f7       	brne	.-8      	; 0x272c <takePassword+0x42c>
			/*MCU1 Send password to MCU2*/
			UART_sendByte(a_Pass[a_count]);
    2734:	8a ad       	ldd	r24, Y+58	; 0x3a
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	ce 01       	movw	r24, r28
    273c:	cc 96       	adiw	r24, 0x3c	; 60
    273e:	fc 01       	movw	r30, r24
    2740:	e2 0f       	add	r30, r18
    2742:	f3 1f       	adc	r31, r19
    2744:	80 81       	ld	r24, Z
    2746:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
		LCD_displayStringRowColumn(1, 4, "Match");
		_delay_ms(200);


		UART_sendByte(Begin);
		for(a_count = 0; a_count < 5; a_count++)
    274a:	8a ad       	ldd	r24, Y+58	; 0x3a
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	8a af       	std	Y+58, r24	; 0x3a
    2750:	8a ad       	ldd	r24, Y+58	; 0x3a
    2752:	85 30       	cpi	r24, 0x05	; 5
    2754:	58 f3       	brcs	.-42     	; 0x272c <takePassword+0x42c>
			while(UART_recieveByte()!= M2_READY){};
			/*MCU1 Send password to MCU2*/
			UART_sendByte(a_Pass[a_count]);
		}
		/*MCU1 wait until MCU2 be end*/
		while(UART_recieveByte()!= End);
    2756:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    275a:	84 30       	cpi	r24, 0x04	; 4
    275c:	e1 f7       	brne	.-8      	; 0x2756 <takePassword+0x456>
    275e:	84 c0       	rjmp	.+264    	; 0x2868 <takePassword+0x568>

	}
	else
	{
		LCD_clearScreen();           /*clear lcd*/
    2760:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "pass NOT MATCH");
    2764:	2f e8       	ldi	r18, 0x8F	; 143
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	a9 01       	movw	r20, r18
    276e:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Please ReEnter");
    2772:	2e e9       	ldi	r18, 0x9E	; 158
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	a9 01       	movw	r20, r18
    277c:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a6 e9       	ldi	r26, 0x96	; 150
    2786:	b3 e4       	ldi	r27, 0x43	; 67
    2788:	8b 87       	std	Y+11, r24	; 0x0b
    278a:	9c 87       	std	Y+12, r25	; 0x0c
    278c:	ad 87       	std	Y+13, r26	; 0x0d
    278e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a ef       	ldi	r20, 0xFA	; 250
    279e:	54 e4       	ldi	r21, 0x44	; 68
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8f 83       	std	Y+7, r24	; 0x07
    27aa:	98 87       	std	Y+8, r25	; 0x08
    27ac:	a9 87       	std	Y+9, r26	; 0x09
    27ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <takePassword+0x4d2>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <takePassword+0x550>
	else if (__tmp > 65535)
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <takePassword+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <takePassword+0x532>
    2814:	88 ec       	ldi	r24, 0xC8	; 200
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <takePassword+0x520>
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <takePassword+0x514>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <takePassword+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <takePassword+0x55c>
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		/*if password not match go back to tack password again from user*/
		takePassword();
    2864:	0e 94 80 11 	call	0x2300	; 0x2300 <takePassword>
	}
}
    2868:	cd 5a       	subi	r28, 0xAD	; 173
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <changePass>:

/* FUNCTION to ask user if he want to chande password or open the door*/
void changePass(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	0f 92       	push	r0
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
	/*******************************************************************************
		 *                          LOCAL VARIABLE                                  *
		 *******************************************************************************/
	uint8 a_key = 0;                   /*variable used to receive password*/
    2886:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();             /*clear lcd*/
    2888:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	/*ask user if he want to change password or open door*/
	LCD_displayStringRowColumn(0, 0, "+ : Change Pass");
    288c:	2d ea       	ldi	r18, 0xAD	; 173
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	a9 01       	movw	r20, r18
    2896:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- :Open the Door");
    289a:	2d eb       	ldi	r18, 0xBD	; 189
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	a9 01       	movw	r20, r18
    28a4:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	/*save enter password in key*/
	a_key = KeyPad_getPressedKey();
    28a8:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <changePass+0x3a>
	/*wait until user enter + or -*/
	while (!(a_key == '+' || a_key == '-'))
	{
		a_key = KeyPad_getPressedKey();
    28b0:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    28b4:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0, 0, "+ : Change Pass");
	LCD_displayStringRowColumn(1, 0, "- :Open the Door");
	/*save enter password in key*/
	a_key = KeyPad_getPressedKey();
	/*wait until user enter + or -*/
	while (!(a_key == '+' || a_key == '-'))
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	8b 32       	cpi	r24, 0x2B	; 43
    28ba:	19 f0       	breq	.+6      	; 0x28c2 <changePass+0x46>
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8d 32       	cpi	r24, 0x2D	; 45
    28c0:	b9 f7       	brne	.-18     	; 0x28b0 <changePass+0x34>
	{
		a_key = KeyPad_getPressedKey();
	}
	/*send password to compare function to compare it with saved password*/
	comparePass();
    28c2:	0e 94 80 14 	call	0x2900	; 0x2900 <comparePass>
	/*send number of error to MCU2*/
	UART_sendByte(g_error_flag);
    28c6:	80 91 1c 01 	lds	r24, 0x011C
    28ca:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
	/*if received error counter = 0 */
	if(g_error_flag == 0)
    28ce:	80 91 1c 01 	lds	r24, 0x011C
    28d2:	88 23       	and	r24, r24
    28d4:	79 f4       	brne	.+30     	; 0x28f4 <changePass+0x78>
	{
		/*MCU1 send + or - to MCU2 */
		UART_sendByte(a_key);
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>

		if(a_key == '+')
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	8b 32       	cpi	r24, 0x2B	; 43
    28e0:	19 f4       	brne	.+6      	; 0x28e8 <changePass+0x6c>
		{
			 /*IF user enter + that mean go to take new password*/
			takePassword();
    28e2:	0e 94 80 11 	call	0x2300	; 0x2300 <takePassword>
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <changePass+0x7c>
		}
		else if(a_key == '-')
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	8d 32       	cpi	r24, 0x2D	; 45
    28ec:	29 f4       	brne	.+10     	; 0x28f8 <changePass+0x7c>
		{
			/*IF user enter - that mean go to open door*/
			OpenDoor();
    28ee:	0e 94 10 16 	call	0x2c20	; 0x2c20 <OpenDoor>
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <changePass+0x7c>
		}
	}
	else
	{
		/*IF error counter not equal 0 */
		g_error_flag = 0;
    28f4:	10 92 1c 01 	sts	0x011C, r1
	}
}
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <comparePass>:

/* FUNCTION to compare 2 password one that user entered and anther that we saved before */
void comparePass(void)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	a4 97       	sbiw	r28, 0x24	; 36
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
		 *                          LOCAL VARIABLE                                  *
		 *******************************************************************************/
	uint8 a_key = 0;            /*variable used to receive password*/
    2914:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 a_count = 0;          /*variable used to count received password*/
    2916:	1d 8e       	std	Y+29, r1	; 0x1d
	/*uint8 a_errdigit = 0;*/
	uint8 a_Pass[6];            /*variable used to save received password*/

	LCD_clearScreen();          /*clear lcd*/
    2918:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter pass:");
    291c:	2e ec       	ldi	r18, 0xCE	; 206
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	a9 01       	movw	r20, r18
    2926:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    292a:	1d 8e       	std	Y+29, r1	; 0x1d
    292c:	93 c0       	rjmp	.+294    	; 0x2a54 <comparePass+0x154>
	{
		/*get password*/
		a_key = KeyPad_getPressedKey();
    292e:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    2932:	8e 8f       	std	Y+30, r24	; 0x1e
    2934:	03 c0       	rjmp	.+6      	; 0x293c <comparePass+0x3c>
		/*wait until user press enter*/
		while(!((a_key >= 0) && (a_key <= 9)))
		{
			a_key = KeyPad_getPressedKey();
    2936:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    293a:	8e 8f       	std	Y+30, r24	; 0x1e
	for(a_count = 0; a_count < 5; a_count++)
	{
		/*get password*/
		a_key = KeyPad_getPressedKey();
		/*wait until user press enter*/
		while(!((a_key >= 0) && (a_key <= 9)))
    293c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    293e:	8a 30       	cpi	r24, 0x0A	; 10
    2940:	d0 f7       	brcc	.-12     	; 0x2936 <comparePass+0x36>
			a_key = KeyPad_getPressedKey();
		}

		/*LCD_goToRowColumn(1 , a_count);
		LCD_intgerToString(a_key);*/
		LCD_displayStringRowColumn(1,a_count + 3,"*");
    2942:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2944:	98 2f       	mov	r25, r24
    2946:	9d 5f       	subi	r25, 0xFD	; 253
    2948:	20 e7       	ldi	r18, 0x70	; 112
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	69 2f       	mov	r22, r25
    2950:	a9 01       	movw	r20, r18
    2952:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
		/*saved enterd password in array*/
		a_Pass[a_count] = a_key;
    2956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	ce 01       	movw	r24, r28
    295e:	4f 96       	adiw	r24, 0x1f	; 31
    2960:	fc 01       	movw	r30, r24
    2962:	e2 0f       	add	r30, r18
    2964:	f3 1f       	adc	r31, r19
    2966:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2968:	80 83       	st	Z, r24
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	aa ef       	ldi	r26, 0xFA	; 250
    2970:	b3 e4       	ldi	r27, 0x43	; 67
    2972:	89 8f       	std	Y+25, r24	; 0x19
    2974:	9a 8f       	std	Y+26, r25	; 0x1a
    2976:	ab 8f       	std	Y+27, r26	; 0x1b
    2978:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	69 8d       	ldd	r22, Y+25	; 0x19
    297c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a ef       	ldi	r20, 0xFA	; 250
    2988:	54 e4       	ldi	r21, 0x44	; 68
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8d 8b       	std	Y+21, r24	; 0x15
    2994:	9e 8b       	std	Y+22, r25	; 0x16
    2996:	af 8b       	std	Y+23, r26	; 0x17
    2998:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299a:	6d 89       	ldd	r22, Y+21	; 0x15
    299c:	7e 89       	ldd	r23, Y+22	; 0x16
    299e:	8f 89       	ldd	r24, Y+23	; 0x17
    29a0:	98 8d       	ldd	r25, Y+24	; 0x18
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	2c f4       	brge	.+10     	; 0x29bc <comparePass+0xbc>
		__ticks = 1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <comparePass+0x13a>
	else if (__tmp > 65535)
    29bc:	6d 89       	ldd	r22, Y+21	; 0x15
    29be:	7e 89       	ldd	r23, Y+22	; 0x16
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	98 8d       	ldd	r25, Y+24	; 0x18
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	4c f5       	brge	.+82     	; 0x2a26 <comparePass+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	69 8d       	ldd	r22, Y+25	; 0x19
    29d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e2       	ldi	r20, 0x20	; 32
    29e2:	51 e4       	ldi	r21, 0x41	; 65
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <comparePass+0x11c>
    29fe:	88 ec       	ldi	r24, 0xC8	; 200
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9a 8b       	std	Y+18, r25	; 0x12
    2a04:	89 8b       	std	Y+17, r24	; 0x11
    2a06:	89 89       	ldd	r24, Y+17	; 0x11
    2a08:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <comparePass+0x10a>
    2a0e:	9a 8b       	std	Y+18, r25	; 0x12
    2a10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	69 f7       	brne	.-38     	; 0x29fe <comparePass+0xfe>
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <comparePass+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	6d 89       	ldd	r22, Y+21	; 0x15
    2a28:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9c 8b       	std	Y+20, r25	; 0x14
    2a38:	8b 8b       	std	Y+19, r24	; 0x13
    2a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3e:	98 8b       	std	Y+16, r25	; 0x10
    2a40:	8f 87       	std	Y+15, r24	; 0x0f
    2a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a44:	98 89       	ldd	r25, Y+16	; 0x10
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <comparePass+0x146>
    2a4a:	98 8b       	std	Y+16, r25	; 0x10
    2a4c:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 a_Pass[6];            /*variable used to save received password*/

	LCD_clearScreen();          /*clear lcd*/
	LCD_displayStringRowColumn(0,0,"Enter pass:");
	/*loop to get password from user*/
	for(a_count = 0; a_count < 5; a_count++)
    2a4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a50:	8f 5f       	subi	r24, 0xFF	; 255
    2a52:	8d 8f       	std	Y+29, r24	; 0x1d
    2a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a56:	85 30       	cpi	r24, 0x05	; 5
    2a58:	08 f4       	brcc	.+2      	; 0x2a5c <comparePass+0x15c>
    2a5a:	69 cf       	rjmp	.-302    	; 0x292e <comparePass+0x2e>
		a_Pass[a_count] = a_key;

		_delay_ms(500);
	}
	/*MCU1 wait until MCU2 be end*/
	while (KeyPad_getPressedKey() != 13){}
    2a5c:	0e 94 82 07 	call	0xf04	; 0xf04 <KeyPad_getPressedKey>
    2a60:	8d 30       	cpi	r24, 0x0D	; 13
    2a62:	e1 f7       	brne	.-8      	; 0x2a5c <comparePass+0x15c>
	/*MCU1 wait until send to MCU2 be compPass*/
	UART_sendByte(compPass);
    2a64:	85 e0       	ldi	r24, 0x05	; 5
    2a66:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
	/*loop to send password to MCU2*/
	for(a_count = 0; a_count < 5; a_count++)
    2a6a:	1d 8e       	std	Y+29, r1	; 0x1d
    2a6c:	12 c0       	rjmp	.+36     	; 0x2a92 <comparePass+0x192>
	{
		/*MCU1 wait until receive M2_comREADY from MCU2 to be ready*/
		while(UART_recieveByte()!= M2_comREADY){};
    2a6e:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    2a72:	88 30       	cpi	r24, 0x08	; 8
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <comparePass+0x16e>
		/*send password byte by byte to MCU2*/
		UART_sendByte(a_Pass[a_count]);
    2a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	4f 96       	adiw	r24, 0x1f	; 31
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	80 81       	ld	r24, Z
    2a88:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
	/*MCU1 wait until MCU2 be end*/
	while (KeyPad_getPressedKey() != 13){}
	/*MCU1 wait until send to MCU2 be compPass*/
	UART_sendByte(compPass);
	/*loop to send password to MCU2*/
	for(a_count = 0; a_count < 5; a_count++)
    2a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	8d 8f       	std	Y+29, r24	; 0x1d
    2a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a94:	85 30       	cpi	r24, 0x05	; 5
    2a96:	58 f3       	brcs	.-42     	; 0x2a6e <comparePass+0x16e>
		while(UART_recieveByte()!= M2_comREADY){};
		/*send password byte by byte to MCU2*/
		UART_sendByte(a_Pass[a_count]);
	}
	 /* if MCU1 receive wrong from MCU2*/
	if(UART_recieveByte() == wrong)
    2a98:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    2a9c:	86 30       	cpi	r24, 0x06	; 6
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <comparePass+0x1a2>
    2aa0:	af c0       	rjmp	.+350    	; 0x2c00 <comparePass+0x300>
	{
		/*increase error counter by one*/
		g_errCount ++;
    2aa2:	80 91 1a 01 	lds	r24, 0x011A
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	80 93 1a 01 	sts	0x011A, r24
		/*MCU1 send error counter to MCU2*/
		UART_sendByte(g_errCount);
    2aac:	80 91 1a 01 	lds	r24, 0x011A
    2ab0:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
		/*if error counter less than 3*/
		if(g_errCount < 3)
    2ab4:	80 91 1a 01 	lds	r24, 0x011A
    2ab8:	83 30       	cpi	r24, 0x03	; 3
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <comparePass+0x1be>
    2abc:	85 c0       	rjmp	.+266    	; 0x2bc8 <comparePass+0x2c8>
		{
			/*print wrong password on lcd*/
			LCD_clearScreen();         /*clear lcd*/
    2abe:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
			LCD_displayStringRowColumn(0,3,"Wrong");
    2ac2:	2a ed       	ldi	r18, 0xDA	; 218
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	63 e0       	ldi	r22, 0x03	; 3
    2aca:	a9 01       	movw	r20, r18
    2acc:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,3,"Password");
    2ad0:	20 ee       	ldi	r18, 0xE0	; 224
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	63 e0       	ldi	r22, 0x03	; 3
    2ad8:	a9 01       	movw	r20, r18
    2ada:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	aa ef       	ldi	r26, 0xFA	; 250
    2ae4:	b3 e4       	ldi	r27, 0x43	; 67
    2ae6:	8b 87       	std	Y+11, r24	; 0x0b
    2ae8:	9c 87       	std	Y+12, r25	; 0x0c
    2aea:	ad 87       	std	Y+13, r26	; 0x0d
    2aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8f 83       	std	Y+7, r24	; 0x07
    2b08:	98 87       	std	Y+8, r25	; 0x08
    2b0a:	a9 87       	std	Y+9, r26	; 0x09
    2b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	2c f4       	brge	.+10     	; 0x2b30 <comparePass+0x230>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	3f c0       	rjmp	.+126    	; 0x2bae <comparePass+0x2ae>
	else if (__tmp > 65535)
    2b30:	6f 81       	ldd	r22, Y+7	; 0x07
    2b32:	78 85       	ldd	r23, Y+8	; 0x08
    2b34:	89 85       	ldd	r24, Y+9	; 0x09
    2b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	3f ef       	ldi	r19, 0xFF	; 255
    2b3c:	4f e7       	ldi	r20, 0x7F	; 127
    2b3e:	57 e4       	ldi	r21, 0x47	; 71
    2b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b44:	18 16       	cp	r1, r24
    2b46:	4c f5       	brge	.+82     	; 0x2b9a <comparePass+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e2       	ldi	r20, 0x20	; 32
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	0f c0       	rjmp	.+30     	; 0x2b90 <comparePass+0x290>
    2b72:	88 ec       	ldi	r24, 0xC8	; 200
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <comparePass+0x27e>
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	69 f7       	brne	.-38     	; 0x2b72 <comparePass+0x272>
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <comparePass+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <comparePass+0x2ba>
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			/*return to compare function to take anther password*/
			comparePass();
    2bc2:	0e 94 80 14 	call	0x2900	; 0x2900 <comparePass>
    2bc6:	23 c0       	rjmp	.+70     	; 0x2c0e <comparePass+0x30e>
		}
		else
		{
			LCD_clearScreen();    /*clear lcd*/
    2bc8:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>

			g_timeCount = 0;
    2bcc:	10 92 1d 01 	sts	0x011D, r1
			g_sec_Count = 0;
    2bd0:	10 92 1e 01 	sts	0x011E, r1
			Timer_start();
    2bd4:	0e 94 98 18 	call	0x3130	; 0x3130 <Timer_start>
    2bd8:	07 c0       	rjmp	.+14     	; 0x2be8 <comparePass+0x2e8>
			while (g_sec_Count != 60) /*As long as it hasn't passed 1 minute,display on LCD this meassage*/
			{
				LCD_displayStringRowColumn(0,4,"ERROR");
    2bda:	29 ee       	ldi	r18, 0xE9	; 233
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	64 e0       	ldi	r22, 0x04	; 4
    2be2:	a9 01       	movw	r20, r18
    2be4:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
			LCD_clearScreen();    /*clear lcd*/

			g_timeCount = 0;
			g_sec_Count = 0;
			Timer_start();
			while (g_sec_Count != 60) /*As long as it hasn't passed 1 minute,display on LCD this meassage*/
    2be8:	80 91 1e 01 	lds	r24, 0x011E
    2bec:	8c 33       	cpi	r24, 0x3C	; 60
    2bee:	a9 f7       	brne	.-22     	; 0x2bda <comparePass+0x2da>
			{
				LCD_displayStringRowColumn(0,4,"ERROR");
			}
			Timer_stop();
    2bf0:	0e 94 8a 18 	call	0x3114	; 0x3114 <Timer_stop>
			g_errCount = 0;
    2bf4:	10 92 1a 01 	sts	0x011A, r1
			g_error_flag = 1;      /*set flag as 1*/
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	80 93 1c 01 	sts	0x011C, r24
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <comparePass+0x30e>

		}
	}
	else
	{
		UART_sendByte(0);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
		g_errCount = 0;
    2c06:	10 92 1a 01 	sts	0x011A, r1
		g_error_flag = 0;
    2c0a:	10 92 1c 01 	sts	0x011C, r1
	}
}
    2c0e:	a4 96       	adiw	r28, 0x24	; 36
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <OpenDoor>:
/*FUNCTION used to open door*/
void OpenDoor (void)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(Open);
    2c28:	89 e0       	ldi	r24, 0x09	; 9
    2c2a:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
	 /*make motor move as clock wise to open door*/
	g_timeCount = 0;
    2c2e:	10 92 1d 01 	sts	0x011D, r1
	g_sec_Count = 0;
    2c32:	10 92 1e 01 	sts	0x011E, r1
	Timer_start();
    2c36:	0e 94 98 18 	call	0x3130	; 0x3130 <Timer_start>
	LCD_clearScreen(); /*Clear LCD*/
    2c3a:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"OPEN DOOR");
    2c3e:	2f ee       	ldi	r18, 0xEF	; 239
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	64 e0       	ldi	r22, 0x04	; 4
    2c46:	a9 01       	movw	r20, r18
    2c48:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	while(g_sec_Count != 3)
    2c4c:	80 91 1e 01 	lds	r24, 0x011E
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	e1 f7       	brne	.-8      	; 0x2c4c <OpenDoor+0x2c>
	{

	}
	Timer_stop();
    2c54:	0e 94 8a 18 	call	0x3114	; 0x3114 <Timer_stop>
	/*make motor move as anti clock wise to close door*/
	g_timeCount = 0;
    2c58:	10 92 1d 01 	sts	0x011D, r1
	g_sec_Count = 0;
    2c5c:	10 92 1e 01 	sts	0x011E, r1
	Timer_start();
    2c60:	0e 94 98 18 	call	0x3130	; 0x3130 <Timer_start>
	LCD_clearScreen(); /*Clear LCD*/
    2c64:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"CLOSE DOOR");
    2c68:	29 ef       	ldi	r18, 0xF9	; 249
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	64 e0       	ldi	r22, 0x04	; 4
    2c70:	a9 01       	movw	r20, r18
    2c72:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_displayStringRowColumn>
	while(g_sec_Count != 3)
    2c76:	80 91 1e 01 	lds	r24, 0x011E
    2c7a:	83 30       	cpi	r24, 0x03	; 3
    2c7c:	e1 f7       	brne	.-8      	; 0x2c76 <OpenDoor+0x56>
	{

	}
	Timer_stop();
    2c7e:	0e 94 8a 18 	call	0x3114	; 0x3114 <Timer_stop>


}
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <Calc_time>:
/*FUNCTION to calculate number of seconds*/
void Calc_time(void)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
	g_timeCount++;   /*increase time counter by one*/
    2c90:	80 91 1d 01 	lds	r24, 0x011D
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	80 93 1d 01 	sts	0x011D, r24

	if(g_timeCount == 30)
    2c9a:	80 91 1d 01 	lds	r24, 0x011D
    2c9e:	8e 31       	cpi	r24, 0x1E	; 30
    2ca0:	39 f4       	brne	.+14     	; 0x2cb0 <Calc_time+0x28>
	{
		g_timeCount = 0;
    2ca2:	10 92 1d 01 	sts	0x011D, r1
		g_sec_Count ++;            /*increase seconds counter by one*/
    2ca6:	80 91 1e 01 	lds	r24, 0x011E
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	80 93 1e 01 	sts	0x011E, r24
	}
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <__vector_9>:
/*********************************************************************************************************************
 *                                                Interrupt Service Routines                                         *
 *********************************************************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2cb6:	1f 92       	push	r1
    2cb8:	0f 92       	push	r0
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	2f 93       	push	r18
    2cc2:	3f 93       	push	r19
    2cc4:	4f 93       	push	r20
    2cc6:	5f 93       	push	r21
    2cc8:	6f 93       	push	r22
    2cca:	7f 93       	push	r23
    2ccc:	8f 93       	push	r24
    2cce:	9f 93       	push	r25
    2cd0:	af 93       	push	r26
    2cd2:	bf 93       	push	r27
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	if(g_t0_ovf_callBackPtr != NULL_PTR)
    2ce0:	80 91 1f 01 	lds	r24, 0x011F
    2ce4:	90 91 20 01 	lds	r25, 0x0120
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	29 f0       	breq	.+10     	; 0x2cf6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t0_ovf_callBackPtr)();
    2cec:	e0 91 1f 01 	lds	r30, 0x011F
    2cf0:	f0 91 20 01 	lds	r31, 0x0120
    2cf4:	09 95       	icall
		/* another method to call the function using pointer to function t0_ovf_callBackPtr(); */
	}
}
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	ff 91       	pop	r31
    2cfc:	ef 91       	pop	r30
    2cfe:	bf 91       	pop	r27
    2d00:	af 91       	pop	r26
    2d02:	9f 91       	pop	r25
    2d04:	8f 91       	pop	r24
    2d06:	7f 91       	pop	r23
    2d08:	6f 91       	pop	r22
    2d0a:	5f 91       	pop	r21
    2d0c:	4f 91       	pop	r20
    2d0e:	3f 91       	pop	r19
    2d10:	2f 91       	pop	r18
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	0f 90       	pop	r0
    2d18:	1f 90       	pop	r1
    2d1a:	18 95       	reti

00002d1c <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2d1c:	1f 92       	push	r1
    2d1e:	0f 92       	push	r0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	0f 92       	push	r0
    2d24:	11 24       	eor	r1, r1
    2d26:	2f 93       	push	r18
    2d28:	3f 93       	push	r19
    2d2a:	4f 93       	push	r20
    2d2c:	5f 93       	push	r21
    2d2e:	6f 93       	push	r22
    2d30:	7f 93       	push	r23
    2d32:	8f 93       	push	r24
    2d34:	9f 93       	push	r25
    2d36:	af 93       	push	r26
    2d38:	bf 93       	push	r27
    2d3a:	ef 93       	push	r30
    2d3c:	ff 93       	push	r31
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
	if(g_t0_ctc_callBackPtr != NULL_PTR)
    2d46:	80 91 21 01 	lds	r24, 0x0121
    2d4a:	90 91 22 01 	lds	r25, 0x0122
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	29 f0       	breq	.+10     	; 0x2d5c <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t0_ctc_callBackPtr)();
    2d52:	e0 91 21 01 	lds	r30, 0x0121
    2d56:	f0 91 22 01 	lds	r31, 0x0122
    2d5a:	09 95       	icall
		/* another method to call the function using pointer to function t0_ctc_callBackPtr(); */
	}
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	ff 91       	pop	r31
    2d62:	ef 91       	pop	r30
    2d64:	bf 91       	pop	r27
    2d66:	af 91       	pop	r26
    2d68:	9f 91       	pop	r25
    2d6a:	8f 91       	pop	r24
    2d6c:	7f 91       	pop	r23
    2d6e:	6f 91       	pop	r22
    2d70:	5f 91       	pop	r21
    2d72:	4f 91       	pop	r20
    2d74:	3f 91       	pop	r19
    2d76:	2f 91       	pop	r18
    2d78:	0f 90       	pop	r0
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	0f 90       	pop	r0
    2d7e:	1f 90       	pop	r1
    2d80:	18 95       	reti

00002d82 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2d82:	1f 92       	push	r1
    2d84:	0f 92       	push	r0
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	0f 92       	push	r0
    2d8a:	11 24       	eor	r1, r1
    2d8c:	2f 93       	push	r18
    2d8e:	3f 93       	push	r19
    2d90:	4f 93       	push	r20
    2d92:	5f 93       	push	r21
    2d94:	6f 93       	push	r22
    2d96:	7f 93       	push	r23
    2d98:	8f 93       	push	r24
    2d9a:	9f 93       	push	r25
    2d9c:	af 93       	push	r26
    2d9e:	bf 93       	push	r27
    2da0:	ef 93       	push	r30
    2da2:	ff 93       	push	r31
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
	if(g_t1_ovf_callBackPtr != NULL_PTR)
    2dac:	80 91 23 01 	lds	r24, 0x0123
    2db0:	90 91 24 01 	lds	r25, 0x0124
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	29 f0       	breq	.+10     	; 0x2dc2 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t1_ovf_callBackPtr)();
    2db8:	e0 91 23 01 	lds	r30, 0x0123
    2dbc:	f0 91 24 01 	lds	r31, 0x0124
    2dc0:	09 95       	icall
		/* another method to call the function using pointer to function t1_ovf_callBackPtr(); */
	}
}
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	ff 91       	pop	r31
    2dc8:	ef 91       	pop	r30
    2dca:	bf 91       	pop	r27
    2dcc:	af 91       	pop	r26
    2dce:	9f 91       	pop	r25
    2dd0:	8f 91       	pop	r24
    2dd2:	7f 91       	pop	r23
    2dd4:	6f 91       	pop	r22
    2dd6:	5f 91       	pop	r21
    2dd8:	4f 91       	pop	r20
    2dda:	3f 91       	pop	r19
    2ddc:	2f 91       	pop	r18
    2dde:	0f 90       	pop	r0
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	0f 90       	pop	r0
    2de4:	1f 90       	pop	r1
    2de6:	18 95       	reti

00002de8 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2de8:	1f 92       	push	r1
    2dea:	0f 92       	push	r0
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	0f 92       	push	r0
    2df0:	11 24       	eor	r1, r1
    2df2:	2f 93       	push	r18
    2df4:	3f 93       	push	r19
    2df6:	4f 93       	push	r20
    2df8:	5f 93       	push	r21
    2dfa:	6f 93       	push	r22
    2dfc:	7f 93       	push	r23
    2dfe:	8f 93       	push	r24
    2e00:	9f 93       	push	r25
    2e02:	af 93       	push	r26
    2e04:	bf 93       	push	r27
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	if(g_t1_ctc_callBackPtr != NULL_PTR)
    2e12:	80 91 25 01 	lds	r24, 0x0125
    2e16:	90 91 26 01 	lds	r25, 0x0126
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	29 f0       	breq	.+10     	; 0x2e28 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t1_ctc_callBackPtr)();
    2e1e:	e0 91 25 01 	lds	r30, 0x0125
    2e22:	f0 91 26 01 	lds	r31, 0x0126
    2e26:	09 95       	icall
		/* another method to call the function using pointer to function t1_ctc_callBackPtr(); */
	}
}
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	ff 91       	pop	r31
    2e2e:	ef 91       	pop	r30
    2e30:	bf 91       	pop	r27
    2e32:	af 91       	pop	r26
    2e34:	9f 91       	pop	r25
    2e36:	8f 91       	pop	r24
    2e38:	7f 91       	pop	r23
    2e3a:	6f 91       	pop	r22
    2e3c:	5f 91       	pop	r21
    2e3e:	4f 91       	pop	r20
    2e40:	3f 91       	pop	r19
    2e42:	2f 91       	pop	r18
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2e4e:	1f 92       	push	r1
    2e50:	0f 92       	push	r0
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	0f 92       	push	r0
    2e56:	11 24       	eor	r1, r1
    2e58:	2f 93       	push	r18
    2e5a:	3f 93       	push	r19
    2e5c:	4f 93       	push	r20
    2e5e:	5f 93       	push	r21
    2e60:	6f 93       	push	r22
    2e62:	7f 93       	push	r23
    2e64:	8f 93       	push	r24
    2e66:	9f 93       	push	r25
    2e68:	af 93       	push	r26
    2e6a:	bf 93       	push	r27
    2e6c:	ef 93       	push	r30
    2e6e:	ff 93       	push	r31
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
	if(g_t2_ovf_callBackPtr != NULL_PTR)
    2e78:	80 91 27 01 	lds	r24, 0x0127
    2e7c:	90 91 28 01 	lds	r25, 0x0128
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	29 f0       	breq	.+10     	; 0x2e8e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t2_ovf_callBackPtr)();
    2e84:	e0 91 27 01 	lds	r30, 0x0127
    2e88:	f0 91 28 01 	lds	r31, 0x0128
    2e8c:	09 95       	icall
		/* another method to call the function using pointer to function t2_ovf_callBackPtr(); */
	}
}
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	ff 91       	pop	r31
    2e94:	ef 91       	pop	r30
    2e96:	bf 91       	pop	r27
    2e98:	af 91       	pop	r26
    2e9a:	9f 91       	pop	r25
    2e9c:	8f 91       	pop	r24
    2e9e:	7f 91       	pop	r23
    2ea0:	6f 91       	pop	r22
    2ea2:	5f 91       	pop	r21
    2ea4:	4f 91       	pop	r20
    2ea6:	3f 91       	pop	r19
    2ea8:	2f 91       	pop	r18
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
	if(g_t2_ctc_callBackPtr != NULL_PTR)
    2ede:	80 91 29 01 	lds	r24, 0x0129
    2ee2:	90 91 2a 01 	lds	r25, 0x012A
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t2_ctc_callBackPtr)();
    2eea:	e0 91 29 01 	lds	r30, 0x0129
    2eee:	f0 91 2a 01 	lds	r31, 0x012A
    2ef2:	09 95       	icall
		/* another method to call the function using pointer to function t2_ctc_callBackPtr(); */
	}
}
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	7f 91       	pop	r23
    2f06:	6f 91       	pop	r22
    2f08:	5f 91       	pop	r21
    2f0a:	4f 91       	pop	r20
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <Timer_init>:
 * Function that initialize the timer
 * Given timer and the mode, it initiate the registers
 * the initial value and the compare value
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <Timer_init+0x6>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->type  == TIMER0)
    2f28:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 23       	and	r24, r24
    2f30:	e1 f5       	brne	.+120    	; 0x2faa <Timer_init+0x90>
	{
		TCNT0 = Config_Ptr->s_init; /*Put the initial value in TCNT0*/
    2f32:	a2 e5       	ldi	r26, 0x52	; 82
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	83 81       	ldd	r24, Z+3	; 0x03
    2f3c:	94 81       	ldd	r25, Z+4	; 0x04
    2f3e:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0); /*Non PWM mode FOC0=1*/
    2f40:	e3 e5       	ldi	r30, 0x53	; 83
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 e8       	ldi	r24, 0x80	; 128
    2f46:	80 83       	st	Z, r24
		TCCR0 = (TCCR0 & 0xF8) | (prescalar);
    2f48:	a3 e5       	ldi	r26, 0x53	; 83
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e3 e5       	ldi	r30, 0x53	; 83
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	98 2f       	mov	r25, r24
    2f54:	98 7f       	andi	r25, 0xF8	; 248
    2f56:	80 91 2b 01 	lds	r24, 0x012B
    2f5a:	89 2b       	or	r24, r25
    2f5c:	8c 93       	st	X, r24

		if(Config_Ptr->mode == OVERFLOW)
    2f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f60:	fa 81       	ldd	r31, Y+2	; 0x02
    2f62:	81 81       	ldd	r24, Z+1	; 0x01
    2f64:	88 23       	and	r24, r24
    2f66:	41 f4       	brne	.+16     	; 0x2f78 <Timer_init+0x5e>
		{
			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2f68:	a9 e5       	ldi	r26, 0x59	; 89
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e9 e5       	ldi	r30, 0x59	; 89
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	81 60       	ori	r24, 0x01	; 1
    2f74:	8c 93       	st	X, r24
    2f76:	95 c0       	rjmp	.+298    	; 0x30a2 <Timer_init+0x188>
			/* Configure the timer control register
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
		}
		else if(Config_Ptr->mode == COMPARE)
    2f78:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7c:	81 81       	ldd	r24, Z+1	; 0x01
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <Timer_init+0x6a>
    2f82:	8f c0       	rjmp	.+286    	; 0x30a2 <Timer_init+0x188>
		{
			OCR0  = Config_Ptr->s_compare; /* Set Compare Value*/
    2f84:	ac e5       	ldi	r26, 0x5C	; 92
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	85 81       	ldd	r24, Z+5	; 0x05
    2f8e:	96 81       	ldd	r25, Z+6	; 0x06
    2f90:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2f92:	a9 e5       	ldi	r26, 0x59	; 89
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	e9 e5       	ldi	r30, 0x59	; 89
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	82 60       	ori	r24, 0x02	; 2
    2f9e:	8c 93       	st	X, r24
			/* Configure timer0 control register
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 */
			TCCR0 = (1<<WGM01);
    2fa0:	e3 e5       	ldi	r30, 0x53	; 83
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	88 e0       	ldi	r24, 0x08	; 8
    2fa6:	80 83       	st	Z, r24
    2fa8:	7c c0       	rjmp	.+248    	; 0x30a2 <Timer_init+0x188>
		}
	}
	else if(Config_Ptr->type  == TIMER1)
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	80 81       	ld	r24, Z
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	d1 f5       	brne	.+116    	; 0x3028 <Timer_init+0x10e>
	{
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2fb4:	ef e4       	ldi	r30, 0x4F	; 79
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	8c e0       	ldi	r24, 0x0C	; 12
    2fba:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B & 0xF8) | (prescalar); /*Put the prescalar in the first 3-bits*/
    2fbc:	ae e4       	ldi	r26, 0x4E	; 78
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	ee e4       	ldi	r30, 0x4E	; 78
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	98 7f       	andi	r25, 0xF8	; 248
    2fca:	80 91 2b 01 	lds	r24, 0x012B
    2fce:	89 2b       	or	r24, r25
    2fd0:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->s_init;
    2fd2:	ac e4       	ldi	r26, 0x4C	; 76
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fda:	83 81       	ldd	r24, Z+3	; 0x03
    2fdc:	94 81       	ldd	r25, Z+4	; 0x04
    2fde:	11 96       	adiw	r26, 0x01	; 1
    2fe0:	9c 93       	st	X, r25
    2fe2:	8e 93       	st	-X, r24
		if(Config_Ptr->mode == OVERFLOW)
    2fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe8:	81 81       	ldd	r24, Z+1	; 0x01
    2fea:	88 23       	and	r24, r24
    2fec:	29 f4       	brne	.+10     	; 0x2ff8 <Timer_init+0xde>
		{
			TIMSK = (1<<TOIE1); /*TOIE1=1: Enable overflow interrupt*/
    2fee:	e9 e5       	ldi	r30, 0x59	; 89
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	84 e0       	ldi	r24, 0x04	; 4
    2ff4:	80 83       	st	Z, r24
    2ff6:	55 c0       	rjmp	.+170    	; 0x30a2 <Timer_init+0x188>
		}
		else if(Config_Ptr->mode == COMPARE)
    2ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffc:	81 81       	ldd	r24, Z+1	; 0x01
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	09 f0       	breq	.+2      	; 0x3004 <Timer_init+0xea>
    3002:	4f c0       	rjmp	.+158    	; 0x30a2 <Timer_init+0x188>
		{
			TCCR1B = (1<<WGM12); /*WGM12=1: Compare mode (Mode 12)*/
    3004:	ee e4       	ldi	r30, 0x4E	; 78
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	88 e0       	ldi	r24, 0x08	; 8
    300a:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->s_compare; /* compare value in OCR1A mode 4*/
    300c:	aa e4       	ldi	r26, 0x4A	; 74
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e9 81       	ldd	r30, Y+1	; 0x01
    3012:	fa 81       	ldd	r31, Y+2	; 0x02
    3014:	85 81       	ldd	r24, Z+5	; 0x05
    3016:	96 81       	ldd	r25, Z+6	; 0x06
    3018:	11 96       	adiw	r26, 0x01	; 1
    301a:	9c 93       	st	X, r25
    301c:	8e 93       	st	-X, r24
			TIMSK = (1<<OCIE1A); /*OCIE1A=1: Enable output compare A match interrupt*/
    301e:	e9 e5       	ldi	r30, 0x59	; 89
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 e1       	ldi	r24, 0x10	; 16
    3024:	80 83       	st	Z, r24
    3026:	3d c0       	rjmp	.+122    	; 0x30a2 <Timer_init+0x188>
		}
	}
	else if(Config_Ptr->type  == TIMER2)
    3028:	e9 81       	ldd	r30, Y+1	; 0x01
    302a:	fa 81       	ldd	r31, Y+2	; 0x02
    302c:	80 81       	ld	r24, Z
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	c1 f5       	brne	.+112    	; 0x30a2 <Timer_init+0x188>
	{
		TCCR2= (1<<FOC2);
    3032:	e5 e4       	ldi	r30, 0x45	; 69
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 e8       	ldi	r24, 0x80	; 128
    3038:	80 83       	st	Z, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescalar);
    303a:	a5 e4       	ldi	r26, 0x45	; 69
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e5 e4       	ldi	r30, 0x45	; 69
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	98 2f       	mov	r25, r24
    3046:	98 7f       	andi	r25, 0xF8	; 248
    3048:	e9 81       	ldd	r30, Y+1	; 0x01
    304a:	fa 81       	ldd	r31, Y+2	; 0x02
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	89 2b       	or	r24, r25
    3050:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->s_init;
    3052:	a4 e4       	ldi	r26, 0x44	; 68
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	94 81       	ldd	r25, Z+4	; 0x04
    305e:	8c 93       	st	X, r24
		if(Config_Ptr->mode == OVERFLOW)
    3060:	e9 81       	ldd	r30, Y+1	; 0x01
    3062:	fa 81       	ldd	r31, Y+2	; 0x02
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	88 23       	and	r24, r24
    3068:	29 f4       	brne	.+10     	; 0x3074 <Timer_init+0x15a>
		{
			TIMSK = (1<<TOIE2); /*TOIE1=2: Enable overflow interrupt*/
    306a:	e9 e5       	ldi	r30, 0x59	; 89
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 e4       	ldi	r24, 0x40	; 64
    3070:	80 83       	st	Z, r24
    3072:	17 c0       	rjmp	.+46     	; 0x30a2 <Timer_init+0x188>
		}
		else if(Config_Ptr->mode == COMPARE)
    3074:	e9 81       	ldd	r30, Y+1	; 0x01
    3076:	fa 81       	ldd	r31, Y+2	; 0x02
    3078:	81 81       	ldd	r24, Z+1	; 0x01
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 f4       	brne	.+36     	; 0x30a2 <Timer_init+0x188>
		{
			TCCR2 |= (1<<WGM21);
    307e:	a5 e4       	ldi	r26, 0x45	; 69
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e5 e4       	ldi	r30, 0x45	; 69
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	88 60       	ori	r24, 0x08	; 8
    308a:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->s_compare;
    308c:	a3 e4       	ldi	r26, 0x43	; 67
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e9 81       	ldd	r30, Y+1	; 0x01
    3092:	fa 81       	ldd	r31, Y+2	; 0x02
    3094:	85 81       	ldd	r24, Z+5	; 0x05
    3096:	96 81       	ldd	r25, Z+6	; 0x06
    3098:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE2);
    309a:	e9 e5       	ldi	r30, 0x59	; 89
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 e8       	ldi	r24, 0x80	; 128
    30a0:	80 83       	st	Z, r24
		}
	}


	if((Config_Ptr->prescalar) == NO_CLOCK)
    30a2:	e9 81       	ldd	r30, Y+1	; 0x01
    30a4:	fa 81       	ldd	r31, Y+2	; 0x02
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	88 23       	and	r24, r24
    30aa:	19 f4       	brne	.+6      	; 0x30b2 <Timer_init+0x198>
	{
		prescalar = 0;  /*If it is NO_CLOCK , it should be 0*/
    30ac:	10 92 2b 01 	sts	0x012B, r1
    30b0:	2c c0       	rjmp	.+88     	; 0x310a <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_CLOCK)
    30b2:	e9 81       	ldd	r30, Y+1	; 0x01
    30b4:	fa 81       	ldd	r31, Y+2	; 0x02
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	21 f4       	brne	.+8      	; 0x30c4 <Timer_init+0x1aa>
	{
		prescalar = 1; /*If it is F_CPU_CLOCK , it should be 1*/
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	80 93 2b 01 	sts	0x012B, r24
    30c2:	23 c0       	rjmp	.+70     	; 0x310a <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_8)
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	82 30       	cpi	r24, 0x02	; 2
    30cc:	21 f4       	brne	.+8      	; 0x30d6 <Timer_init+0x1bc>
	{
		prescalar = 2;/*If it is F_CPU_8 , it should be 2*/
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	80 93 2b 01 	sts	0x012B, r24
    30d4:	1a c0       	rjmp	.+52     	; 0x310a <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_64)
    30d6:	e9 81       	ldd	r30, Y+1	; 0x01
    30d8:	fa 81       	ldd	r31, Y+2	; 0x02
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	84 30       	cpi	r24, 0x04	; 4
    30de:	21 f4       	brne	.+8      	; 0x30e8 <Timer_init+0x1ce>
	{
		prescalar = 3;/*If it is F_CPU_64 , it should be 3*/
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	80 93 2b 01 	sts	0x012B, r24
    30e6:	11 c0       	rjmp	.+34     	; 0x310a <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_256)
    30e8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ea:	fa 81       	ldd	r31, Y+2	; 0x02
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	86 30       	cpi	r24, 0x06	; 6
    30f0:	21 f4       	brne	.+8      	; 0x30fa <Timer_init+0x1e0>
	{
		prescalar = 4;/*If it is F_CPU_64, it should be 4*/
    30f2:	84 e0       	ldi	r24, 0x04	; 4
    30f4:	80 93 2b 01 	sts	0x012B, r24
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <Timer_init+0x1f0>
	}
	else if((Config_Ptr->prescalar) == F_CPU_1024)
    30fa:	e9 81       	ldd	r30, Y+1	; 0x01
    30fc:	fa 81       	ldd	r31, Y+2	; 0x02
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	87 30       	cpi	r24, 0x07	; 7
    3102:	19 f4       	brne	.+6      	; 0x310a <Timer_init+0x1f0>
	{
		prescalar = 5;/*If it is F_CPU_64 , it should be 5*/
    3104:	85 e0       	ldi	r24, 0x05	; 5
    3106:	80 93 2b 01 	sts	0x012B, r24
	}
}
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <Timer_stop>:
/*Function to stop timer*/
void Timer_stop(void)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0);
    311c:	a3 e5       	ldi	r26, 0x53	; 83
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e3 e5       	ldi	r30, 0x53	; 83
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	88 7f       	andi	r24, 0xF8	; 248
    3128:	8c 93       	st	X, r24
}
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <Timer_start>:
/*Function to start timer*/
void Timer_start(void)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    3138:	e2 e5       	ldi	r30, 0x52	; 82
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	10 82       	st	Z, r1
	TCCR0 = (TCCR0 & 0xF8) | (prescalar);
    313e:	a3 e5       	ldi	r26, 0x53	; 83
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e3 e5       	ldi	r30, 0x53	; 83
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	98 2f       	mov	r25, r24
    314a:	98 7f       	andi	r25, 0xF8	; 248
    314c:	80 91 2b 01 	lds	r24, 0x012B
    3150:	89 2b       	or	r24, r25
    3152:	8c 93       	st	X, r24
}
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <Timer0_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer0, overflow mode*/
void Timer0_Ovf_setCallBack(void(*a_t0_ovf_ptr)(void))
{
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	00 d0       	rcall	.+0      	; 0x3160 <Timer0_Ovf_setCallBack+0x6>
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t0_ovf_callBackPtr = a_t0_ovf_ptr;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	90 93 20 01 	sts	0x0120, r25
    3170:	80 93 1f 01 	sts	0x011F, r24
}
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <Timer0_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer0, compare mode*/
void Timer0_CTC_setCallBack(void(*a_t0_ctc_ptr)(void))
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	00 d0       	rcall	.+0      	; 0x3184 <Timer0_CTC_setCallBack+0x6>
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t0_ctc_callBackPtr = a_t0_ctc_ptr;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	90 93 22 01 	sts	0x0122, r25
    3194:	80 93 21 01 	sts	0x0121, r24
}
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <Timer1_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer1, overflow mode*/
void Timer1_Ovf_setCallBack(void(*a_t1_ovf_ptr)(void))
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <Timer1_Ovf_setCallBack+0x6>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t1_ovf_callBackPtr = a_t1_ovf_ptr;
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	90 93 24 01 	sts	0x0124, r25
    31b8:	80 93 23 01 	sts	0x0123, r24
}
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <Timer1_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer1, compare mode*/
void Timer1_CTC_setCallBack(void(*a_t1_ctc_ptr)(void))
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <Timer1_CTC_setCallBack+0x6>
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t1_ctc_callBackPtr = a_t1_ctc_ptr;
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	9a 81       	ldd	r25, Y+2	; 0x02
    31d8:	90 93 26 01 	sts	0x0126, r25
    31dc:	80 93 25 01 	sts	0x0125, r24
}
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <Timer2_Ovf_setCallBack>:

/*Function to set the Call Back function address for Timer2, overflow mode*/
void Timer2_Ovf_setCallBack(void(*a_t2_ovf_ptr)(void))
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <Timer2_Ovf_setCallBack+0x6>
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t2_ovf_callBackPtr = a_t2_ovf_ptr;
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	9a 81       	ldd	r25, Y+2	; 0x02
    31fc:	90 93 28 01 	sts	0x0128, r25
    3200:	80 93 27 01 	sts	0x0127, r24
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <Timer2_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer2, compare mode*/
void Timer2_CTC_setCallBack(void(*a_t2_ctc_ptr)(void))
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <Timer2_CTC_setCallBack+0x6>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t2_ctc_callBackPtr = a_t2_ctc_ptr;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	90 93 2a 01 	sts	0x012A, r25
    3224:	80 93 29 01 	sts	0x0129, r24
}
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	2a 97       	sbiw	r28, 0x0a	; 10
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	9a 87       	std	Y+10, r25	; 0x0a
    3248:	89 87       	std	Y+9, r24	; 0x09
	uint32 baudrate; /*Used to put baudrate in it*/

	uint32 baud_prescaler;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    324a:	eb e2       	ldi	r30, 0x2B	; 43
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3252:	ea e2       	ldi	r30, 0x2A	; 42
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	88 e1       	ldi	r24, 0x18	; 24
    3258:	80 83       	st	Z, r24
	

	if (Config_Ptr-> parity == EVEN_PARITY)
    325a:	e9 85       	ldd	r30, Y+9	; 0x09
    325c:	fa 85       	ldd	r31, Y+10	; 0x0a
    325e:	80 81       	ld	r24, Z
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	41 f4       	brne	.+16     	; 0x3274 <UART_init+0x42>
	{
		SET_BIT(UCSRC,UPM1);
    3264:	a0 e4       	ldi	r26, 0x40	; 64
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e0 e4       	ldi	r30, 0x40	; 64
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 62       	ori	r24, 0x20	; 32
    3270:	8c 93       	st	X, r24
    3272:	13 c0       	rjmp	.+38     	; 0x329a <UART_init+0x68>
		//UCSRC |= (1<<UPM1); /*UPM1=1: Even parity*/
	}
	else if(Config_Ptr-> parity == ODD_PARITY)
    3274:	e9 85       	ldd	r30, Y+9	; 0x09
    3276:	fa 85       	ldd	r31, Y+10	; 0x0a
    3278:	80 81       	ld	r24, Z
    327a:	83 30       	cpi	r24, 0x03	; 3
    327c:	71 f4       	brne	.+28     	; 0x329a <UART_init+0x68>
	{
		SET_BIT(UCSRC,UPM1);
    327e:	a0 e4       	ldi	r26, 0x40	; 64
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e0 e4       	ldi	r30, 0x40	; 64
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	80 62       	ori	r24, 0x20	; 32
    328a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM0);
    328c:	a0 e4       	ldi	r26, 0x40	; 64
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e0 e4       	ldi	r30, 0x40	; 64
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	80 61       	ori	r24, 0x10	; 16
    3298:	8c 93       	st	X, r24
		//UCSRC |= (1<<UPM0) | (1<<UPM1); /*UPM1=0 UPM1=1: Odd parity*/
	}


	if(Config_Ptr->stop == BIT_2)
    329a:	e9 85       	ldd	r30, Y+9	; 0x09
    329c:	fa 85       	ldd	r31, Y+10	; 0x0a
    329e:	81 81       	ldd	r24, Z+1	; 0x01
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	39 f4       	brne	.+14     	; 0x32b2 <UART_init+0x80>
	{
		SET_BIT(UCSRC,USBS);
    32a4:	a0 e4       	ldi	r26, 0x40	; 64
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e0 e4       	ldi	r30, 0x40	; 64
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	88 60       	ori	r24, 0x08	; 8
    32b0:	8c 93       	st	X, r24
		//UCSRC |= (1<<USBS); /*USBS=1: 2-bits stop*/
	}

	if(Config_Ptr->size == BIT_6)
    32b2:	e9 85       	ldd	r30, Y+9	; 0x09
    32b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	81 30       	cpi	r24, 0x01	; 1
    32ba:	41 f4       	brne	.+16     	; 0x32cc <UART_init+0x9a>
	{
		SET_BIT(UCSRC,UCSZ0);
    32bc:	a0 e4       	ldi	r26, 0x40	; 64
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e0 e4       	ldi	r30, 0x40	; 64
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	82 60       	ori	r24, 0x02	; 2
    32c8:	8c 93       	st	X, r24
    32ca:	20 c0       	rjmp	.+64     	; 0x330c <UART_init+0xda>
		//UCSRC |= (1<<UCSZ0);
	}
	else if(Config_Ptr->size == BIT_7)
    32cc:	e9 85       	ldd	r30, Y+9	; 0x09
    32ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	41 f4       	brne	.+16     	; 0x32e6 <UART_init+0xb4>
	{
		SET_BIT(UCSRC,UCSZ1);
    32d6:	a0 e4       	ldi	r26, 0x40	; 64
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e0 e4       	ldi	r30, 0x40	; 64
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	84 60       	ori	r24, 0x04	; 4
    32e2:	8c 93       	st	X, r24
    32e4:	13 c0       	rjmp	.+38     	; 0x330c <UART_init+0xda>
		//UCSRC |= (1<<UCSZ1);
	}
	else if(Config_Ptr->size == BIT_8)
    32e6:	e9 85       	ldd	r30, Y+9	; 0x09
    32e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    32ea:	82 81       	ldd	r24, Z+2	; 0x02
    32ec:	83 30       	cpi	r24, 0x03	; 3
    32ee:	71 f4       	brne	.+28     	; 0x330c <UART_init+0xda>
	{
		SET_BIT(UCSRC,UCSZ1);
    32f0:	a0 e4       	ldi	r26, 0x40	; 64
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e0 e4       	ldi	r30, 0x40	; 64
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	84 60       	ori	r24, 0x04	; 4
    32fc:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    32fe:	a0 e4       	ldi	r26, 0x40	; 64
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e0 e4       	ldi	r30, 0x40	; 64
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	82 60       	ori	r24, 0x02	; 2
    330a:	8c 93       	st	X, r24
		//UCSRC = (1<<UCSZ0) | (1<<UCSZ1);  /*For 8-bit data mode*/
	}

	UCSRC = (1<<URSEL);
    330c:	e0 e4       	ldi	r30, 0x40	; 64
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 e8       	ldi	r24, 0x80	; 128
    3312:	80 83       	st	Z, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	


	baudrate =  Config_Ptr->s_baudrate;
    3314:	e9 85       	ldd	r30, Y+9	; 0x09
    3316:	fa 85       	ldd	r31, Y+10	; 0x0a
    3318:	83 81       	ldd	r24, Z+3	; 0x03
    331a:	94 81       	ldd	r25, Z+4	; 0x04
    331c:	a5 81       	ldd	r26, Z+5	; 0x05
    331e:	b6 81       	ldd	r27, Z+6	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	af 83       	std	Y+7, r26	; 0x07
    3326:	b8 87       	std	Y+8, r27	; 0x08

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	baud_prescaler = (((F_CPU / (baudrate * 8UL))) - 1);
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	af 81       	ldd	r26, Y+7	; 0x07
    332e:	b8 85       	ldd	r27, Y+8	; 0x08
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	aa 1f       	adc	r26, r26
    3336:	bb 1f       	adc	r27, r27
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	aa 1f       	adc	r26, r26
    333e:	bb 1f       	adc	r27, r27
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	aa 1f       	adc	r26, r26
    3346:	bb 1f       	adc	r27, r27
    3348:	9c 01       	movw	r18, r24
    334a:	ad 01       	movw	r20, r26
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	92 e1       	ldi	r25, 0x12	; 18
    3350:	aa e7       	ldi	r26, 0x7A	; 122
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__udivmodsi4>
    335c:	da 01       	movw	r26, r20
    335e:	c9 01       	movw	r24, r18
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	a1 09       	sbc	r26, r1
    3364:	b1 09       	sbc	r27, r1
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	ab 83       	std	Y+3, r26	; 0x03
    336c:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = baud_prescaler>>8;
    336e:	e0 e4       	ldi	r30, 0x40	; 64
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	9a 81       	ldd	r25, Y+2	; 0x02
    3376:	ab 81       	ldd	r26, Y+3	; 0x03
    3378:	bc 81       	ldd	r27, Y+4	; 0x04
    337a:	89 2f       	mov	r24, r25
    337c:	9a 2f       	mov	r25, r26
    337e:	ab 2f       	mov	r26, r27
    3380:	bb 27       	eor	r27, r27
    3382:	80 83       	st	Z, r24
	UBRRL = baud_prescaler;
    3384:	e9 e2       	ldi	r30, 0x29	; 41
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	80 83       	st	Z, r24
}
    338c:	2a 96       	adiw	r28, 0x0a	; 10
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	0f 92       	push	r0
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    33aa:	eb e2       	ldi	r30, 0x2B	; 43
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	88 2f       	mov	r24, r24
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	80 72       	andi	r24, 0x20	; 32
    33b6:	90 70       	andi	r25, 0x00	; 0
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	b9 f3       	breq	.-18     	; 0x33aa <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    33bc:	ec e2       	ldi	r30, 0x2C	; 44
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    33d4:	eb e2       	ldi	r30, 0x2B	; 43
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	88 23       	and	r24, r24
    33dc:	dc f7       	brge	.-10     	; 0x33d4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    33de:	ec e2       	ldi	r30, 0x2C	; 44
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
}
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <UART_sendString+0x6>
    33f0:	0f 92       	push	r0
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	9b 83       	std	Y+3, r25	; 0x03
    33f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33fa:	19 82       	std	Y+1, r1	; 0x01
    33fc:	0e c0       	rjmp	.+28     	; 0x341a <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	9b 81       	ldd	r25, Y+3	; 0x03
    3408:	fc 01       	movw	r30, r24
    340a:	e2 0f       	add	r30, r18
    340c:	f3 1f       	adc	r31, r19
    340e:	80 81       	ld	r24, Z
    3410:	0e 94 cf 19 	call	0x339e	; 0x339e <UART_sendByte>
		i++;
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	80 81       	ld	r24, Z
    342c:	88 23       	and	r24, r24
    342e:	39 f7       	brne	.-50     	; 0x33fe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	00 d0       	rcall	.+0      	; 0x3446 <UART_receiveString+0xa>
    3446:	0f 92       	push	r0
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	9b 83       	std	Y+3, r25	; 0x03
    344e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3450:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	9b 81       	ldd	r25, Y+3	; 0x03
    345c:	8c 01       	movw	r16, r24
    345e:	02 0f       	add	r16, r18
    3460:	13 1f       	adc	r17, r19
    3462:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    3466:	f8 01       	movw	r30, r16
    3468:	80 83       	st	Z, r24
    346a:	0f c0       	rjmp	.+30     	; 0x348a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	8f 5f       	subi	r24, 0xFF	; 255
    3470:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	9b 81       	ldd	r25, Y+3	; 0x03
    347c:	8c 01       	movw	r16, r24
    347e:	02 0f       	add	r16, r18
    3480:	13 1f       	adc	r17, r19
    3482:	0e 94 e6 19 	call	0x33cc	; 0x33cc <UART_recieveByte>
    3486:	f8 01       	movw	r30, r16
    3488:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	8a 81       	ldd	r24, Y+2	; 0x02
    3492:	9b 81       	ldd	r25, Y+3	; 0x03
    3494:	fc 01       	movw	r30, r24
    3496:	e2 0f       	add	r30, r18
    3498:	f3 1f       	adc	r31, r19
    349a:	80 81       	ld	r24, Z
    349c:	83 32       	cpi	r24, 0x23	; 35
    349e:	31 f7       	brne	.-52     	; 0x346c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	9b 81       	ldd	r25, Y+3	; 0x03
    34aa:	fc 01       	movw	r30, r24
    34ac:	e2 0f       	add	r30, r18
    34ae:	f3 1f       	adc	r31, r19
    34b0:	10 82       	st	Z, r1
}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	08 95       	ret

000034c2 <__udivmodsi4>:
    34c2:	a1 e2       	ldi	r26, 0x21	; 33
    34c4:	1a 2e       	mov	r1, r26
    34c6:	aa 1b       	sub	r26, r26
    34c8:	bb 1b       	sub	r27, r27
    34ca:	fd 01       	movw	r30, r26
    34cc:	0d c0       	rjmp	.+26     	; 0x34e8 <__udivmodsi4_ep>

000034ce <__udivmodsi4_loop>:
    34ce:	aa 1f       	adc	r26, r26
    34d0:	bb 1f       	adc	r27, r27
    34d2:	ee 1f       	adc	r30, r30
    34d4:	ff 1f       	adc	r31, r31
    34d6:	a2 17       	cp	r26, r18
    34d8:	b3 07       	cpc	r27, r19
    34da:	e4 07       	cpc	r30, r20
    34dc:	f5 07       	cpc	r31, r21
    34de:	20 f0       	brcs	.+8      	; 0x34e8 <__udivmodsi4_ep>
    34e0:	a2 1b       	sub	r26, r18
    34e2:	b3 0b       	sbc	r27, r19
    34e4:	e4 0b       	sbc	r30, r20
    34e6:	f5 0b       	sbc	r31, r21

000034e8 <__udivmodsi4_ep>:
    34e8:	66 1f       	adc	r22, r22
    34ea:	77 1f       	adc	r23, r23
    34ec:	88 1f       	adc	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	1a 94       	dec	r1
    34f2:	69 f7       	brne	.-38     	; 0x34ce <__udivmodsi4_loop>
    34f4:	60 95       	com	r22
    34f6:	70 95       	com	r23
    34f8:	80 95       	com	r24
    34fa:	90 95       	com	r25
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	bd 01       	movw	r22, r26
    3502:	cf 01       	movw	r24, r30
    3504:	08 95       	ret

00003506 <__prologue_saves__>:
    3506:	2f 92       	push	r2
    3508:	3f 92       	push	r3
    350a:	4f 92       	push	r4
    350c:	5f 92       	push	r5
    350e:	6f 92       	push	r6
    3510:	7f 92       	push	r7
    3512:	8f 92       	push	r8
    3514:	9f 92       	push	r9
    3516:	af 92       	push	r10
    3518:	bf 92       	push	r11
    351a:	cf 92       	push	r12
    351c:	df 92       	push	r13
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	ca 1b       	sub	r28, r26
    3530:	db 0b       	sbc	r29, r27
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	09 94       	ijmp

0000353e <__epilogue_restores__>:
    353e:	2a 88       	ldd	r2, Y+18	; 0x12
    3540:	39 88       	ldd	r3, Y+17	; 0x11
    3542:	48 88       	ldd	r4, Y+16	; 0x10
    3544:	5f 84       	ldd	r5, Y+15	; 0x0f
    3546:	6e 84       	ldd	r6, Y+14	; 0x0e
    3548:	7d 84       	ldd	r7, Y+13	; 0x0d
    354a:	8c 84       	ldd	r8, Y+12	; 0x0c
    354c:	9b 84       	ldd	r9, Y+11	; 0x0b
    354e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3550:	b9 84       	ldd	r11, Y+9	; 0x09
    3552:	c8 84       	ldd	r12, Y+8	; 0x08
    3554:	df 80       	ldd	r13, Y+7	; 0x07
    3556:	ee 80       	ldd	r14, Y+6	; 0x06
    3558:	fd 80       	ldd	r15, Y+5	; 0x05
    355a:	0c 81       	ldd	r16, Y+4	; 0x04
    355c:	1b 81       	ldd	r17, Y+3	; 0x03
    355e:	aa 81       	ldd	r26, Y+2	; 0x02
    3560:	b9 81       	ldd	r27, Y+1	; 0x01
    3562:	ce 0f       	add	r28, r30
    3564:	d1 1d       	adc	r29, r1
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	ed 01       	movw	r28, r26
    3572:	08 95       	ret

00003574 <strcmp>:
    3574:	fb 01       	movw	r30, r22
    3576:	dc 01       	movw	r26, r24
    3578:	8d 91       	ld	r24, X+
    357a:	01 90       	ld	r0, Z+
    357c:	80 19       	sub	r24, r0
    357e:	01 10       	cpse	r0, r1
    3580:	d9 f3       	breq	.-10     	; 0x3578 <strcmp+0x4>
    3582:	99 0b       	sbc	r25, r25
    3584:	08 95       	ret

00003586 <itoa>:
    3586:	fb 01       	movw	r30, r22
    3588:	9f 01       	movw	r18, r30
    358a:	e8 94       	clt
    358c:	42 30       	cpi	r20, 0x02	; 2
    358e:	c4 f0       	brlt	.+48     	; 0x35c0 <itoa+0x3a>
    3590:	45 32       	cpi	r20, 0x25	; 37
    3592:	b4 f4       	brge	.+44     	; 0x35c0 <itoa+0x3a>
    3594:	4a 30       	cpi	r20, 0x0A	; 10
    3596:	29 f4       	brne	.+10     	; 0x35a2 <itoa+0x1c>
    3598:	97 fb       	bst	r25, 7
    359a:	1e f4       	brtc	.+6      	; 0x35a2 <itoa+0x1c>
    359c:	90 95       	com	r25
    359e:	81 95       	neg	r24
    35a0:	9f 4f       	sbci	r25, 0xFF	; 255
    35a2:	64 2f       	mov	r22, r20
    35a4:	77 27       	eor	r23, r23
    35a6:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__udivmodhi4>
    35aa:	80 5d       	subi	r24, 0xD0	; 208
    35ac:	8a 33       	cpi	r24, 0x3A	; 58
    35ae:	0c f0       	brlt	.+2      	; 0x35b2 <itoa+0x2c>
    35b0:	89 5d       	subi	r24, 0xD9	; 217
    35b2:	81 93       	st	Z+, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	a1 f7       	brne	.-24     	; 0x35a2 <itoa+0x1c>
    35ba:	16 f4       	brtc	.+4      	; 0x35c0 <itoa+0x3a>
    35bc:	5d e2       	ldi	r21, 0x2D	; 45
    35be:	51 93       	st	Z+, r21
    35c0:	10 82       	st	Z, r1
    35c2:	c9 01       	movw	r24, r18
    35c4:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <strrev>

000035c8 <strrev>:
    35c8:	dc 01       	movw	r26, r24
    35ca:	fc 01       	movw	r30, r24
    35cc:	67 2f       	mov	r22, r23
    35ce:	71 91       	ld	r23, Z+
    35d0:	77 23       	and	r23, r23
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <strrev+0x4>
    35d4:	32 97       	sbiw	r30, 0x02	; 2
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <strrev+0x18>
    35d8:	7c 91       	ld	r23, X
    35da:	6d 93       	st	X+, r22
    35dc:	70 83       	st	Z, r23
    35de:	62 91       	ld	r22, -Z
    35e0:	ae 17       	cp	r26, r30
    35e2:	bf 07       	cpc	r27, r31
    35e4:	c8 f3       	brcs	.-14     	; 0x35d8 <strrev+0x10>
    35e6:	08 95       	ret

000035e8 <__udivmodhi4>:
    35e8:	aa 1b       	sub	r26, r26
    35ea:	bb 1b       	sub	r27, r27
    35ec:	51 e1       	ldi	r21, 0x11	; 17
    35ee:	07 c0       	rjmp	.+14     	; 0x35fe <__udivmodhi4_ep>

000035f0 <__udivmodhi4_loop>:
    35f0:	aa 1f       	adc	r26, r26
    35f2:	bb 1f       	adc	r27, r27
    35f4:	a6 17       	cp	r26, r22
    35f6:	b7 07       	cpc	r27, r23
    35f8:	10 f0       	brcs	.+4      	; 0x35fe <__udivmodhi4_ep>
    35fa:	a6 1b       	sub	r26, r22
    35fc:	b7 0b       	sbc	r27, r23

000035fe <__udivmodhi4_ep>:
    35fe:	88 1f       	adc	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	5a 95       	dec	r21
    3604:	a9 f7       	brne	.-22     	; 0x35f0 <__udivmodhi4_loop>
    3606:	80 95       	com	r24
    3608:	90 95       	com	r25
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	08 95       	ret

00003610 <_exit>:
    3610:	f8 94       	cli

00003612 <__stop_program>:
    3612:	ff cf       	rjmp	.-2      	; 0x3612 <__stop_program>
